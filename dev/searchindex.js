Search.setIndex({"docnames": ["CONTRIBUTING", "api/algorithm_functions/centrality", "api/algorithm_functions/coloring", "api/algorithm_functions/connectivity_and_cycles", "api/algorithm_functions/dag_algorithms", "api/algorithm_functions/graph_operations", "api/algorithm_functions/index", "api/algorithm_functions/isomorphism", "api/algorithm_functions/link_analysis", "api/algorithm_functions/matching", "api/algorithm_functions/other", "api/algorithm_functions/shortest_paths", "api/algorithm_functions/traversal", "api/algorithm_functions/tree", "api/converters", "api/custom_return_types", "api/exceptions", "api/generators", "api/graph_classes", "api/index", "api/layout_functions", "api/pydigraph_api_functions", "api/pygraph_api_functions", "api/random_graph_generator_functions", "api/serialization", "apiref/rustworkx.AllPairsPathLengthMapping", "apiref/rustworkx.AllPairsPathLengthMapping.items", "apiref/rustworkx.AllPairsPathLengthMapping.keys", "apiref/rustworkx.AllPairsPathLengthMapping.values", "apiref/rustworkx.AllPairsPathMapping", "apiref/rustworkx.AllPairsPathMapping.items", "apiref/rustworkx.AllPairsPathMapping.keys", "apiref/rustworkx.AllPairsPathMapping.values", "apiref/rustworkx.BFSPredecessors", "apiref/rustworkx.BFSSuccessors", "apiref/rustworkx.BiconnectedComponents", "apiref/rustworkx.BiconnectedComponents.items", "apiref/rustworkx.BiconnectedComponents.keys", "apiref/rustworkx.BiconnectedComponents.values", "apiref/rustworkx.CentralityMapping", "apiref/rustworkx.CentralityMapping.items", "apiref/rustworkx.CentralityMapping.keys", "apiref/rustworkx.CentralityMapping.values", "apiref/rustworkx.Chains", "apiref/rustworkx.DAGHasCycle", "apiref/rustworkx.DAGWouldCycle", "apiref/rustworkx.EdgeCentralityMapping", "apiref/rustworkx.EdgeCentralityMapping.items", "apiref/rustworkx.EdgeCentralityMapping.keys", "apiref/rustworkx.EdgeCentralityMapping.values", "apiref/rustworkx.EdgeIndexMap", "apiref/rustworkx.EdgeIndexMap.items", "apiref/rustworkx.EdgeIndexMap.keys", "apiref/rustworkx.EdgeIndexMap.values", "apiref/rustworkx.EdgeIndices", "apiref/rustworkx.EdgeList", "apiref/rustworkx.GraphNotBipartite", "apiref/rustworkx.InvalidMapping", "apiref/rustworkx.InvalidNode", "apiref/rustworkx.JSONSerializationError", "apiref/rustworkx.NegativeCycle", "apiref/rustworkx.NoEdgeBetweenNodes", "apiref/rustworkx.NoPathFound", "apiref/rustworkx.NoSuitableNeighbors", "apiref/rustworkx.NodeIndices", "apiref/rustworkx.NodeMap", "apiref/rustworkx.NodeMap.items", "apiref/rustworkx.NodeMap.keys", "apiref/rustworkx.NodeMap.values", "apiref/rustworkx.NullGraph", "apiref/rustworkx.PathLengthMapping", "apiref/rustworkx.PathLengthMapping.items", "apiref/rustworkx.PathLengthMapping.keys", "apiref/rustworkx.PathLengthMapping.values", "apiref/rustworkx.PathMapping", "apiref/rustworkx.PathMapping.items", "apiref/rustworkx.PathMapping.keys", "apiref/rustworkx.PathMapping.values", "apiref/rustworkx.Pos2DMapping", "apiref/rustworkx.Pos2DMapping.items", "apiref/rustworkx.Pos2DMapping.keys", "apiref/rustworkx.Pos2DMapping.values", "apiref/rustworkx.ProductNodeMap", "apiref/rustworkx.ProductNodeMap.items", "apiref/rustworkx.ProductNodeMap.keys", "apiref/rustworkx.ProductNodeMap.values", "apiref/rustworkx.PyDAG", "apiref/rustworkx.PyDAG.add_child", "apiref/rustworkx.PyDAG.add_edge", "apiref/rustworkx.PyDAG.add_edges_from", "apiref/rustworkx.PyDAG.add_edges_from_no_data", "apiref/rustworkx.PyDAG.add_node", "apiref/rustworkx.PyDAG.add_nodes_from", "apiref/rustworkx.PyDAG.add_parent", "apiref/rustworkx.PyDAG.adj", "apiref/rustworkx.PyDAG.adj_direction", "apiref/rustworkx.PyDAG.clear", "apiref/rustworkx.PyDAG.clear_edges", "apiref/rustworkx.PyDAG.compose", "apiref/rustworkx.PyDAG.contract_nodes", "apiref/rustworkx.PyDAG.copy", "apiref/rustworkx.PyDAG.edge_index_map", "apiref/rustworkx.PyDAG.edge_indices", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints", "apiref/rustworkx.PyDAG.edge_list", "apiref/rustworkx.PyDAG.edge_subgraph", "apiref/rustworkx.PyDAG.edges", "apiref/rustworkx.PyDAG.extend_from_edge_list", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list", "apiref/rustworkx.PyDAG.filter_edges", "apiref/rustworkx.PyDAG.filter_nodes", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge", "apiref/rustworkx.PyDAG.find_node_by_weight", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge", "apiref/rustworkx.PyDAG.find_predecessors_by_edge", "apiref/rustworkx.PyDAG.find_successors_by_edge", "apiref/rustworkx.PyDAG.from_adjacency_matrix", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix", "apiref/rustworkx.PyDAG.get_all_edge_data", "apiref/rustworkx.PyDAG.get_edge_data", "apiref/rustworkx.PyDAG.get_edge_data_by_index", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index", "apiref/rustworkx.PyDAG.get_node_data", "apiref/rustworkx.PyDAG.has_edge", "apiref/rustworkx.PyDAG.has_parallel_edges", "apiref/rustworkx.PyDAG.in_degree", "apiref/rustworkx.PyDAG.in_edges", "apiref/rustworkx.PyDAG.incident_edge_index_map", "apiref/rustworkx.PyDAG.incident_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDAG.insert_node_on_out_edges", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDAG.is_symmetric", "apiref/rustworkx.PyDAG.make_symmetric", "apiref/rustworkx.PyDAG.merge_nodes", "apiref/rustworkx.PyDAG.neighbors", "apiref/rustworkx.PyDAG.node_indexes", "apiref/rustworkx.PyDAG.node_indices", "apiref/rustworkx.PyDAG.nodes", "apiref/rustworkx.PyDAG.num_edges", "apiref/rustworkx.PyDAG.num_nodes", "apiref/rustworkx.PyDAG.out_degree", "apiref/rustworkx.PyDAG.out_edges", "apiref/rustworkx.PyDAG.predecessor_indices", "apiref/rustworkx.PyDAG.predecessors", "apiref/rustworkx.PyDAG.read_edge_list", "apiref/rustworkx.PyDAG.remove_edge", "apiref/rustworkx.PyDAG.remove_edge_from_index", "apiref/rustworkx.PyDAG.remove_edges_from", "apiref/rustworkx.PyDAG.remove_node", "apiref/rustworkx.PyDAG.remove_node_retain_edges", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_id", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_key", "apiref/rustworkx.PyDAG.remove_nodes_from", "apiref/rustworkx.PyDAG.reverse", "apiref/rustworkx.PyDAG.subgraph", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph", "apiref/rustworkx.PyDAG.successor_indices", "apiref/rustworkx.PyDAG.successors", "apiref/rustworkx.PyDAG.to_dot", "apiref/rustworkx.PyDAG.to_undirected", "apiref/rustworkx.PyDAG.update_edge", "apiref/rustworkx.PyDAG.update_edge_by_index", "apiref/rustworkx.PyDAG.weighted_edge_list", "apiref/rustworkx.PyDAG.write_edge_list", "apiref/rustworkx.PyDiGraph", "apiref/rustworkx.PyDiGraph.add_child", "apiref/rustworkx.PyDiGraph.add_edge", "apiref/rustworkx.PyDiGraph.add_edges_from", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data", "apiref/rustworkx.PyDiGraph.add_node", "apiref/rustworkx.PyDiGraph.add_nodes_from", "apiref/rustworkx.PyDiGraph.add_parent", "apiref/rustworkx.PyDiGraph.adj", "apiref/rustworkx.PyDiGraph.adj_direction", "apiref/rustworkx.PyDiGraph.clear", "apiref/rustworkx.PyDiGraph.clear_edges", "apiref/rustworkx.PyDiGraph.compose", "apiref/rustworkx.PyDiGraph.contract_nodes", "apiref/rustworkx.PyDiGraph.copy", "apiref/rustworkx.PyDiGraph.edge_index_map", "apiref/rustworkx.PyDiGraph.edge_indices", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyDiGraph.edge_list", "apiref/rustworkx.PyDiGraph.edge_subgraph", "apiref/rustworkx.PyDiGraph.edges", "apiref/rustworkx.PyDiGraph.extend_from_edge_list", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyDiGraph.filter_edges", "apiref/rustworkx.PyDiGraph.filter_nodes", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge", "apiref/rustworkx.PyDiGraph.find_node_by_weight", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge", "apiref/rustworkx.PyDiGraph.find_successors_by_edge", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyDiGraph.get_all_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyDiGraph.get_node_data", "apiref/rustworkx.PyDiGraph.has_edge", "apiref/rustworkx.PyDiGraph.has_parallel_edges", "apiref/rustworkx.PyDiGraph.in_degree", "apiref/rustworkx.PyDiGraph.in_edges", "apiref/rustworkx.PyDiGraph.incident_edge_index_map", "apiref/rustworkx.PyDiGraph.incident_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDiGraph.is_symmetric", "apiref/rustworkx.PyDiGraph.make_symmetric", "apiref/rustworkx.PyDiGraph.merge_nodes", "apiref/rustworkx.PyDiGraph.neighbors", "apiref/rustworkx.PyDiGraph.node_indexes", "apiref/rustworkx.PyDiGraph.node_indices", "apiref/rustworkx.PyDiGraph.nodes", "apiref/rustworkx.PyDiGraph.num_edges", "apiref/rustworkx.PyDiGraph.num_nodes", "apiref/rustworkx.PyDiGraph.out_degree", "apiref/rustworkx.PyDiGraph.out_edges", "apiref/rustworkx.PyDiGraph.predecessor_indices", "apiref/rustworkx.PyDiGraph.predecessors", "apiref/rustworkx.PyDiGraph.read_edge_list", "apiref/rustworkx.PyDiGraph.remove_edge", "apiref/rustworkx.PyDiGraph.remove_edge_from_index", "apiref/rustworkx.PyDiGraph.remove_edges_from", "apiref/rustworkx.PyDiGraph.remove_node", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_id", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_key", "apiref/rustworkx.PyDiGraph.remove_nodes_from", "apiref/rustworkx.PyDiGraph.reverse", "apiref/rustworkx.PyDiGraph.subgraph", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyDiGraph.successor_indices", "apiref/rustworkx.PyDiGraph.successors", "apiref/rustworkx.PyDiGraph.to_dot", "apiref/rustworkx.PyDiGraph.to_undirected", "apiref/rustworkx.PyDiGraph.update_edge", "apiref/rustworkx.PyDiGraph.update_edge_by_index", "apiref/rustworkx.PyDiGraph.weighted_edge_list", "apiref/rustworkx.PyDiGraph.write_edge_list", "apiref/rustworkx.PyGraph", "apiref/rustworkx.PyGraph.add_edge", "apiref/rustworkx.PyGraph.add_edges_from", "apiref/rustworkx.PyGraph.add_edges_from_no_data", "apiref/rustworkx.PyGraph.add_node", "apiref/rustworkx.PyGraph.add_nodes_from", "apiref/rustworkx.PyGraph.adj", "apiref/rustworkx.PyGraph.clear", "apiref/rustworkx.PyGraph.clear_edges", "apiref/rustworkx.PyGraph.compose", "apiref/rustworkx.PyGraph.contract_nodes", "apiref/rustworkx.PyGraph.copy", "apiref/rustworkx.PyGraph.degree", "apiref/rustworkx.PyGraph.edge_index_map", "apiref/rustworkx.PyGraph.edge_indices", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyGraph.edge_list", "apiref/rustworkx.PyGraph.edge_subgraph", "apiref/rustworkx.PyGraph.edges", "apiref/rustworkx.PyGraph.extend_from_edge_list", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyGraph.filter_edges", "apiref/rustworkx.PyGraph.filter_nodes", "apiref/rustworkx.PyGraph.find_node_by_weight", "apiref/rustworkx.PyGraph.from_adjacency_matrix", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyGraph.get_all_edge_data", "apiref/rustworkx.PyGraph.get_edge_data", "apiref/rustworkx.PyGraph.get_edge_data_by_index", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyGraph.get_node_data", "apiref/rustworkx.PyGraph.has_edge", "apiref/rustworkx.PyGraph.has_parallel_edges", "apiref/rustworkx.PyGraph.in_edges", "apiref/rustworkx.PyGraph.incident_edge_index_map", "apiref/rustworkx.PyGraph.incident_edges", "apiref/rustworkx.PyGraph.neighbors", "apiref/rustworkx.PyGraph.node_indexes", "apiref/rustworkx.PyGraph.node_indices", "apiref/rustworkx.PyGraph.nodes", "apiref/rustworkx.PyGraph.num_edges", "apiref/rustworkx.PyGraph.num_nodes", "apiref/rustworkx.PyGraph.out_edges", "apiref/rustworkx.PyGraph.read_edge_list", "apiref/rustworkx.PyGraph.remove_edge", "apiref/rustworkx.PyGraph.remove_edge_from_index", "apiref/rustworkx.PyGraph.remove_edges_from", "apiref/rustworkx.PyGraph.remove_node", "apiref/rustworkx.PyGraph.remove_nodes_from", "apiref/rustworkx.PyGraph.subgraph", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyGraph.to_directed", "apiref/rustworkx.PyGraph.to_dot", "apiref/rustworkx.PyGraph.update_edge", "apiref/rustworkx.PyGraph.update_edge_by_index", "apiref/rustworkx.PyGraph.weighted_edge_list", "apiref/rustworkx.PyGraph.write_edge_list", "apiref/rustworkx.TopologicalSorter", "apiref/rustworkx.TopologicalSorter.done", "apiref/rustworkx.TopologicalSorter.get_ready", "apiref/rustworkx.TopologicalSorter.is_active", "apiref/rustworkx.WeightedEdgeList", "apiref/rustworkx.adjacency_matrix", "apiref/rustworkx.all_pairs_all_simple_paths", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.all_pairs_dijkstra_path_lengths", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.all_shortest_paths", "apiref/rustworkx.all_simple_paths", "apiref/rustworkx.ancestors", "apiref/rustworkx.articulation_points", "apiref/rustworkx.astar_shortest_path", "apiref/rustworkx.barabasi_albert_graph", "apiref/rustworkx.bellman_ford_shortest_path_lengths", "apiref/rustworkx.bellman_ford_shortest_paths", "apiref/rustworkx.betweenness_centrality", "apiref/rustworkx.bfs_predecessors", "apiref/rustworkx.bfs_search", "apiref/rustworkx.bfs_successors", "apiref/rustworkx.biconnected_components", "apiref/rustworkx.bipartite_layout", "apiref/rustworkx.bridges", "apiref/rustworkx.cartesian_product", "apiref/rustworkx.chain_decomposition", "apiref/rustworkx.circular_layout", "apiref/rustworkx.closeness_centrality", "apiref/rustworkx.collect_bicolor_runs", "apiref/rustworkx.collect_runs", "apiref/rustworkx.complement", "apiref/rustworkx.connected_components", "apiref/rustworkx.core_number", "apiref/rustworkx.cycle_basis", "apiref/rustworkx.dag_longest_path", "apiref/rustworkx.dag_longest_path_length", "apiref/rustworkx.dag_weighted_longest_path", "apiref/rustworkx.dag_weighted_longest_path_length", "apiref/rustworkx.descendants", "apiref/rustworkx.dfs_edges", "apiref/rustworkx.dfs_search", "apiref/rustworkx.digraph_adjacency_matrix", "apiref/rustworkx.digraph_all_pairs_all_simple_paths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.digraph_all_shortest_paths", "apiref/rustworkx.digraph_all_simple_paths", "apiref/rustworkx.digraph_astar_shortest_path", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.digraph_betweenness_centrality", "apiref/rustworkx.digraph_bfs_search", "apiref/rustworkx.digraph_bipartite_layout", "apiref/rustworkx.digraph_cartesian_product", "apiref/rustworkx.digraph_circular_layout", "apiref/rustworkx.digraph_closeness_centrality", "apiref/rustworkx.digraph_complement", "apiref/rustworkx.digraph_core_number", "apiref/rustworkx.digraph_dfs_edges", "apiref/rustworkx.digraph_dfs_search", "apiref/rustworkx.digraph_dijkstra_search", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths", "apiref/rustworkx.digraph_dijkstra_shortest_paths", "apiref/rustworkx.digraph_distance_matrix", "apiref/rustworkx.digraph_edge_betweenness_centrality", "apiref/rustworkx.digraph_eigenvector_centrality", "apiref/rustworkx.digraph_find_cycle", "apiref/rustworkx.digraph_floyd_warshall", "apiref/rustworkx.digraph_floyd_warshall_numpy", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance", "apiref/rustworkx.digraph_is_isomorphic", "apiref/rustworkx.digraph_is_subgraph_isomorphic", "apiref/rustworkx.digraph_k_shortest_path_lengths", "apiref/rustworkx.digraph_katz_centrality", "apiref/rustworkx.digraph_longest_simple_path", "apiref/rustworkx.digraph_node_link_json", "apiref/rustworkx.digraph_num_shortest_paths_unweighted", "apiref/rustworkx.digraph_random_layout", "apiref/rustworkx.digraph_shell_layout", "apiref/rustworkx.digraph_spiral_layout", "apiref/rustworkx.digraph_spring_layout", "apiref/rustworkx.digraph_tensor_product", "apiref/rustworkx.digraph_transitivity", "apiref/rustworkx.digraph_union", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length", "apiref/rustworkx.digraph_vf2_mapping", "apiref/rustworkx.dijkstra_search", "apiref/rustworkx.dijkstra_shortest_path_lengths", "apiref/rustworkx.dijkstra_shortest_paths", "apiref/rustworkx.directed_barabasi_albert_graph", "apiref/rustworkx.directed_gnm_random_graph", "apiref/rustworkx.directed_gnp_random_graph", "apiref/rustworkx.directed_random_bipartite_graph", "apiref/rustworkx.distance_matrix", "apiref/rustworkx.edge_betweenness_centrality", "apiref/rustworkx.eigenvector_centrality", "apiref/rustworkx.find_negative_cycle", "apiref/rustworkx.floyd_warshall", "apiref/rustworkx.floyd_warshall_numpy", "apiref/rustworkx.floyd_warshall_successor_and_distance", "apiref/rustworkx.generators.barbell_graph", "apiref/rustworkx.generators.binomial_tree_graph", "apiref/rustworkx.generators.complete_graph", "apiref/rustworkx.generators.cycle_graph", "apiref/rustworkx.generators.directed_binomial_tree_graph", "apiref/rustworkx.generators.directed_complete_graph", "apiref/rustworkx.generators.directed_cycle_graph", "apiref/rustworkx.generators.directed_empty_graph", "apiref/rustworkx.generators.directed_grid_graph", "apiref/rustworkx.generators.directed_heavy_hex_graph", "apiref/rustworkx.generators.directed_heavy_square_graph", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph", "apiref/rustworkx.generators.directed_mesh_graph", "apiref/rustworkx.generators.directed_path_graph", "apiref/rustworkx.generators.directed_star_graph", "apiref/rustworkx.generators.empty_graph", "apiref/rustworkx.generators.full_rary_tree", "apiref/rustworkx.generators.generalized_petersen_graph", "apiref/rustworkx.generators.grid_graph", "apiref/rustworkx.generators.heavy_hex_graph", "apiref/rustworkx.generators.heavy_square_graph", "apiref/rustworkx.generators.hexagonal_lattice_graph", "apiref/rustworkx.generators.lollipop_graph", "apiref/rustworkx.generators.mesh_graph", "apiref/rustworkx.generators.path_graph", "apiref/rustworkx.generators.star_graph", "apiref/rustworkx.graph_adjacency_matrix", "apiref/rustworkx.graph_all_pairs_all_simple_paths", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.graph_all_shortest_paths", "apiref/rustworkx.graph_all_simple_paths", "apiref/rustworkx.graph_astar_shortest_path", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.graph_betweenness_centrality", "apiref/rustworkx.graph_bfs_search", "apiref/rustworkx.graph_bipartite_edge_color", "apiref/rustworkx.graph_bipartite_layout", "apiref/rustworkx.graph_cartesian_product", "apiref/rustworkx.graph_circular_layout", "apiref/rustworkx.graph_closeness_centrality", "apiref/rustworkx.graph_complement", "apiref/rustworkx.graph_core_number", "apiref/rustworkx.graph_dfs_edges", "apiref/rustworkx.graph_dfs_search", "apiref/rustworkx.graph_dijkstra_search", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths", "apiref/rustworkx.graph_dijkstra_shortest_paths", "apiref/rustworkx.graph_distance_matrix", "apiref/rustworkx.graph_edge_betweenness_centrality", "apiref/rustworkx.graph_eigenvector_centrality", "apiref/rustworkx.graph_floyd_warshall", "apiref/rustworkx.graph_floyd_warshall_numpy", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance", "apiref/rustworkx.graph_greedy_color", "apiref/rustworkx.graph_greedy_edge_color", "apiref/rustworkx.graph_is_isomorphic", "apiref/rustworkx.graph_is_subgraph_isomorphic", "apiref/rustworkx.graph_k_shortest_path_lengths", "apiref/rustworkx.graph_katz_centrality", "apiref/rustworkx.graph_line_graph", "apiref/rustworkx.graph_longest_simple_path", "apiref/rustworkx.graph_misra_gries_edge_color", "apiref/rustworkx.graph_node_link_json", "apiref/rustworkx.graph_num_shortest_paths_unweighted", "apiref/rustworkx.graph_random_layout", "apiref/rustworkx.graph_shell_layout", "apiref/rustworkx.graph_spiral_layout", "apiref/rustworkx.graph_spring_layout", "apiref/rustworkx.graph_tensor_product", "apiref/rustworkx.graph_token_swapper", "apiref/rustworkx.graph_transitivity", "apiref/rustworkx.graph_union", "apiref/rustworkx.graph_unweighted_average_shortest_path_length", "apiref/rustworkx.graph_vf2_mapping", "apiref/rustworkx.has_path", "apiref/rustworkx.hits", "apiref/rustworkx.is_bipartite", "apiref/rustworkx.is_connected", "apiref/rustworkx.is_directed_acyclic_graph", "apiref/rustworkx.is_isomorphic", "apiref/rustworkx.is_isomorphic_node_match", "apiref/rustworkx.is_matching", "apiref/rustworkx.is_maximal_matching", "apiref/rustworkx.is_planar", "apiref/rustworkx.is_subgraph_isomorphic", "apiref/rustworkx.is_weakly_connected", "apiref/rustworkx.isolates", "apiref/rustworkx.k_shortest_path_lengths", "apiref/rustworkx.katz_centrality", "apiref/rustworkx.layers", "apiref/rustworkx.lexicographical_topological_sort", "apiref/rustworkx.longest_simple_path", "apiref/rustworkx.max_weight_matching", "apiref/rustworkx.metric_closure", "apiref/rustworkx.minimum_spanning_edges", "apiref/rustworkx.minimum_spanning_tree", "apiref/rustworkx.negative_edge_cycle", "apiref/rustworkx.networkx_converter", "apiref/rustworkx.node_connected_component", "apiref/rustworkx.node_link_json", "apiref/rustworkx.num_shortest_paths_unweighted", "apiref/rustworkx.number_connected_components", "apiref/rustworkx.number_weakly_connected_components", "apiref/rustworkx.pagerank", "apiref/rustworkx.random_geometric_graph", "apiref/rustworkx.random_layout", "apiref/rustworkx.read_graphml", "apiref/rustworkx.shell_layout", "apiref/rustworkx.simple_cycles", "apiref/rustworkx.spiral_layout", "apiref/rustworkx.spring_layout", "apiref/rustworkx.steiner_tree", "apiref/rustworkx.stoer_wagner_min_cut", "apiref/rustworkx.strongly_connected_components", "apiref/rustworkx.topological_generations", "apiref/rustworkx.topological_sort", "apiref/rustworkx.transitive_reduction", "apiref/rustworkx.transitivity", "apiref/rustworkx.two_color", "apiref/rustworkx.undirected_gnm_random_graph", "apiref/rustworkx.undirected_gnp_random_graph", "apiref/rustworkx.undirected_random_bipartite_graph", "apiref/rustworkx.union", "apiref/rustworkx.unweighted_average_shortest_path_length", "apiref/rustworkx.vf2_mapping", "apiref/rustworkx.visit.BFSVisitor", "apiref/rustworkx.visit.BFSVisitor.black_target_edge", "apiref/rustworkx.visit.BFSVisitor.discover_vertex", "apiref/rustworkx.visit.BFSVisitor.finish_vertex", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge", "apiref/rustworkx.visit.BFSVisitor.tree_edge", "apiref/rustworkx.visit.DFSVisitor", "apiref/rustworkx.visit.DFSVisitor.back_edge", "apiref/rustworkx.visit.DFSVisitor.discover_vertex", "apiref/rustworkx.visit.DFSVisitor.finish_vertex", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge", "apiref/rustworkx.visit.DFSVisitor.tree_edge", "apiref/rustworkx.visit.DijkstraVisitor", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex", "apiref/rustworkx.visit.PruneSearch", "apiref/rustworkx.visit.StopSearch", "apiref/rustworkx.visualization.graphviz_draw", "apiref/rustworkx.visualization.mpl_draw", "apiref/rustworkx.weakly_connected_components", "benchmarks", "index", "install", "networkx", "release_notes", "tutorial/betweenness_centrality", "tutorial/dags", "tutorial/index", "tutorial/introduction", "visualization"], "filenames": ["CONTRIBUTING.md", "api/algorithm_functions/centrality.rst", "api/algorithm_functions/coloring.rst", "api/algorithm_functions/connectivity_and_cycles.rst", "api/algorithm_functions/dag_algorithms.rst", "api/algorithm_functions/graph_operations.rst", "api/algorithm_functions/index.rst", "api/algorithm_functions/isomorphism.rst", "api/algorithm_functions/link_analysis.rst", "api/algorithm_functions/matching.rst", "api/algorithm_functions/other.rst", "api/algorithm_functions/shortest_paths.rst", "api/algorithm_functions/traversal.rst", "api/algorithm_functions/tree.rst", "api/converters.rst", "api/custom_return_types.rst", "api/exceptions.rst", "api/generators.rst", "api/graph_classes.rst", "api/index.rst", "api/layout_functions.rst", "api/pydigraph_api_functions.rst", "api/pygraph_api_functions.rst", "api/random_graph_generator_functions.rst", "api/serialization.rst", "apiref/rustworkx.AllPairsPathLengthMapping.rst", "apiref/rustworkx.AllPairsPathLengthMapping.items.rst", "apiref/rustworkx.AllPairsPathLengthMapping.keys.rst", "apiref/rustworkx.AllPairsPathLengthMapping.values.rst", "apiref/rustworkx.AllPairsPathMapping.rst", "apiref/rustworkx.AllPairsPathMapping.items.rst", "apiref/rustworkx.AllPairsPathMapping.keys.rst", "apiref/rustworkx.AllPairsPathMapping.values.rst", "apiref/rustworkx.BFSPredecessors.rst", "apiref/rustworkx.BFSSuccessors.rst", "apiref/rustworkx.BiconnectedComponents.rst", "apiref/rustworkx.BiconnectedComponents.items.rst", "apiref/rustworkx.BiconnectedComponents.keys.rst", "apiref/rustworkx.BiconnectedComponents.values.rst", "apiref/rustworkx.CentralityMapping.rst", "apiref/rustworkx.CentralityMapping.items.rst", "apiref/rustworkx.CentralityMapping.keys.rst", "apiref/rustworkx.CentralityMapping.values.rst", "apiref/rustworkx.Chains.rst", "apiref/rustworkx.DAGHasCycle.rst", "apiref/rustworkx.DAGWouldCycle.rst", "apiref/rustworkx.EdgeCentralityMapping.rst", "apiref/rustworkx.EdgeCentralityMapping.items.rst", "apiref/rustworkx.EdgeCentralityMapping.keys.rst", "apiref/rustworkx.EdgeCentralityMapping.values.rst", "apiref/rustworkx.EdgeIndexMap.rst", "apiref/rustworkx.EdgeIndexMap.items.rst", "apiref/rustworkx.EdgeIndexMap.keys.rst", "apiref/rustworkx.EdgeIndexMap.values.rst", "apiref/rustworkx.EdgeIndices.rst", "apiref/rustworkx.EdgeList.rst", "apiref/rustworkx.GraphNotBipartite.rst", "apiref/rustworkx.InvalidMapping.rst", "apiref/rustworkx.InvalidNode.rst", "apiref/rustworkx.JSONSerializationError.rst", "apiref/rustworkx.NegativeCycle.rst", "apiref/rustworkx.NoEdgeBetweenNodes.rst", "apiref/rustworkx.NoPathFound.rst", "apiref/rustworkx.NoSuitableNeighbors.rst", "apiref/rustworkx.NodeIndices.rst", "apiref/rustworkx.NodeMap.rst", "apiref/rustworkx.NodeMap.items.rst", "apiref/rustworkx.NodeMap.keys.rst", "apiref/rustworkx.NodeMap.values.rst", "apiref/rustworkx.NullGraph.rst", "apiref/rustworkx.PathLengthMapping.rst", "apiref/rustworkx.PathLengthMapping.items.rst", "apiref/rustworkx.PathLengthMapping.keys.rst", "apiref/rustworkx.PathLengthMapping.values.rst", "apiref/rustworkx.PathMapping.rst", "apiref/rustworkx.PathMapping.items.rst", "apiref/rustworkx.PathMapping.keys.rst", "apiref/rustworkx.PathMapping.values.rst", "apiref/rustworkx.Pos2DMapping.rst", "apiref/rustworkx.Pos2DMapping.items.rst", "apiref/rustworkx.Pos2DMapping.keys.rst", "apiref/rustworkx.Pos2DMapping.values.rst", "apiref/rustworkx.ProductNodeMap.rst", "apiref/rustworkx.ProductNodeMap.items.rst", "apiref/rustworkx.ProductNodeMap.keys.rst", "apiref/rustworkx.ProductNodeMap.values.rst", "apiref/rustworkx.PyDAG.rst", "apiref/rustworkx.PyDAG.add_child.rst", "apiref/rustworkx.PyDAG.add_edge.rst", "apiref/rustworkx.PyDAG.add_edges_from.rst", "apiref/rustworkx.PyDAG.add_edges_from_no_data.rst", "apiref/rustworkx.PyDAG.add_node.rst", "apiref/rustworkx.PyDAG.add_nodes_from.rst", "apiref/rustworkx.PyDAG.add_parent.rst", "apiref/rustworkx.PyDAG.adj.rst", "apiref/rustworkx.PyDAG.adj_direction.rst", "apiref/rustworkx.PyDAG.clear.rst", "apiref/rustworkx.PyDAG.clear_edges.rst", "apiref/rustworkx.PyDAG.compose.rst", "apiref/rustworkx.PyDAG.contract_nodes.rst", "apiref/rustworkx.PyDAG.copy.rst", "apiref/rustworkx.PyDAG.edge_index_map.rst", "apiref/rustworkx.PyDAG.edge_indices.rst", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDAG.edge_list.rst", "apiref/rustworkx.PyDAG.edge_subgraph.rst", "apiref/rustworkx.PyDAG.edges.rst", "apiref/rustworkx.PyDAG.extend_from_edge_list.rst", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDAG.filter_edges.rst", "apiref/rustworkx.PyDAG.filter_nodes.rst", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_node_by_weight.rst", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDAG.find_successors_by_edge.rst", "apiref/rustworkx.PyDAG.from_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.get_all_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data_by_index.rst", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDAG.get_node_data.rst", "apiref/rustworkx.PyDAG.has_edge.rst", "apiref/rustworkx.PyDAG.has_parallel_edges.rst", "apiref/rustworkx.PyDAG.in_degree.rst", "apiref/rustworkx.PyDAG.in_edges.rst", "apiref/rustworkx.PyDAG.incident_edge_index_map.rst", "apiref/rustworkx.PyDAG.incident_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDAG.is_symmetric.rst", "apiref/rustworkx.PyDAG.make_symmetric.rst", "apiref/rustworkx.PyDAG.merge_nodes.rst", "apiref/rustworkx.PyDAG.neighbors.rst", "apiref/rustworkx.PyDAG.node_indexes.rst", "apiref/rustworkx.PyDAG.node_indices.rst", "apiref/rustworkx.PyDAG.nodes.rst", "apiref/rustworkx.PyDAG.num_edges.rst", "apiref/rustworkx.PyDAG.num_nodes.rst", "apiref/rustworkx.PyDAG.out_degree.rst", "apiref/rustworkx.PyDAG.out_edges.rst", "apiref/rustworkx.PyDAG.predecessor_indices.rst", "apiref/rustworkx.PyDAG.predecessors.rst", "apiref/rustworkx.PyDAG.read_edge_list.rst", "apiref/rustworkx.PyDAG.remove_edge.rst", "apiref/rustworkx.PyDAG.remove_edge_from_index.rst", "apiref/rustworkx.PyDAG.remove_edges_from.rst", "apiref/rustworkx.PyDAG.remove_node.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_id.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_key.rst", "apiref/rustworkx.PyDAG.remove_nodes_from.rst", "apiref/rustworkx.PyDAG.reverse.rst", "apiref/rustworkx.PyDAG.subgraph.rst", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDAG.successor_indices.rst", "apiref/rustworkx.PyDAG.successors.rst", "apiref/rustworkx.PyDAG.to_dot.rst", "apiref/rustworkx.PyDAG.to_undirected.rst", "apiref/rustworkx.PyDAG.update_edge.rst", "apiref/rustworkx.PyDAG.update_edge_by_index.rst", "apiref/rustworkx.PyDAG.weighted_edge_list.rst", "apiref/rustworkx.PyDAG.write_edge_list.rst", "apiref/rustworkx.PyDiGraph.rst", "apiref/rustworkx.PyDiGraph.add_child.rst", "apiref/rustworkx.PyDiGraph.add_edge.rst", "apiref/rustworkx.PyDiGraph.add_edges_from.rst", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyDiGraph.add_node.rst", "apiref/rustworkx.PyDiGraph.add_nodes_from.rst", "apiref/rustworkx.PyDiGraph.add_parent.rst", "apiref/rustworkx.PyDiGraph.adj.rst", "apiref/rustworkx.PyDiGraph.adj_direction.rst", "apiref/rustworkx.PyDiGraph.clear.rst", "apiref/rustworkx.PyDiGraph.clear_edges.rst", "apiref/rustworkx.PyDiGraph.compose.rst", "apiref/rustworkx.PyDiGraph.contract_nodes.rst", "apiref/rustworkx.PyDiGraph.copy.rst", "apiref/rustworkx.PyDiGraph.edge_index_map.rst", "apiref/rustworkx.PyDiGraph.edge_indices.rst", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDiGraph.edge_list.rst", "apiref/rustworkx.PyDiGraph.edge_subgraph.rst", "apiref/rustworkx.PyDiGraph.edges.rst", "apiref/rustworkx.PyDiGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.filter_edges.rst", "apiref/rustworkx.PyDiGraph.filter_nodes.rst", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_node_by_weight.rst", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_successors_by_edge.rst", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.get_all_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDiGraph.get_node_data.rst", "apiref/rustworkx.PyDiGraph.has_edge.rst", "apiref/rustworkx.PyDiGraph.has_parallel_edges.rst", "apiref/rustworkx.PyDiGraph.in_degree.rst", "apiref/rustworkx.PyDiGraph.in_edges.rst", "apiref/rustworkx.PyDiGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyDiGraph.incident_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.is_symmetric.rst", "apiref/rustworkx.PyDiGraph.make_symmetric.rst", "apiref/rustworkx.PyDiGraph.merge_nodes.rst", "apiref/rustworkx.PyDiGraph.neighbors.rst", "apiref/rustworkx.PyDiGraph.node_indexes.rst", "apiref/rustworkx.PyDiGraph.node_indices.rst", "apiref/rustworkx.PyDiGraph.nodes.rst", "apiref/rustworkx.PyDiGraph.num_edges.rst", "apiref/rustworkx.PyDiGraph.num_nodes.rst", "apiref/rustworkx.PyDiGraph.out_degree.rst", "apiref/rustworkx.PyDiGraph.out_edges.rst", "apiref/rustworkx.PyDiGraph.predecessor_indices.rst", "apiref/rustworkx.PyDiGraph.predecessors.rst", "apiref/rustworkx.PyDiGraph.read_edge_list.rst", "apiref/rustworkx.PyDiGraph.remove_edge.rst", "apiref/rustworkx.PyDiGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyDiGraph.remove_edges_from.rst", "apiref/rustworkx.PyDiGraph.remove_node.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_id.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_key.rst", "apiref/rustworkx.PyDiGraph.remove_nodes_from.rst", "apiref/rustworkx.PyDiGraph.reverse.rst", "apiref/rustworkx.PyDiGraph.subgraph.rst", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDiGraph.successor_indices.rst", "apiref/rustworkx.PyDiGraph.successors.rst", "apiref/rustworkx.PyDiGraph.to_dot.rst", "apiref/rustworkx.PyDiGraph.to_undirected.rst", "apiref/rustworkx.PyDiGraph.update_edge.rst", "apiref/rustworkx.PyDiGraph.update_edge_by_index.rst", "apiref/rustworkx.PyDiGraph.weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.write_edge_list.rst", "apiref/rustworkx.PyGraph.rst", "apiref/rustworkx.PyGraph.add_edge.rst", "apiref/rustworkx.PyGraph.add_edges_from.rst", "apiref/rustworkx.PyGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyGraph.add_node.rst", "apiref/rustworkx.PyGraph.add_nodes_from.rst", "apiref/rustworkx.PyGraph.adj.rst", "apiref/rustworkx.PyGraph.clear.rst", "apiref/rustworkx.PyGraph.clear_edges.rst", "apiref/rustworkx.PyGraph.compose.rst", "apiref/rustworkx.PyGraph.contract_nodes.rst", "apiref/rustworkx.PyGraph.copy.rst", "apiref/rustworkx.PyGraph.degree.rst", "apiref/rustworkx.PyGraph.edge_index_map.rst", "apiref/rustworkx.PyGraph.edge_indices.rst", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyGraph.edge_list.rst", "apiref/rustworkx.PyGraph.edge_subgraph.rst", "apiref/rustworkx.PyGraph.edges.rst", "apiref/rustworkx.PyGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyGraph.filter_edges.rst", "apiref/rustworkx.PyGraph.filter_nodes.rst", "apiref/rustworkx.PyGraph.find_node_by_weight.rst", "apiref/rustworkx.PyGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.get_all_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyGraph.get_node_data.rst", "apiref/rustworkx.PyGraph.has_edge.rst", "apiref/rustworkx.PyGraph.has_parallel_edges.rst", "apiref/rustworkx.PyGraph.in_edges.rst", "apiref/rustworkx.PyGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyGraph.incident_edges.rst", "apiref/rustworkx.PyGraph.neighbors.rst", "apiref/rustworkx.PyGraph.node_indexes.rst", "apiref/rustworkx.PyGraph.node_indices.rst", "apiref/rustworkx.PyGraph.nodes.rst", "apiref/rustworkx.PyGraph.num_edges.rst", "apiref/rustworkx.PyGraph.num_nodes.rst", "apiref/rustworkx.PyGraph.out_edges.rst", "apiref/rustworkx.PyGraph.read_edge_list.rst", "apiref/rustworkx.PyGraph.remove_edge.rst", "apiref/rustworkx.PyGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyGraph.remove_edges_from.rst", "apiref/rustworkx.PyGraph.remove_node.rst", "apiref/rustworkx.PyGraph.remove_nodes_from.rst", "apiref/rustworkx.PyGraph.subgraph.rst", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyGraph.to_directed.rst", "apiref/rustworkx.PyGraph.to_dot.rst", "apiref/rustworkx.PyGraph.update_edge.rst", "apiref/rustworkx.PyGraph.update_edge_by_index.rst", "apiref/rustworkx.PyGraph.weighted_edge_list.rst", "apiref/rustworkx.PyGraph.write_edge_list.rst", "apiref/rustworkx.TopologicalSorter.rst", "apiref/rustworkx.TopologicalSorter.done.rst", "apiref/rustworkx.TopologicalSorter.get_ready.rst", "apiref/rustworkx.TopologicalSorter.is_active.rst", "apiref/rustworkx.WeightedEdgeList.rst", "apiref/rustworkx.adjacency_matrix.rst", "apiref/rustworkx.all_pairs_all_simple_paths.rst", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.all_shortest_paths.rst", "apiref/rustworkx.all_simple_paths.rst", "apiref/rustworkx.ancestors.rst", "apiref/rustworkx.articulation_points.rst", "apiref/rustworkx.astar_shortest_path.rst", "apiref/rustworkx.barabasi_albert_graph.rst", "apiref/rustworkx.bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.bellman_ford_shortest_paths.rst", "apiref/rustworkx.betweenness_centrality.rst", "apiref/rustworkx.bfs_predecessors.rst", "apiref/rustworkx.bfs_search.rst", "apiref/rustworkx.bfs_successors.rst", "apiref/rustworkx.biconnected_components.rst", "apiref/rustworkx.bipartite_layout.rst", "apiref/rustworkx.bridges.rst", "apiref/rustworkx.cartesian_product.rst", "apiref/rustworkx.chain_decomposition.rst", "apiref/rustworkx.circular_layout.rst", "apiref/rustworkx.closeness_centrality.rst", "apiref/rustworkx.collect_bicolor_runs.rst", "apiref/rustworkx.collect_runs.rst", "apiref/rustworkx.complement.rst", "apiref/rustworkx.connected_components.rst", "apiref/rustworkx.core_number.rst", "apiref/rustworkx.cycle_basis.rst", "apiref/rustworkx.dag_longest_path.rst", "apiref/rustworkx.dag_longest_path_length.rst", "apiref/rustworkx.dag_weighted_longest_path.rst", "apiref/rustworkx.dag_weighted_longest_path_length.rst", "apiref/rustworkx.descendants.rst", "apiref/rustworkx.dfs_edges.rst", "apiref/rustworkx.dfs_search.rst", "apiref/rustworkx.digraph_adjacency_matrix.rst", "apiref/rustworkx.digraph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_all_shortest_paths.rst", "apiref/rustworkx.digraph_all_simple_paths.rst", "apiref/rustworkx.digraph_astar_shortest_path.rst", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.digraph_betweenness_centrality.rst", "apiref/rustworkx.digraph_bfs_search.rst", "apiref/rustworkx.digraph_bipartite_layout.rst", "apiref/rustworkx.digraph_cartesian_product.rst", "apiref/rustworkx.digraph_circular_layout.rst", "apiref/rustworkx.digraph_closeness_centrality.rst", "apiref/rustworkx.digraph_complement.rst", "apiref/rustworkx.digraph_core_number.rst", "apiref/rustworkx.digraph_dfs_edges.rst", "apiref/rustworkx.digraph_dfs_search.rst", "apiref/rustworkx.digraph_dijkstra_search.rst", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.digraph_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_distance_matrix.rst", "apiref/rustworkx.digraph_edge_betweenness_centrality.rst", "apiref/rustworkx.digraph_eigenvector_centrality.rst", "apiref/rustworkx.digraph_find_cycle.rst", "apiref/rustworkx.digraph_floyd_warshall.rst", "apiref/rustworkx.digraph_floyd_warshall_numpy.rst", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.digraph_is_isomorphic.rst", "apiref/rustworkx.digraph_is_subgraph_isomorphic.rst", "apiref/rustworkx.digraph_k_shortest_path_lengths.rst", "apiref/rustworkx.digraph_katz_centrality.rst", "apiref/rustworkx.digraph_longest_simple_path.rst", "apiref/rustworkx.digraph_node_link_json.rst", "apiref/rustworkx.digraph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.digraph_random_layout.rst", "apiref/rustworkx.digraph_shell_layout.rst", "apiref/rustworkx.digraph_spiral_layout.rst", "apiref/rustworkx.digraph_spring_layout.rst", "apiref/rustworkx.digraph_tensor_product.rst", "apiref/rustworkx.digraph_transitivity.rst", "apiref/rustworkx.digraph_union.rst", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.digraph_vf2_mapping.rst", "apiref/rustworkx.dijkstra_search.rst", "apiref/rustworkx.dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.dijkstra_shortest_paths.rst", "apiref/rustworkx.directed_barabasi_albert_graph.rst", "apiref/rustworkx.directed_gnm_random_graph.rst", "apiref/rustworkx.directed_gnp_random_graph.rst", "apiref/rustworkx.directed_random_bipartite_graph.rst", "apiref/rustworkx.distance_matrix.rst", "apiref/rustworkx.edge_betweenness_centrality.rst", "apiref/rustworkx.eigenvector_centrality.rst", "apiref/rustworkx.find_negative_cycle.rst", "apiref/rustworkx.floyd_warshall.rst", "apiref/rustworkx.floyd_warshall_numpy.rst", "apiref/rustworkx.floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.generators.barbell_graph.rst", "apiref/rustworkx.generators.binomial_tree_graph.rst", "apiref/rustworkx.generators.complete_graph.rst", "apiref/rustworkx.generators.cycle_graph.rst", "apiref/rustworkx.generators.directed_binomial_tree_graph.rst", "apiref/rustworkx.generators.directed_complete_graph.rst", "apiref/rustworkx.generators.directed_cycle_graph.rst", "apiref/rustworkx.generators.directed_empty_graph.rst", "apiref/rustworkx.generators.directed_grid_graph.rst", "apiref/rustworkx.generators.directed_heavy_hex_graph.rst", "apiref/rustworkx.generators.directed_heavy_square_graph.rst", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.directed_mesh_graph.rst", "apiref/rustworkx.generators.directed_path_graph.rst", "apiref/rustworkx.generators.directed_star_graph.rst", "apiref/rustworkx.generators.empty_graph.rst", "apiref/rustworkx.generators.full_rary_tree.rst", "apiref/rustworkx.generators.generalized_petersen_graph.rst", "apiref/rustworkx.generators.grid_graph.rst", "apiref/rustworkx.generators.heavy_hex_graph.rst", "apiref/rustworkx.generators.heavy_square_graph.rst", "apiref/rustworkx.generators.hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.lollipop_graph.rst", "apiref/rustworkx.generators.mesh_graph.rst", "apiref/rustworkx.generators.path_graph.rst", "apiref/rustworkx.generators.star_graph.rst", "apiref/rustworkx.graph_adjacency_matrix.rst", "apiref/rustworkx.graph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_all_shortest_paths.rst", "apiref/rustworkx.graph_all_simple_paths.rst", "apiref/rustworkx.graph_astar_shortest_path.rst", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.graph_betweenness_centrality.rst", "apiref/rustworkx.graph_bfs_search.rst", "apiref/rustworkx.graph_bipartite_edge_color.rst", "apiref/rustworkx.graph_bipartite_layout.rst", "apiref/rustworkx.graph_cartesian_product.rst", "apiref/rustworkx.graph_circular_layout.rst", "apiref/rustworkx.graph_closeness_centrality.rst", "apiref/rustworkx.graph_complement.rst", "apiref/rustworkx.graph_core_number.rst", "apiref/rustworkx.graph_dfs_edges.rst", "apiref/rustworkx.graph_dfs_search.rst", "apiref/rustworkx.graph_dijkstra_search.rst", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.graph_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_distance_matrix.rst", "apiref/rustworkx.graph_edge_betweenness_centrality.rst", "apiref/rustworkx.graph_eigenvector_centrality.rst", "apiref/rustworkx.graph_floyd_warshall.rst", "apiref/rustworkx.graph_floyd_warshall_numpy.rst", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.graph_greedy_color.rst", "apiref/rustworkx.graph_greedy_edge_color.rst", "apiref/rustworkx.graph_is_isomorphic.rst", "apiref/rustworkx.graph_is_subgraph_isomorphic.rst", "apiref/rustworkx.graph_k_shortest_path_lengths.rst", "apiref/rustworkx.graph_katz_centrality.rst", "apiref/rustworkx.graph_line_graph.rst", "apiref/rustworkx.graph_longest_simple_path.rst", "apiref/rustworkx.graph_misra_gries_edge_color.rst", "apiref/rustworkx.graph_node_link_json.rst", "apiref/rustworkx.graph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.graph_random_layout.rst", "apiref/rustworkx.graph_shell_layout.rst", "apiref/rustworkx.graph_spiral_layout.rst", "apiref/rustworkx.graph_spring_layout.rst", "apiref/rustworkx.graph_tensor_product.rst", "apiref/rustworkx.graph_token_swapper.rst", "apiref/rustworkx.graph_transitivity.rst", "apiref/rustworkx.graph_union.rst", "apiref/rustworkx.graph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.graph_vf2_mapping.rst", "apiref/rustworkx.has_path.rst", "apiref/rustworkx.hits.rst", "apiref/rustworkx.is_bipartite.rst", "apiref/rustworkx.is_connected.rst", "apiref/rustworkx.is_directed_acyclic_graph.rst", "apiref/rustworkx.is_isomorphic.rst", "apiref/rustworkx.is_isomorphic_node_match.rst", "apiref/rustworkx.is_matching.rst", "apiref/rustworkx.is_maximal_matching.rst", "apiref/rustworkx.is_planar.rst", "apiref/rustworkx.is_subgraph_isomorphic.rst", "apiref/rustworkx.is_weakly_connected.rst", "apiref/rustworkx.isolates.rst", "apiref/rustworkx.k_shortest_path_lengths.rst", "apiref/rustworkx.katz_centrality.rst", "apiref/rustworkx.layers.rst", "apiref/rustworkx.lexicographical_topological_sort.rst", "apiref/rustworkx.longest_simple_path.rst", "apiref/rustworkx.max_weight_matching.rst", "apiref/rustworkx.metric_closure.rst", "apiref/rustworkx.minimum_spanning_edges.rst", "apiref/rustworkx.minimum_spanning_tree.rst", "apiref/rustworkx.negative_edge_cycle.rst", "apiref/rustworkx.networkx_converter.rst", "apiref/rustworkx.node_connected_component.rst", "apiref/rustworkx.node_link_json.rst", "apiref/rustworkx.num_shortest_paths_unweighted.rst", "apiref/rustworkx.number_connected_components.rst", "apiref/rustworkx.number_weakly_connected_components.rst", "apiref/rustworkx.pagerank.rst", "apiref/rustworkx.random_geometric_graph.rst", "apiref/rustworkx.random_layout.rst", "apiref/rustworkx.read_graphml.rst", "apiref/rustworkx.shell_layout.rst", "apiref/rustworkx.simple_cycles.rst", "apiref/rustworkx.spiral_layout.rst", "apiref/rustworkx.spring_layout.rst", "apiref/rustworkx.steiner_tree.rst", "apiref/rustworkx.stoer_wagner_min_cut.rst", "apiref/rustworkx.strongly_connected_components.rst", "apiref/rustworkx.topological_generations.rst", "apiref/rustworkx.topological_sort.rst", "apiref/rustworkx.transitive_reduction.rst", "apiref/rustworkx.transitivity.rst", "apiref/rustworkx.two_color.rst", "apiref/rustworkx.undirected_gnm_random_graph.rst", "apiref/rustworkx.undirected_gnp_random_graph.rst", "apiref/rustworkx.undirected_random_bipartite_graph.rst", "apiref/rustworkx.union.rst", "apiref/rustworkx.unweighted_average_shortest_path_length.rst", "apiref/rustworkx.vf2_mapping.rst", "apiref/rustworkx.visit.BFSVisitor.rst", "apiref/rustworkx.visit.BFSVisitor.black_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge.rst", "apiref/rustworkx.visit.BFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DFSVisitor.rst", "apiref/rustworkx.visit.DFSVisitor.back_edge.rst", "apiref/rustworkx.visit.DFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge.rst", "apiref/rustworkx.visit.DFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.rst", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex.rst", "apiref/rustworkx.visit.PruneSearch.rst", "apiref/rustworkx.visit.StopSearch.rst", "apiref/rustworkx.visualization.graphviz_draw.rst", "apiref/rustworkx.visualization.mpl_draw.rst", "apiref/rustworkx.weakly_connected_components.rst", "benchmarks.rst", "index.rst", "install.rst", "networkx.rst", "release_notes.rst", "tutorial/betweenness_centrality.rst", "tutorial/dags.rst", "tutorial/index.rst", "tutorial/introduction.rst", "visualization.rst"], "titles": ["Contributing", "Centrality", "Coloring", "Connectivity and Cycles", "DAG Algorithms", "Graph Operations", "Algorithm Functions", "Isomorphism", "Link Analysis", "Matching", "Other Algorithm Functions", "Shortest Paths", "Traversal", "Tree", "Converters", "Custom Return Types", "Exceptions", "Generators", "Graph Classes", "Rustworkx API Reference", "Layout Functions", "API functions for PyDigraph", "API functions for PyGraph", "Random Graph Generator Functions", "Serialization", "AllPairsPathLengthMapping", "rustworkx.AllPairsPathLengthMapping.items", "rustworkx.AllPairsPathLengthMapping.keys", "rustworkx.AllPairsPathLengthMapping.values", "AllPairsPathMapping", "rustworkx.AllPairsPathMapping.items", "rustworkx.AllPairsPathMapping.keys", "rustworkx.AllPairsPathMapping.values", "BFSPredecessors", "BFSSuccessors", "BiconnectedComponents", "rustworkx.BiconnectedComponents.items", "rustworkx.BiconnectedComponents.keys", "rustworkx.BiconnectedComponents.values", "CentralityMapping", "rustworkx.CentralityMapping.items", "rustworkx.CentralityMapping.keys", "rustworkx.CentralityMapping.values", "Chains", "rustworkx.DAGHasCycle", "rustworkx.DAGWouldCycle", "EdgeCentralityMapping", "rustworkx.EdgeCentralityMapping.items", "rustworkx.EdgeCentralityMapping.keys", "rustworkx.EdgeCentralityMapping.values", "EdgeIndexMap", "rustworkx.EdgeIndexMap.items", "rustworkx.EdgeIndexMap.keys", "rustworkx.EdgeIndexMap.values", "EdgeIndices", "EdgeList", "rustworkx.GraphNotBipartite", "rustworkx.InvalidMapping", "rustworkx.InvalidNode", "rustworkx.JSONSerializationError", "rustworkx.NegativeCycle", "rustworkx.NoEdgeBetweenNodes", "rustworkx.NoPathFound", "rustworkx.NoSuitableNeighbors", "NodeIndices", "NodeMap", "rustworkx.NodeMap.items", "rustworkx.NodeMap.keys", "rustworkx.NodeMap.values", "rustworkx.NullGraph", "PathLengthMapping", "rustworkx.PathLengthMapping.items", "rustworkx.PathLengthMapping.keys", "rustworkx.PathLengthMapping.values", "PathMapping", "rustworkx.PathMapping.items", "rustworkx.PathMapping.keys", "rustworkx.PathMapping.values", "Pos2DMapping", "rustworkx.Pos2DMapping.items", "rustworkx.Pos2DMapping.keys", "rustworkx.Pos2DMapping.values", "ProductNodeMap", "rustworkx.ProductNodeMap.items", "rustworkx.ProductNodeMap.keys", "rustworkx.ProductNodeMap.values", "PyDAG", "rustworkx.PyDAG.add_child", "rustworkx.PyDAG.add_edge", "rustworkx.PyDAG.add_edges_from", "rustworkx.PyDAG.add_edges_from_no_data", "rustworkx.PyDAG.add_node", "rustworkx.PyDAG.add_nodes_from", "rustworkx.PyDAG.add_parent", "rustworkx.PyDAG.adj", "rustworkx.PyDAG.adj_direction", "rustworkx.PyDAG.clear", "rustworkx.PyDAG.clear_edges", "rustworkx.PyDAG.compose", "rustworkx.PyDAG.contract_nodes", "rustworkx.PyDAG.copy", "rustworkx.PyDAG.edge_index_map", "rustworkx.PyDAG.edge_indices", "rustworkx.PyDAG.edge_indices_from_endpoints", "rustworkx.PyDAG.edge_list", "rustworkx.PyDAG.edge_subgraph", "rustworkx.PyDAG.edges", "rustworkx.PyDAG.extend_from_edge_list", "rustworkx.PyDAG.extend_from_weighted_edge_list", "rustworkx.PyDAG.filter_edges", "rustworkx.PyDAG.filter_nodes", "rustworkx.PyDAG.find_adjacent_node_by_edge", "rustworkx.PyDAG.find_node_by_weight", "rustworkx.PyDAG.find_predecessor_node_by_edge", "rustworkx.PyDAG.find_predecessors_by_edge", "rustworkx.PyDAG.find_successors_by_edge", "rustworkx.PyDAG.from_adjacency_matrix", "rustworkx.PyDAG.from_complex_adjacency_matrix", "rustworkx.PyDAG.get_all_edge_data", "rustworkx.PyDAG.get_edge_data", "rustworkx.PyDAG.get_edge_data_by_index", "rustworkx.PyDAG.get_edge_endpoints_by_index", "rustworkx.PyDAG.get_node_data", "rustworkx.PyDAG.has_edge", "rustworkx.PyDAG.has_parallel_edges", "rustworkx.PyDAG.in_degree", "rustworkx.PyDAG.in_edges", "rustworkx.PyDAG.incident_edge_index_map", "rustworkx.PyDAG.incident_edges", "rustworkx.PyDAG.insert_node_on_in_edges", "rustworkx.PyDAG.insert_node_on_in_edges_multiple", "rustworkx.PyDAG.insert_node_on_out_edges", "rustworkx.PyDAG.insert_node_on_out_edges_multiple", "rustworkx.PyDAG.is_symmetric", "rustworkx.PyDAG.make_symmetric", "rustworkx.PyDAG.merge_nodes", "rustworkx.PyDAG.neighbors", "rustworkx.PyDAG.node_indexes", "rustworkx.PyDAG.node_indices", "rustworkx.PyDAG.nodes", "rustworkx.PyDAG.num_edges", "rustworkx.PyDAG.num_nodes", "rustworkx.PyDAG.out_degree", "rustworkx.PyDAG.out_edges", "rustworkx.PyDAG.predecessor_indices", "rustworkx.PyDAG.predecessors", "rustworkx.PyDAG.read_edge_list", "rustworkx.PyDAG.remove_edge", "rustworkx.PyDAG.remove_edge_from_index", "rustworkx.PyDAG.remove_edges_from", "rustworkx.PyDAG.remove_node", "rustworkx.PyDAG.remove_node_retain_edges", "rustworkx.PyDAG.remove_node_retain_edges_by_id", "rustworkx.PyDAG.remove_node_retain_edges_by_key", "rustworkx.PyDAG.remove_nodes_from", "rustworkx.PyDAG.reverse", "rustworkx.PyDAG.subgraph", "rustworkx.PyDAG.substitute_node_with_subgraph", "rustworkx.PyDAG.successor_indices", "rustworkx.PyDAG.successors", "rustworkx.PyDAG.to_dot", "rustworkx.PyDAG.to_undirected", "rustworkx.PyDAG.update_edge", "rustworkx.PyDAG.update_edge_by_index", "rustworkx.PyDAG.weighted_edge_list", "rustworkx.PyDAG.write_edge_list", "PyDiGraph", "rustworkx.PyDiGraph.add_child", "rustworkx.PyDiGraph.add_edge", "rustworkx.PyDiGraph.add_edges_from", "rustworkx.PyDiGraph.add_edges_from_no_data", "rustworkx.PyDiGraph.add_node", "rustworkx.PyDiGraph.add_nodes_from", "rustworkx.PyDiGraph.add_parent", "rustworkx.PyDiGraph.adj", "rustworkx.PyDiGraph.adj_direction", "rustworkx.PyDiGraph.clear", "rustworkx.PyDiGraph.clear_edges", "rustworkx.PyDiGraph.compose", "rustworkx.PyDiGraph.contract_nodes", "rustworkx.PyDiGraph.copy", "rustworkx.PyDiGraph.edge_index_map", "rustworkx.PyDiGraph.edge_indices", "rustworkx.PyDiGraph.edge_indices_from_endpoints", "rustworkx.PyDiGraph.edge_list", "rustworkx.PyDiGraph.edge_subgraph", "rustworkx.PyDiGraph.edges", "rustworkx.PyDiGraph.extend_from_edge_list", "rustworkx.PyDiGraph.extend_from_weighted_edge_list", "rustworkx.PyDiGraph.filter_edges", "rustworkx.PyDiGraph.filter_nodes", "rustworkx.PyDiGraph.find_adjacent_node_by_edge", "rustworkx.PyDiGraph.find_node_by_weight", "rustworkx.PyDiGraph.find_predecessor_node_by_edge", "rustworkx.PyDiGraph.find_predecessors_by_edge", "rustworkx.PyDiGraph.find_successors_by_edge", "rustworkx.PyDiGraph.from_adjacency_matrix", "rustworkx.PyDiGraph.from_complex_adjacency_matrix", "rustworkx.PyDiGraph.get_all_edge_data", "rustworkx.PyDiGraph.get_edge_data", "rustworkx.PyDiGraph.get_edge_data_by_index", "rustworkx.PyDiGraph.get_edge_endpoints_by_index", "rustworkx.PyDiGraph.get_node_data", "rustworkx.PyDiGraph.has_edge", "rustworkx.PyDiGraph.has_parallel_edges", "rustworkx.PyDiGraph.in_degree", "rustworkx.PyDiGraph.in_edges", "rustworkx.PyDiGraph.incident_edge_index_map", "rustworkx.PyDiGraph.incident_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "rustworkx.PyDiGraph.insert_node_on_out_edges", "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "rustworkx.PyDiGraph.is_symmetric", "rustworkx.PyDiGraph.make_symmetric", "rustworkx.PyDiGraph.merge_nodes", "rustworkx.PyDiGraph.neighbors", "rustworkx.PyDiGraph.node_indexes", "rustworkx.PyDiGraph.node_indices", "rustworkx.PyDiGraph.nodes", "rustworkx.PyDiGraph.num_edges", "rustworkx.PyDiGraph.num_nodes", "rustworkx.PyDiGraph.out_degree", "rustworkx.PyDiGraph.out_edges", "rustworkx.PyDiGraph.predecessor_indices", "rustworkx.PyDiGraph.predecessors", "rustworkx.PyDiGraph.read_edge_list", "rustworkx.PyDiGraph.remove_edge", "rustworkx.PyDiGraph.remove_edge_from_index", "rustworkx.PyDiGraph.remove_edges_from", "rustworkx.PyDiGraph.remove_node", "rustworkx.PyDiGraph.remove_node_retain_edges", "rustworkx.PyDiGraph.remove_node_retain_edges_by_id", "rustworkx.PyDiGraph.remove_node_retain_edges_by_key", "rustworkx.PyDiGraph.remove_nodes_from", "rustworkx.PyDiGraph.reverse", "rustworkx.PyDiGraph.subgraph", "rustworkx.PyDiGraph.substitute_node_with_subgraph", "rustworkx.PyDiGraph.successor_indices", "rustworkx.PyDiGraph.successors", "rustworkx.PyDiGraph.to_dot", "rustworkx.PyDiGraph.to_undirected", "rustworkx.PyDiGraph.update_edge", "rustworkx.PyDiGraph.update_edge_by_index", "rustworkx.PyDiGraph.weighted_edge_list", "rustworkx.PyDiGraph.write_edge_list", "PyGraph", "rustworkx.PyGraph.add_edge", "rustworkx.PyGraph.add_edges_from", "rustworkx.PyGraph.add_edges_from_no_data", "rustworkx.PyGraph.add_node", "rustworkx.PyGraph.add_nodes_from", "rustworkx.PyGraph.adj", "rustworkx.PyGraph.clear", "rustworkx.PyGraph.clear_edges", "rustworkx.PyGraph.compose", "rustworkx.PyGraph.contract_nodes", "rustworkx.PyGraph.copy", "rustworkx.PyGraph.degree", "rustworkx.PyGraph.edge_index_map", "rustworkx.PyGraph.edge_indices", "rustworkx.PyGraph.edge_indices_from_endpoints", "rustworkx.PyGraph.edge_list", "rustworkx.PyGraph.edge_subgraph", "rustworkx.PyGraph.edges", "rustworkx.PyGraph.extend_from_edge_list", "rustworkx.PyGraph.extend_from_weighted_edge_list", "rustworkx.PyGraph.filter_edges", "rustworkx.PyGraph.filter_nodes", "rustworkx.PyGraph.find_node_by_weight", "rustworkx.PyGraph.from_adjacency_matrix", "rustworkx.PyGraph.from_complex_adjacency_matrix", "rustworkx.PyGraph.get_all_edge_data", "rustworkx.PyGraph.get_edge_data", "rustworkx.PyGraph.get_edge_data_by_index", "rustworkx.PyGraph.get_edge_endpoints_by_index", "rustworkx.PyGraph.get_node_data", "rustworkx.PyGraph.has_edge", "rustworkx.PyGraph.has_parallel_edges", "rustworkx.PyGraph.in_edges", "rustworkx.PyGraph.incident_edge_index_map", "rustworkx.PyGraph.incident_edges", "rustworkx.PyGraph.neighbors", "rustworkx.PyGraph.node_indexes", "rustworkx.PyGraph.node_indices", "rustworkx.PyGraph.nodes", "rustworkx.PyGraph.num_edges", "rustworkx.PyGraph.num_nodes", "rustworkx.PyGraph.out_edges", "rustworkx.PyGraph.read_edge_list", "rustworkx.PyGraph.remove_edge", "rustworkx.PyGraph.remove_edge_from_index", "rustworkx.PyGraph.remove_edges_from", "rustworkx.PyGraph.remove_node", "rustworkx.PyGraph.remove_nodes_from", "rustworkx.PyGraph.subgraph", "rustworkx.PyGraph.substitute_node_with_subgraph", "rustworkx.PyGraph.to_directed", "rustworkx.PyGraph.to_dot", "rustworkx.PyGraph.update_edge", "rustworkx.PyGraph.update_edge_by_index", "rustworkx.PyGraph.weighted_edge_list", "rustworkx.PyGraph.write_edge_list", "TopologicalSorter", "rustworkx.TopologicalSorter.done", "rustworkx.TopologicalSorter.get_ready", "rustworkx.TopologicalSorter.is_active", "WeightedEdgeList", "rustworkx.adjacency_matrix", "rustworkx.all_pairs_all_simple_paths", "rustworkx.all_pairs_bellman_ford_path_lengths", "rustworkx.all_pairs_bellman_ford_shortest_paths", "rustworkx.all_pairs_dijkstra_path_lengths", "rustworkx.all_pairs_dijkstra_shortest_paths", "rustworkx.all_shortest_paths", "rustworkx.all_simple_paths", "rustworkx.ancestors", "rustworkx.articulation_points", "rustworkx.astar_shortest_path", "rustworkx.barabasi_albert_graph", "rustworkx.bellman_ford_shortest_path_lengths", "rustworkx.bellman_ford_shortest_paths", "rustworkx.betweenness_centrality", "rustworkx.bfs_predecessors", "rustworkx.bfs_search", "rustworkx.bfs_successors", "rustworkx.biconnected_components", "rustworkx.bipartite_layout", "rustworkx.bridges", "rustworkx.cartesian_product", "rustworkx.chain_decomposition", "rustworkx.circular_layout", "rustworkx.closeness_centrality", "rustworkx.collect_bicolor_runs", "rustworkx.collect_runs", "rustworkx.complement", "rustworkx.connected_components", "rustworkx.core_number", "rustworkx.cycle_basis", "rustworkx.dag_longest_path", "rustworkx.dag_longest_path_length", "rustworkx.dag_weighted_longest_path", "rustworkx.dag_weighted_longest_path_length", "rustworkx.descendants", "rustworkx.dfs_edges", "rustworkx.dfs_search", "rustworkx.digraph_adjacency_matrix", "rustworkx.digraph_all_pairs_all_simple_paths", "rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "rustworkx.digraph_all_pairs_dijkstra_path_lengths", "rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "rustworkx.digraph_all_shortest_paths", "rustworkx.digraph_all_simple_paths", "rustworkx.digraph_astar_shortest_path", "rustworkx.digraph_bellman_ford_shortest_path_lengths", "rustworkx.digraph_betweenness_centrality", "rustworkx.digraph_bfs_search", "rustworkx.digraph_bipartite_layout", "rustworkx.digraph_cartesian_product", "rustworkx.digraph_circular_layout", "rustworkx.digraph_closeness_centrality", "rustworkx.digraph_complement", "rustworkx.digraph_core_number", "rustworkx.digraph_dfs_edges", "rustworkx.digraph_dfs_search", "rustworkx.digraph_dijkstra_search", "rustworkx.digraph_dijkstra_shortest_path_lengths", "rustworkx.digraph_dijkstra_shortest_paths", "rustworkx.digraph_distance_matrix", "rustworkx.digraph_edge_betweenness_centrality", "rustworkx.digraph_eigenvector_centrality", "rustworkx.digraph_find_cycle", "rustworkx.digraph_floyd_warshall", "rustworkx.digraph_floyd_warshall_numpy", "rustworkx.digraph_floyd_warshall_successor_and_distance", "rustworkx.digraph_is_isomorphic", "rustworkx.digraph_is_subgraph_isomorphic", "rustworkx.digraph_k_shortest_path_lengths", "rustworkx.digraph_katz_centrality", "rustworkx.digraph_longest_simple_path", "rustworkx.digraph_node_link_json", "rustworkx.digraph_num_shortest_paths_unweighted", "rustworkx.digraph_random_layout", "rustworkx.digraph_shell_layout", "rustworkx.digraph_spiral_layout", "rustworkx.digraph_spring_layout", "rustworkx.digraph_tensor_product", "rustworkx.digraph_transitivity", "rustworkx.digraph_union", "rustworkx.digraph_unweighted_average_shortest_path_length", "rustworkx.digraph_vf2_mapping", "rustworkx.dijkstra_search", "rustworkx.dijkstra_shortest_path_lengths", "rustworkx.dijkstra_shortest_paths", "rustworkx.directed_barabasi_albert_graph", "rustworkx.directed_gnm_random_graph", "rustworkx.directed_gnp_random_graph", "rustworkx.directed_random_bipartite_graph", "rustworkx.distance_matrix", "rustworkx.edge_betweenness_centrality", "rustworkx.eigenvector_centrality", "rustworkx.find_negative_cycle", "rustworkx.floyd_warshall", "rustworkx.floyd_warshall_numpy", "rustworkx.floyd_warshall_successor_and_distance", "rustworkx.generators.barbell_graph", "rustworkx.generators.binomial_tree_graph", "rustworkx.generators.complete_graph", "rustworkx.generators.cycle_graph", "rustworkx.generators.directed_binomial_tree_graph", "rustworkx.generators.directed_complete_graph", "rustworkx.generators.directed_cycle_graph", "rustworkx.generators.directed_empty_graph", "rustworkx.generators.directed_grid_graph", "rustworkx.generators.directed_heavy_hex_graph", "rustworkx.generators.directed_heavy_square_graph", "rustworkx.generators.directed_hexagonal_lattice_graph", "rustworkx.generators.directed_mesh_graph", "rustworkx.generators.directed_path_graph", "rustworkx.generators.directed_star_graph", "rustworkx.generators.empty_graph", "rustworkx.generators.full_rary_tree", "rustworkx.generators.generalized_petersen_graph", "rustworkx.generators.grid_graph", "rustworkx.generators.heavy_hex_graph", "rustworkx.generators.heavy_square_graph", "rustworkx.generators.hexagonal_lattice_graph", "rustworkx.generators.lollipop_graph", "rustworkx.generators.mesh_graph", "rustworkx.generators.path_graph", "rustworkx.generators.star_graph", "rustworkx.graph_adjacency_matrix", "rustworkx.graph_all_pairs_all_simple_paths", "rustworkx.graph_all_pairs_bellman_ford_path_lengths", "rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "rustworkx.graph_all_pairs_dijkstra_path_lengths", "rustworkx.graph_all_pairs_dijkstra_shortest_paths", "rustworkx.graph_all_shortest_paths", "rustworkx.graph_all_simple_paths", "rustworkx.graph_astar_shortest_path", "rustworkx.graph_bellman_ford_shortest_path_lengths", "rustworkx.graph_betweenness_centrality", "rustworkx.graph_bfs_search", "rustworkx.graph_bipartite_edge_color", "rustworkx.graph_bipartite_layout", "rustworkx.graph_cartesian_product", "rustworkx.graph_circular_layout", "rustworkx.graph_closeness_centrality", "rustworkx.graph_complement", "rustworkx.graph_core_number", "rustworkx.graph_dfs_edges", "rustworkx.graph_dfs_search", "rustworkx.graph_dijkstra_search", "rustworkx.graph_dijkstra_shortest_path_lengths", "rustworkx.graph_dijkstra_shortest_paths", "rustworkx.graph_distance_matrix", "rustworkx.graph_edge_betweenness_centrality", "rustworkx.graph_eigenvector_centrality", "rustworkx.graph_floyd_warshall", "rustworkx.graph_floyd_warshall_numpy", "rustworkx.graph_floyd_warshall_successor_and_distance", "rustworkx.graph_greedy_color", "rustworkx.graph_greedy_edge_color", "rustworkx.graph_is_isomorphic", "rustworkx.graph_is_subgraph_isomorphic", "rustworkx.graph_k_shortest_path_lengths", "rustworkx.graph_katz_centrality", "rustworkx.graph_line_graph", "rustworkx.graph_longest_simple_path", "rustworkx.graph_misra_gries_edge_color", "rustworkx.graph_node_link_json", "rustworkx.graph_num_shortest_paths_unweighted", "rustworkx.graph_random_layout", "rustworkx.graph_shell_layout", "rustworkx.graph_spiral_layout", "rustworkx.graph_spring_layout", "rustworkx.graph_tensor_product", "rustworkx.graph_token_swapper", "rustworkx.graph_transitivity", "rustworkx.graph_union", "rustworkx.graph_unweighted_average_shortest_path_length", "rustworkx.graph_vf2_mapping", "rustworkx.has_path", "rustworkx.hits", "rustworkx.is_bipartite", "rustworkx.is_connected", "rustworkx.is_directed_acyclic_graph", "rustworkx.is_isomorphic", "rustworkx.is_isomorphic_node_match", "rustworkx.is_matching", "rustworkx.is_maximal_matching", "rustworkx.is_planar", "rustworkx.is_subgraph_isomorphic", "rustworkx.is_weakly_connected", "rustworkx.isolates", "rustworkx.k_shortest_path_lengths", "rustworkx.katz_centrality", "rustworkx.layers", "rustworkx.lexicographical_topological_sort", "rustworkx.longest_simple_path", "rustworkx.max_weight_matching", "rustworkx.metric_closure", "rustworkx.minimum_spanning_edges", "rustworkx.minimum_spanning_tree", "rustworkx.negative_edge_cycle", "rustworkx.networkx_converter", "rustworkx.node_connected_component", "rustworkx.node_link_json", "rustworkx.num_shortest_paths_unweighted", "rustworkx.number_connected_components", "rustworkx.number_weakly_connected_components", "rustworkx.pagerank", "rustworkx.random_geometric_graph", "rustworkx.random_layout", "rustworkx.read_graphml", "rustworkx.shell_layout", "rustworkx.simple_cycles", "rustworkx.spiral_layout", "rustworkx.spring_layout", "rustworkx.steiner_tree", "rustworkx.stoer_wagner_min_cut", "rustworkx.strongly_connected_components", "rustworkx.topological_generations", "rustworkx.topological_sort", "rustworkx.transitive_reduction", "rustworkx.transitivity", "rustworkx.two_color", "rustworkx.undirected_gnm_random_graph", "rustworkx.undirected_gnp_random_graph", "rustworkx.undirected_random_bipartite_graph", "rustworkx.union", "rustworkx.unweighted_average_shortest_path_length", "rustworkx.vf2_mapping", "BFSVisitor", "rustworkx.visit.BFSVisitor.black_target_edge", "rustworkx.visit.BFSVisitor.discover_vertex", "rustworkx.visit.BFSVisitor.finish_vertex", "rustworkx.visit.BFSVisitor.gray_target_edge", "rustworkx.visit.BFSVisitor.non_tree_edge", "rustworkx.visit.BFSVisitor.tree_edge", "DFSVisitor", "rustworkx.visit.DFSVisitor.back_edge", "rustworkx.visit.DFSVisitor.discover_vertex", "rustworkx.visit.DFSVisitor.finish_vertex", "rustworkx.visit.DFSVisitor.forward_or_cross_edge", "rustworkx.visit.DFSVisitor.tree_edge", "DijkstraVisitor", "rustworkx.visit.DijkstraVisitor.discover_vertex", "rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "rustworkx.visit.DijkstraVisitor.edge_relaxed", "rustworkx.visit.DijkstraVisitor.examine_edge", "rustworkx.visit.DijkstraVisitor.finish_vertex", "rustworkx.visit.PruneSearch", "rustworkx.visit.StopSearch", "rustworkx.visualization.graphviz_draw", "rustworkx.visualization.mpl_draw", "rustworkx.weakly_connected_components", "Rustworkx Comparison Benchmarks With Other Libraries", "rustworkx Documentation", "Getting Started", "rustworkx for NetworkX users", "Release Notes", "Working with Betweenness Centrality", "Directed Acyclic Graphs", "rustworkx Tutorials and Guides", "Introduction to rustworkx", "Visualization"], "terms": {"first": [0, 98, 112, 118, 119, 146, 162, 178, 192, 198, 199, 226, 242, 255, 269, 272, 273, 277, 288, 289, 299, 303, 323, 324, 325, 329, 330, 344, 345, 357, 359, 364, 365, 372, 375, 376, 377, 387, 389, 391, 405, 409, 412, 419, 420, 430, 431, 443, 446, 451, 452, 461, 462, 464, 465, 477, 480, 482, 484, 488, 489, 493, 498, 531, 533, 536, 543, 548, 558, 562, 563, 564, 566], "read": [0, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 70, 74, 82, 101, 146, 165, 181, 226, 245, 259, 289, 302, 307, 310, 311, 312, 313, 320, 321, 329, 348, 349, 350, 351, 355, 356, 359, 370, 371, 373, 379, 387, 400, 401, 403, 434, 435, 436, 437, 441, 442, 446, 457, 458, 459, 467, 477, 484, 497, 512, 515, 561, 562, 566], "overal": 0, "qiskit": [0, 559, 561, 562], "project": [0, 512, 561, 562], "guidelin": 0, "These": [0, 21, 22, 86, 166, 246, 560, 561, 562, 566], "ar": [0, 21, 22, 33, 34, 55, 74, 86, 89, 90, 94, 95, 98, 99, 104, 107, 108, 116, 117, 129, 130, 131, 132, 134, 146, 147, 149, 151, 152, 153, 156, 162, 164, 166, 169, 170, 174, 175, 178, 179, 184, 187, 188, 196, 197, 209, 210, 211, 212, 214, 226, 227, 229, 231, 232, 233, 236, 242, 244, 246, 248, 249, 252, 255, 256, 262, 265, 266, 270, 271, 273, 289, 290, 292, 295, 297, 299, 301, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 321, 324, 326, 328, 329, 330, 332, 335, 337, 338, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 359, 361, 362, 363, 364, 365, 366, 368, 370, 371, 373, 374, 375, 376, 377, 379, 380, 386, 387, 388, 389, 391, 392, 394, 395, 396, 400, 401, 403, 404, 405, 406, 408, 409, 411, 412, 414, 417, 418, 419, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 478, 479, 480, 482, 484, 487, 488, 489, 493, 495, 497, 498, 499, 500, 501, 503, 504, 512, 513, 515, 519, 523, 526, 528, 531, 533, 542, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566], "all": [0, 25, 29, 94, 95, 96, 97, 100, 102, 103, 105, 106, 114, 115, 118, 126, 129, 130, 131, 132, 134, 135, 137, 138, 139, 143, 145, 151, 152, 153, 155, 159, 161, 162, 174, 175, 176, 177, 180, 182, 183, 185, 186, 194, 195, 198, 206, 209, 210, 211, 212, 214, 215, 217, 218, 219, 223, 225, 231, 232, 233, 235, 239, 241, 242, 252, 253, 254, 257, 260, 261, 263, 264, 272, 273, 279, 283, 284, 285, 288, 297, 299, 303, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 322, 324, 326, 330, 332, 333, 334, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 361, 364, 365, 366, 370, 371, 373, 374, 375, 379, 380, 388, 389, 390, 391, 392, 395, 396, 397, 398, 400, 401, 403, 404, 405, 414, 424, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 448, 451, 452, 453, 457, 458, 459, 460, 461, 467, 469, 480, 481, 482, 497, 499, 500, 501, 503, 504, 517, 520, 521, 525, 528, 529, 530, 531, 532, 533, 537, 544, 552, 555, 556, 559, 560, 562, 564, 566], "includ": [0, 114, 115, 156, 157, 194, 195, 236, 237, 295, 296, 309, 315, 322, 347, 353, 356, 381, 390, 433, 439, 442, 471, 481, 508, 532, 559, 560, 561, 562, 564, 566], "http": [0, 330, 371, 379, 397, 401, 415, 416, 423, 425, 426, 444, 458, 467, 470, 478, 484, 492, 497, 512, 515, 517, 520, 529, 559, 561, 562], "github": [0, 397, 517, 529, 558, 559, 561, 562], "com": [0, 379, 397, 467, 497, 517, 520, 529, 559, 561, 562], "blob": [0, 397, 517, 529], "main": [0, 562], "md": 0, "while": [0, 116, 117, 196, 197, 270, 271, 303, 316, 324, 343, 344, 345, 357, 364, 365, 366, 375, 376, 377, 386, 390, 391, 392, 405, 443, 451, 452, 453, 461, 464, 465, 476, 482, 488, 493, 515, 519, 523, 524, 532, 533, 553, 555, 559, 561, 562, 564], "": [0, 86, 99, 109, 110, 157, 162, 163, 165, 166, 179, 189, 190, 237, 242, 243, 245, 246, 256, 267, 268, 296, 299, 300, 302, 303, 310, 311, 312, 313, 314, 318, 320, 321, 322, 323, 324, 325, 329, 332, 337, 339, 340, 341, 342, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 357, 359, 361, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 377, 379, 386, 389, 390, 392, 393, 394, 400, 401, 402, 403, 404, 405, 407, 410, 415, 416, 425, 426, 434, 435, 436, 437, 438, 440, 441, 442, 443, 446, 448, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 465, 467, 470, 476, 478, 480, 481, 484, 485, 493, 497, 499, 502, 503, 504, 505, 512, 517, 519, 520, 521, 522, 526, 531, 532, 548, 555, 556, 559, 560, 561, 562, 563, 566], "directli": [0, 153, 233, 561, 562, 566], "applic": [0, 332, 423, 515, 559, 560, 562], "sinc": [0, 112, 192, 269, 377, 465, 493, 542, 559, 561, 562, 564, 566], "most": [0, 470, 513, 561, 562, 566], "about": [0, 558, 559, 560], "itself": [0, 423, 561], "an": [0, 33, 34, 43, 50, 54, 55, 64, 70, 74, 86, 87, 88, 89, 90, 93, 94, 95, 98, 99, 101, 104, 105, 107, 109, 110, 111, 113, 116, 117, 119, 122, 123, 127, 128, 134, 146, 147, 148, 151, 152, 153, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 178, 179, 181, 184, 185, 187, 189, 190, 191, 193, 196, 197, 199, 202, 203, 207, 208, 214, 226, 227, 228, 231, 232, 233, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 255, 256, 259, 262, 263, 265, 266, 267, 268, 270, 271, 276, 277, 280, 281, 289, 290, 291, 295, 296, 298, 299, 300, 301, 302, 303, 307, 308, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 324, 326, 327, 328, 330, 331, 332, 336, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 357, 358, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 379, 381, 383, 384, 385, 386, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 406, 407, 408, 409, 410, 415, 416, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 440, 441, 443, 445, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 462, 464, 465, 466, 467, 468, 471, 473, 474, 475, 476, 478, 479, 482, 484, 486, 488, 492, 493, 494, 495, 496, 497, 499, 501, 502, 505, 507, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 525, 527, 528, 529, 530, 533, 542, 545, 555, 556, 558, 559, 560, 561, 562, 564, 566], "independ": [0, 397, 398, 506, 529, 530, 559], "librari": [0, 512, 555, 559, 560, 561, 562, 566], "develop": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "tandem": 0, "advic": 0, "still": [0, 306, 396, 501, 528, 559, 560, 561, 562], "appli": [0, 478, 562, 566], "here": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "In": [0, 105, 185, 263, 308, 324, 332, 333, 345, 346, 357, 361, 365, 371, 379, 380, 397, 401, 432, 443, 448, 452, 458, 467, 469, 484, 497, 500, 512, 529, 545, 559, 561, 562, 564, 566], "addit": [0, 86, 166, 246, 333, 559, 560, 561, 562, 566], "detail": [0, 153, 233, 371, 379, 401, 423, 458, 467, 484, 497, 512, 555, 556, 559, 560, 561, 562, 566], "below": [0, 324, 344, 345, 357, 364, 365, 366, 386, 392, 406, 428, 443, 451, 452, 453, 476, 519, 561], "implement": [0, 25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 86, 153, 166, 233, 246, 307, 323, 325, 371, 379, 397, 401, 416, 426, 444, 458, 467, 478, 497, 512, 515, 517, 520, 522, 529, 558, 559, 561, 562, 566], "primarili": [0, 561, 562], "thin": 0, "layer": [0, 6, 562], "becaus": [0, 160, 240, 298, 499, 561, 562, 563, 566], "your": [0, 151, 231, 407, 410, 560, 561, 562, 566], "involv": [0, 566], "modif": [0, 303], "src": 0, "To": [0, 273, 375, 405, 461, 560, 562, 563, 564, 566], "understand": 0, "which": [0, 86, 99, 109, 110, 111, 113, 114, 115, 134, 137, 152, 153, 157, 166, 179, 189, 190, 191, 193, 194, 195, 214, 217, 232, 233, 237, 246, 256, 267, 268, 283, 296, 303, 304, 308, 310, 311, 312, 313, 314, 318, 321, 324, 330, 338, 345, 346, 348, 349, 350, 351, 352, 354, 357, 365, 366, 368, 372, 373, 374, 375, 380, 384, 386, 392, 394, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 440, 443, 452, 453, 455, 459, 460, 461, 462, 469, 474, 476, 478, 490, 491, 499, 500, 501, 502, 503, 504, 513, 516, 519, 520, 521, 523, 559, 560, 561, 562, 563, 564, 566], "you": [0, 25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 65, 70, 74, 82, 86, 127, 128, 156, 160, 161, 162, 166, 207, 208, 236, 240, 241, 242, 246, 280, 281, 295, 298, 299, 307, 309, 310, 311, 312, 313, 324, 345, 347, 348, 349, 350, 351, 357, 365, 366, 373, 374, 375, 380, 388, 392, 403, 404, 405, 433, 443, 452, 453, 459, 460, 461, 462, 469, 478, 479, 500, 501, 502, 506, 520, 526, 555, 556, 559, 560, 561, 562, 563, 564, 566], "need": [0, 162, 242, 299, 414, 424, 555, 559, 560, 561, 562, 563, 564, 566], "we": [0, 303, 324, 345, 357, 365, 377, 443, 452, 465, 493, 543, 544, 548, 558, 561, 562, 563, 564, 566], "invit": 0, "overview": 0, "our": [0, 562, 564, 566], "simplifi": [0, 562, 564], "sourc": [0, 86, 99, 104, 105, 107, 108, 111, 113, 123, 127, 135, 157, 162, 164, 179, 184, 185, 187, 188, 191, 193, 203, 207, 215, 237, 242, 244, 262, 263, 265, 266, 280, 296, 299, 301, 308, 309, 310, 311, 312, 313, 314, 315, 318, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 335, 337, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 355, 357, 364, 365, 366, 367, 368, 372, 373, 375, 382, 392, 393, 394, 399, 400, 401, 403, 404, 405, 433, 434, 435, 436, 437, 438, 441, 443, 451, 452, 453, 454, 455, 459, 461, 472, 483, 484, 485, 488, 489, 493, 495, 496, 497, 500, 506, 508, 509, 514, 516, 518, 519, 520, 526, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 562, 564], "tree": [0, 6, 19, 324, 330, 344, 345, 357, 364, 365, 366, 392, 407, 410, 422, 443, 451, 452, 453, 503, 504, 520, 535, 538, 540, 542, 544, 546, 553, 562], "tini": [0, 562], "larg": [0, 376, 377, 397, 464, 465, 488, 489, 529, 558, 561, 562, 564], "mod": 0, "pure_rust_cod": 0, "more_pure_rust_cod": 0, "add": [0, 86, 87, 88, 89, 90, 91, 92, 93, 98, 107, 108, 129, 130, 131, 132, 151, 152, 153, 166, 167, 168, 169, 170, 171, 172, 173, 178, 187, 188, 209, 210, 211, 212, 231, 232, 233, 246, 247, 248, 249, 250, 251, 255, 265, 266, 389, 412, 419, 420, 480, 501, 506, 515, 531, 560, 561, 562, 564, 566], "them": [0, 161, 241, 303, 376, 377, 464, 465, 488, 489, 493, 562, 566], "import": [0, 25, 29, 33, 34, 43, 54, 55, 64, 70, 74, 86, 98, 109, 110, 146, 155, 160, 165, 166, 178, 189, 190, 226, 235, 240, 245, 246, 255, 267, 268, 289, 298, 302, 303, 307, 324, 345, 357, 359, 365, 380, 387, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 443, 446, 452, 462, 463, 468, 469, 470, 477, 500, 555, 556, 560, 561, 562, 563, 564], "defin": [0, 310, 311, 320, 321, 332, 338, 348, 349, 355, 361, 388, 414, 424, 434, 435, 441, 448, 479, 521, 562, 563, 564], "see": [0, 330, 423, 515, 556, 558, 559, 562, 566], "next": [0, 33, 34, 43, 54, 55, 64, 70, 74, 307, 318, 344, 354, 364, 375, 391, 405, 440, 451, 461, 478, 482, 533, 562], "section": [0, 565, 566], "us": [0, 33, 34, 43, 50, 54, 55, 64, 70, 74, 78, 86, 88, 90, 94, 95, 98, 99, 111, 113, 114, 115, 116, 117, 126, 134, 143, 146, 151, 153, 156, 157, 160, 161, 162, 165, 166, 168, 170, 174, 175, 178, 179, 191, 193, 194, 195, 196, 197, 206, 214, 223, 226, 231, 233, 236, 237, 240, 241, 242, 245, 246, 248, 249, 255, 256, 266, 270, 271, 273, 279, 288, 289, 295, 296, 298, 299, 302, 303, 307, 308, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 332, 333, 334, 335, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 356, 357, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 411, 412, 418, 419, 420, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 440, 441, 442, 443, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 476, 478, 479, 481, 482, 483, 484, 488, 489, 492, 493, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 512, 513, 515, 519, 520, 521, 522, 526, 528, 529, 530, 532, 533, 534, 541, 547, 555, 556, 558, 559, 561, 562, 563, 564, 565], "m": [0, 319, 330, 395, 396, 397, 398, 422, 444, 528, 529, 530, 558, 562, 564], "add_wrap": 0, "wrap_pyfunct": 0, "your_new_funct": 0, "modifi": [0, 99, 155, 166, 179, 235, 246, 319, 395, 562], "contain": [0, 25, 29, 33, 34, 39, 43, 46, 54, 55, 64, 70, 74, 86, 105, 166, 185, 246, 263, 303, 307, 323, 325, 330, 337, 344, 363, 364, 379, 414, 424, 450, 451, 467, 468, 484, 497, 499, 506, 507, 521, 525, 561, 562, 564, 565, 566], "pyfunct": 0, "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "either": [0, 95, 157, 161, 175, 237, 241, 296, 306, 308, 310, 311, 312, 313, 315, 318, 320, 321, 327, 331, 332, 335, 337, 344, 346, 361, 381, 391, 393, 394, 399, 401, 403, 404, 417, 423, 427, 432, 448, 462, 471, 482, 483, 488, 489, 493, 496, 497, 506, 508, 516, 518, 519, 526, 532, 533, 556, 561, 562, 564], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "give": [0, 303, 333, 499, 562, 564], "power": [0, 371, 379, 401, 458, 467, 484, 497, 512, 566], "interact": [0, 556, 559, 561, 562], "both": [0, 21, 22, 127, 128, 207, 208, 376, 377, 406, 408, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 425, 428, 429, 430, 431, 464, 465, 488, 489, 493, 495, 501, 506, 542, 561, 562, 564, 566], "interpret": [0, 562], "pure": [0, 559], "exist": [0, 86, 105, 137, 166, 185, 217, 246, 247, 248, 249, 263, 265, 266, 283, 319, 377, 391, 395, 402, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 465, 482, 483, 493, 505, 533, 561, 562, 566], "search": [0, 111, 112, 113, 191, 192, 193, 269, 303, 323, 324, 325, 330, 344, 345, 357, 364, 365, 366, 376, 377, 380, 391, 392, 443, 451, 452, 453, 464, 465, 469, 482, 488, 493, 500, 533, 540, 546, 553, 562], "its": [0, 120, 121, 128, 129, 131, 200, 201, 208, 209, 211, 274, 275, 281, 317, 322, 332, 361, 448, 501, 525, 537, 552, 558, 562, 563, 564, 566], "name": [0, 146, 226, 289, 559, 561, 562, 566], "edit": 0, "alreadi": [0, 134, 214, 247, 248, 249, 265, 266, 303, 304, 305, 542, 561, 562, 566], "If": [0, 33, 34, 43, 54, 55, 64, 65, 70, 74, 86, 99, 107, 108, 112, 114, 115, 116, 117, 127, 128, 134, 135, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 160, 161, 162, 165, 166, 179, 187, 188, 192, 194, 195, 196, 197, 207, 208, 214, 215, 226, 227, 229, 230, 231, 232, 233, 234, 236, 237, 240, 241, 242, 245, 246, 247, 248, 249, 256, 265, 266, 269, 270, 271, 280, 281, 289, 290, 292, 293, 294, 295, 296, 298, 299, 302, 303, 304, 307, 308, 314, 319, 321, 322, 324, 330, 332, 333, 334, 339, 340, 341, 342, 344, 345, 346, 347, 352, 356, 357, 361, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 385, 386, 389, 390, 391, 392, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 442, 443, 444, 448, 451, 452, 453, 455, 456, 457, 458, 460, 461, 462, 464, 465, 467, 469, 471, 472, 475, 476, 478, 480, 481, 482, 483, 484, 486, 488, 489, 493, 494, 497, 498, 499, 500, 501, 503, 504, 506, 508, 509, 512, 513, 518, 519, 521, 527, 528, 529, 531, 532, 533, 544, 555, 556, 560, 561, 562, 563, 564, 566], "want": [0, 33, 34, 43, 54, 55, 64, 70, 74, 307, 562, 566], "find": [0, 95, 111, 112, 113, 125, 142, 175, 191, 192, 193, 205, 222, 258, 269, 309, 311, 313, 314, 315, 318, 320, 321, 333, 334, 336, 338, 339, 340, 341, 342, 347, 349, 351, 352, 353, 354, 355, 367, 368, 372, 373, 374, 375, 378, 380, 382, 390, 391, 393, 394, 402, 403, 404, 405, 433, 435, 437, 438, 439, 440, 441, 444, 454, 455, 459, 460, 461, 466, 469, 472, 482, 483, 495, 496, 500, 501, 502, 503, 504, 509, 510, 511, 517, 522, 527, 532, 533, 557, 559, 562, 564, 566], "d": [0, 98, 178, 255, 332, 361, 366, 390, 392, 415, 416, 425, 426, 448, 453, 468, 470, 481, 532, 556, 558, 562, 564], "like": [0, 99, 127, 128, 179, 207, 208, 256, 309, 315, 347, 353, 356, 369, 370, 371, 379, 380, 399, 400, 401, 433, 439, 442, 456, 457, 458, 467, 469, 484, 497, 500, 512, 556, 560, 561, 562, 564, 566], "insert": [0, 129, 130, 131, 132, 134, 209, 210, 211, 212, 214, 366, 392, 453, 562], "creat": [0, 86, 87, 88, 89, 90, 91, 92, 93, 99, 116, 117, 129, 130, 131, 132, 134, 146, 152, 153, 157, 161, 166, 167, 168, 169, 170, 171, 172, 173, 179, 196, 197, 209, 210, 211, 212, 214, 226, 232, 233, 237, 241, 246, 247, 248, 249, 250, 251, 256, 270, 271, 289, 296, 297, 303, 319, 335, 362, 395, 396, 397, 398, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 449, 513, 528, 529, 530, 556, 558, 559, 561, 562, 564], "one": [0, 94, 95, 98, 99, 112, 114, 115, 129, 130, 131, 132, 134, 147, 149, 151, 153, 162, 174, 175, 178, 179, 192, 194, 195, 209, 210, 211, 212, 214, 227, 229, 231, 233, 242, 255, 256, 269, 273, 290, 292, 299, 304, 326, 332, 333, 334, 361, 375, 376, 377, 380, 391, 405, 448, 461, 464, 465, 469, 482, 488, 489, 493, 500, 512, 521, 533, 556, 559, 561, 562, 564, 566], "your_modul": 0, "Then": [0, 98, 178, 255, 562], "start": [0, 98, 103, 178, 183, 255, 261, 303, 304, 314, 319, 324, 338, 344, 345, 352, 357, 364, 365, 366, 378, 384, 392, 395, 438, 443, 451, 452, 453, 466, 474, 484, 496, 499, 512, 516, 559, 562, 563, 564, 566], "boilerpl": 0, "bellow": 0, "docstr": [0, 561], "descript": 0, "pyo3": [0, 160, 240, 298, 562], "text_signatur": 0, "graph": [0, 6, 19, 21, 22, 25, 29, 33, 34, 43, 50, 54, 55, 64, 70, 74, 78, 86, 87, 89, 90, 91, 92, 98, 99, 100, 102, 105, 106, 107, 108, 109, 110, 112, 116, 117, 124, 127, 128, 133, 134, 135, 137, 138, 139, 140, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 165, 166, 167, 169, 170, 171, 172, 178, 179, 180, 182, 185, 186, 187, 188, 189, 190, 192, 196, 197, 204, 207, 208, 213, 214, 215, 217, 218, 219, 220, 221, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 245, 246, 248, 249, 250, 251, 255, 256, 257, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 278, 280, 281, 283, 284, 285, 286, 287, 289, 292, 293, 294, 295, 296, 297, 298, 299, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 539, 542, 545, 553, 554, 555, 556, 557, 559, 560, 562, 565], "pub": [0, 512], "fn": 0, "py": [0, 397, 517, 529], "pygraph": [0, 19, 86, 109, 156, 161, 166, 189, 236, 241, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 344, 345, 361, 365, 370, 378, 386, 387, 392, 393, 394, 399, 400, 401, 403, 404, 406, 407, 408, 409, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 488, 489, 492, 493, 496, 497, 500, 501, 502, 503, 504, 506, 507, 508, 510, 513, 514, 515, 516, 518, 519, 520, 521, 525, 526, 528, 529, 530, 531, 532, 555, 556, 559, 560, 561, 562, 566], "pyresult": 0, "goe": [0, 397, 529], "rememb": 0, "declar": 0, "sometim": [0, 386, 422, 476, 519], "hard": [0, 462, 478, 562], "organ": 0, "those": [0, 105, 109, 110, 129, 130, 131, 132, 185, 189, 190, 209, 210, 211, 212, 263, 267, 268, 305, 322, 326, 329, 356, 359, 370, 387, 400, 442, 446, 457, 477, 520, 561, 562, 563, 564, 566], "case": [0, 94, 95, 105, 112, 152, 153, 174, 175, 185, 192, 232, 233, 247, 252, 263, 269, 308, 324, 332, 346, 357, 361, 366, 371, 379, 380, 392, 401, 432, 443, 448, 453, 458, 467, 469, 484, 497, 500, 512, 561, 562, 564, 566], "suggest": 0, "move": [0, 386, 476, 519, 562], "split": 0, "follow": [0, 86, 166, 246, 303, 324, 330, 345, 357, 365, 443, 444, 452, 523, 562, 564, 566], "structur": [0, 332, 376, 377, 464, 465, 488, 489, 493, 515, 559, 561, 566], "have": [0, 50, 65, 78, 86, 99, 100, 134, 135, 150, 151, 152, 153, 157, 161, 166, 179, 180, 214, 215, 230, 231, 232, 233, 237, 241, 246, 257, 293, 296, 297, 303, 305, 306, 316, 319, 320, 343, 355, 367, 377, 393, 395, 396, 441, 454, 465, 468, 487, 493, 499, 501, 512, 521, 528, 537, 544, 552, 560, 561, 562, 564, 566], "deleg": 0, "logic": [0, 303], "call": [0, 21, 22, 86, 126, 143, 153, 166, 206, 223, 233, 246, 279, 288, 303, 304, 305, 324, 330, 345, 357, 365, 366, 386, 392, 398, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 443, 444, 452, 453, 476, 517, 519, 530, 544, 545, 559, 560, 561, 562, 564, 566], "from": [0, 21, 22, 25, 29, 33, 34, 86, 87, 93, 98, 99, 101, 105, 107, 108, 109, 110, 111, 113, 116, 117, 123, 127, 128, 129, 130, 131, 132, 134, 135, 146, 149, 150, 151, 152, 153, 154, 156, 157, 160, 161, 165, 166, 167, 173, 178, 179, 181, 185, 187, 188, 189, 190, 191, 193, 196, 197, 203, 207, 208, 209, 210, 211, 212, 214, 215, 226, 229, 230, 231, 232, 233, 234, 236, 237, 240, 241, 245, 246, 248, 255, 256, 259, 263, 265, 266, 267, 268, 270, 271, 280, 281, 289, 292, 293, 294, 295, 296, 297, 298, 302, 303, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 323, 324, 325, 329, 330, 338, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 364, 365, 366, 367, 368, 369, 372, 378, 379, 380, 382, 385, 387, 389, 390, 391, 393, 394, 395, 398, 399, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 446, 451, 452, 453, 454, 455, 456, 462, 466, 467, 469, 472, 475, 477, 480, 481, 482, 483, 496, 497, 498, 499, 500, 502, 506, 509, 515, 518, 523, 524, 525, 531, 532, 533, 535, 548, 555, 556, 558, 559, 560, 562, 563, 564], "do": [0, 86, 161, 166, 241, 303, 377, 462, 465, 493, 561, 562, 566], "question": 0, "contact": 0, "u": [0, 135, 215, 324, 332, 345, 357, 361, 365, 366, 392, 443, 448, 452, 453, 469, 499, 542, 560, 562, 564], "channel": 0, "slack": 0, "re": [0, 86, 160, 166, 240, 298, 376, 377, 386, 464, 465, 476, 488, 489, 493, 519, 561, 562, 566], "work": [0, 21, 22, 321, 394, 463, 483, 506, 555, 559, 561, 562, 564, 565, 566], "write": [0, 146, 160, 165, 226, 240, 245, 289, 298, 302, 381, 471, 508, 555, 561, 562, 566], "made": [0, 86, 135, 166, 215, 246, 305, 306, 562, 564, 566], "ani": [0, 86, 88, 99, 105, 114, 115, 116, 117, 146, 152, 153, 160, 166, 168, 179, 185, 194, 195, 196, 197, 226, 232, 233, 240, 246, 247, 256, 263, 270, 271, 289, 298, 303, 304, 317, 328, 330, 338, 371, 379, 390, 397, 401, 407, 410, 458, 462, 467, 481, 484, 491, 492, 495, 497, 499, 512, 523, 529, 532, 555, 559, 560, 561, 562, 564, 566], "petgraph": [0, 562], "ha": [0, 86, 111, 112, 113, 114, 115, 124, 151, 152, 153, 166, 191, 192, 193, 194, 195, 204, 231, 232, 233, 246, 269, 278, 303, 304, 317, 324, 326, 328, 330, 337, 338, 339, 340, 341, 342, 357, 363, 365, 366, 388, 396, 397, 443, 450, 452, 453, 479, 495, 498, 499, 513, 520, 526, 528, 529, 535, 544, 559, 561, 562], "depend": [0, 152, 153, 232, 233, 506, 556, 560, 561, 562, 564], "probabl": [0, 397, 398, 529, 530, 560, 562], "sens": 0, "standalon": [0, 559, 562], "provid": [0, 94, 95, 99, 111, 113, 120, 121, 122, 127, 128, 148, 157, 161, 163, 174, 175, 179, 191, 193, 200, 201, 202, 207, 208, 228, 237, 241, 243, 252, 273, 274, 275, 276, 280, 281, 291, 296, 300, 303, 314, 316, 320, 323, 325, 343, 350, 351, 352, 354, 355, 367, 368, 376, 377, 378, 379, 380, 393, 396, 402, 436, 437, 438, 440, 441, 444, 454, 455, 464, 465, 466, 467, 469, 488, 489, 490, 491, 492, 493, 497, 499, 500, 502, 506, 507, 513, 520, 524, 528, 559, 560, 561, 562, 566], "api": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566], "other": [0, 6, 19, 98, 129, 130, 131, 132, 151, 153, 156, 157, 178, 209, 210, 211, 212, 231, 233, 236, 237, 255, 295, 296, 310, 311, 312, 313, 322, 348, 349, 350, 351, 356, 381, 385, 397, 418, 429, 434, 435, 436, 437, 442, 471, 475, 479, 499, 508, 518, 529, 560, 561, 563, 564, 566], "unlik": [0, 65, 90, 170, 249, 561], "design": [0, 560, 561, 562], "top": [0, 327, 358, 445, 562], "algorithm": [0, 19, 21, 22, 112, 192, 269, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 326, 338, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 357, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 379, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 467, 470, 476, 478, 480, 482, 484, 488, 492, 493, 497, 498, 501, 503, 504, 505, 512, 517, 519, 520, 521, 522, 528, 529, 530, 531, 533, 534, 541, 547, 558, 559, 561, 562, 566], "kei": [0, 94, 95, 98, 153, 160, 174, 175, 178, 233, 240, 252, 255, 298, 310, 311, 312, 313, 320, 321, 326, 329, 337, 348, 349, 350, 351, 355, 356, 359, 363, 366, 367, 368, 370, 371, 373, 378, 379, 380, 381, 386, 387, 392, 393, 394, 400, 401, 403, 434, 435, 436, 437, 441, 442, 444, 446, 450, 453, 454, 455, 457, 458, 459, 462, 463, 466, 467, 468, 469, 470, 471, 476, 477, 484, 496, 497, 499, 500, 506, 508, 512, 519, 555, 556, 559, 562], "differ": [0, 65, 107, 108, 116, 117, 161, 187, 188, 196, 197, 241, 265, 266, 270, 271, 297, 316, 341, 342, 343, 369, 388, 399, 456, 499, 504, 555, 559, 560, 562, 564, 566], "keep": [0, 324, 345, 357, 365, 386, 443, 452, 476, 504, 519, 561, 562, 566], "mind": [0, 561], "public": [0, 561, 562], "interfac": [0, 559, 561, 562, 566], "treat": [0, 25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 116, 117, 146, 196, 197, 226, 270, 271, 289, 307, 308, 321, 346, 368, 369, 373, 374, 375, 386, 390, 394, 395, 399, 405, 432, 455, 456, 476, 483, 499, 519, 532, 561, 562], "where": [0, 33, 34, 55, 74, 89, 90, 94, 95, 104, 107, 108, 151, 152, 153, 164, 169, 170, 174, 175, 184, 187, 188, 231, 232, 233, 244, 248, 249, 252, 262, 265, 266, 301, 303, 307, 308, 315, 320, 322, 329, 330, 332, 333, 334, 336, 346, 353, 355, 356, 359, 361, 367, 370, 373, 374, 375, 378, 386, 387, 390, 393, 397, 400, 403, 404, 405, 406, 418, 428, 429, 432, 439, 441, 442, 444, 446, 448, 454, 457, 459, 460, 461, 462, 463, 466, 468, 470, 476, 477, 481, 496, 499, 501, 503, 506, 517, 519, 520, 529, 532, 557, 559, 561, 562, 563, 564, 566], "compat": [0, 86, 137, 217, 283, 357, 365, 366, 443, 452, 453, 560, 562], "doesn": [0, 105, 165, 185, 245, 263, 302, 416, 426, 487, 561, 562, 564, 566], "t": [0, 105, 135, 165, 185, 215, 245, 263, 302, 306, 314, 321, 322, 339, 340, 341, 342, 352, 356, 368, 370, 386, 390, 394, 395, 400, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 438, 442, 455, 457, 476, 481, 487, 503, 504, 512, 519, 520, 532, 543, 544, 561, 562, 563, 564, 566], "matter": 0, "onli": [0, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 70, 74, 82, 86, 94, 95, 101, 112, 127, 128, 147, 149, 151, 152, 153, 162, 166, 174, 175, 181, 192, 207, 208, 227, 229, 231, 232, 233, 242, 246, 252, 259, 269, 273, 290, 292, 299, 303, 304, 307, 310, 311, 312, 313, 316, 320, 321, 329, 330, 333, 334, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 355, 356, 359, 364, 367, 370, 371, 373, 379, 380, 387, 390, 393, 394, 400, 401, 403, 434, 435, 436, 437, 441, 442, 446, 451, 454, 457, 458, 459, 467, 469, 477, 481, 483, 484, 497, 499, 500, 501, 512, 525, 532, 556, 560, 561, 562, 564, 566], "addition": [0, 86, 166, 246, 561, 562, 566], "should": [0, 65, 89, 90, 151, 153, 157, 162, 169, 170, 231, 233, 237, 242, 248, 249, 296, 299, 318, 324, 345, 354, 357, 365, 366, 392, 410, 414, 416, 417, 425, 440, 443, 452, 453, 484, 488, 489, 493, 534, 541, 547, 560, 561, 562], "done": [0, 303, 305, 306, 561, 562, 564], "via": [0, 555, 561, 562, 566], "cargo": [0, 560, 562], "doc": [0, 512, 559], "It": [0, 25, 29, 33, 34, 39, 43, 46, 50, 54, 55, 64, 70, 74, 78, 86, 88, 114, 115, 116, 117, 153, 155, 156, 166, 168, 194, 195, 196, 197, 233, 235, 236, 246, 247, 270, 271, 295, 303, 307, 310, 311, 312, 313, 314, 317, 318, 320, 321, 326, 328, 329, 330, 333, 334, 337, 338, 339, 340, 341, 342, 348, 349, 350, 351, 352, 354, 355, 359, 363, 366, 367, 368, 369, 373, 374, 375, 380, 386, 388, 389, 390, 392, 393, 394, 399, 403, 404, 405, 434, 435, 436, 437, 438, 440, 441, 446, 450, 453, 454, 455, 456, 459, 460, 461, 469, 476, 478, 479, 480, 481, 488, 489, 493, 499, 500, 501, 512, 515, 519, 520, 526, 531, 532, 555, 559, 560, 561, 562, 564, 566], "expect": [0, 146, 157, 165, 226, 237, 245, 289, 296, 302, 308, 339, 340, 341, 342, 346, 371, 373, 374, 375, 379, 381, 397, 401, 403, 404, 405, 432, 458, 459, 460, 461, 462, 467, 471, 484, 497, 499, 501, 502, 503, 504, 508, 512, 520, 521, 529, 555, 560, 561, 562], "also": [0, 86, 156, 166, 236, 246, 295, 297, 308, 324, 329, 339, 340, 341, 342, 345, 346, 357, 359, 365, 366, 369, 373, 374, 375, 376, 377, 387, 390, 392, 396, 397, 399, 403, 404, 405, 414, 424, 432, 443, 446, 452, 453, 456, 459, 460, 461, 464, 465, 477, 481, 488, 489, 493, 503, 504, 517, 528, 529, 532, 558, 559, 560, 561, 562, 564, 566], "being": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "so": [0, 25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 86, 155, 156, 157, 166, 235, 236, 237, 246, 248, 266, 295, 296, 307, 398, 444, 530, 560, 561, 562, 563, 564, 566], "coverag": 0, "onc": [0, 153, 233, 305, 501, 517, 560, 561, 562, 566], "ve": [0, 98, 178, 255, 563, 564], "verifi": 0, "doe": [0, 86, 155, 157, 166, 235, 237, 256, 296, 499, 515, 559, 561, 562, 564], "break": [0, 562], "successfulli": 0, "befor": [0, 99, 179, 380, 469, 499, 500, 562, 564], "open": [0, 146, 160, 165, 226, 240, 245, 289, 298, 302, 561, 562], "ll": [0, 560, 562, 563, 564], "suit": 0, "easiest": 0, "wai": [0, 542, 561, 566], "nox": [0, 562], "instal": [0, 506, 555, 556, 559, 561, 562], "pip": [0, 555, 556, 560, 562, 566], "sever": [0, 561, 562, 566], "advantag": [0, 559, 560], "biggest": [0, 561, 562], "isol": [0, 6, 562], "virtualenv": 0, "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "mean": [0, 86, 95, 166, 175, 246, 318, 354, 377, 395, 440, 465, 479, 493, 495, 527, 559, 561, 562, 566], "pollut": 0, "system": [0, 407, 410, 559, 560, 562], "howev": [0, 86, 166, 246, 555, 559, 560, 561, 562, 566], "default": [0, 86, 116, 117, 127, 128, 134, 146, 151, 153, 156, 161, 166, 196, 197, 207, 208, 214, 226, 231, 233, 236, 241, 246, 270, 271, 289, 295, 303, 308, 309, 310, 311, 312, 313, 315, 322, 332, 346, 347, 348, 349, 350, 351, 353, 356, 357, 361, 365, 366, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 386, 388, 389, 390, 391, 392, 399, 400, 401, 403, 404, 405, 410, 412, 414, 416, 417, 419, 420, 425, 432, 433, 439, 442, 443, 448, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 467, 469, 476, 478, 479, 480, 481, 482, 484, 488, 489, 493, 497, 499, 500, 501, 512, 513, 519, 521, 526, 531, 532, 533, 534, 541, 547, 555, 556, 561, 562, 566], "recompil": [0, 562], "everi": [0, 161, 241, 303, 371, 378, 379, 398, 401, 418, 429, 458, 466, 467, 468, 484, 496, 497, 499, 502, 512, 520, 530, 551, 555, 562, 563], "time": [0, 86, 88, 151, 152, 153, 157, 166, 168, 231, 232, 233, 237, 296, 345, 365, 378, 388, 396, 397, 444, 452, 466, 479, 496, 501, 528, 529, 535, 536, 538, 543, 544, 548, 558, 560, 561, 562, 564, 566], "even": [0, 303, 304, 335, 362, 415, 416, 425, 426, 449, 499, 561, 562], "avoid": [0, 86, 166, 520, 564], "packag": [0, 559, 560, 562], "rerun": 0, "without": [0, 90, 104, 160, 170, 184, 240, 249, 262, 298, 317, 324, 339, 340, 341, 342, 357, 366, 392, 443, 453, 492, 495, 512, 562, 564, 566], "flag": [0, 501, 561, 566], "recent": 0, "ran": [0, 566], "repo": 0, "otherwis": [0, 124, 204, 278, 306, 376, 377, 391, 464, 465, 482, 488, 489, 493, 505, 533, 562], "out": [0, 131, 132, 135, 211, 212, 215, 343, 396, 495, 528, 537, 544, 551, 552, 562], "date": 0, "miss": [0, 478, 561, 562], "outsid": [0, 560, 562, 564], "root": [0, 330, 338, 544, 560], "shim": 0, "conflict": 0, "compil": [0, 559, 560, 562], "extens": [0, 395, 515, 561, 562], "test_with_vers": 0, "target": [0, 25, 29, 39, 46, 70, 74, 99, 104, 105, 107, 108, 111, 127, 135, 157, 162, 164, 179, 184, 185, 187, 188, 191, 207, 215, 237, 242, 244, 262, 263, 265, 266, 280, 296, 299, 301, 309, 310, 311, 312, 313, 314, 321, 324, 339, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 357, 364, 368, 373, 375, 382, 394, 403, 405, 433, 434, 435, 436, 437, 438, 443, 451, 455, 459, 461, 472, 483, 509, 535, 538, 550, 562, 564, 566], "For": [0, 25, 29, 33, 34, 43, 54, 55, 64, 70, 74, 86, 98, 109, 110, 146, 151, 155, 160, 161, 165, 166, 178, 189, 190, 226, 231, 235, 240, 241, 245, 246, 255, 267, 268, 289, 298, 302, 303, 307, 309, 310, 311, 312, 313, 318, 329, 330, 339, 340, 341, 342, 347, 348, 349, 350, 351, 354, 359, 363, 371, 373, 374, 375, 376, 377, 379, 380, 387, 388, 395, 396, 397, 398, 401, 403, 404, 405, 433, 434, 435, 436, 437, 440, 446, 458, 459, 460, 461, 464, 465, 467, 469, 477, 478, 479, 484, 488, 489, 495, 497, 500, 501, 502, 512, 515, 520, 521, 526, 528, 529, 530, 542, 556, 560, 561, 562, 563, 564, 566], "exampl": [0, 25, 29, 33, 34, 43, 54, 55, 64, 70, 74, 86, 98, 109, 110, 146, 151, 155, 160, 165, 166, 178, 189, 190, 226, 231, 235, 240, 245, 246, 255, 267, 268, 289, 298, 302, 303, 307, 308, 309, 310, 311, 312, 313, 324, 329, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 357, 359, 365, 373, 374, 375, 376, 377, 380, 387, 388, 391, 403, 404, 405, 432, 433, 434, 435, 436, 437, 443, 446, 452, 459, 460, 461, 464, 465, 469, 477, 478, 479, 482, 488, 489, 493, 500, 501, 502, 503, 504, 520, 526, 533, 556, 560, 561, 562, 564, 566], "launch": [0, 309, 310, 311, 312, 313, 347, 348, 349, 350, 351, 373, 374, 375, 380, 388, 403, 404, 405, 433, 459, 460, 461, 469, 478, 479, 500, 526], "3": [0, 29, 50, 65, 78, 86, 101, 109, 110, 146, 155, 157, 165, 166, 181, 189, 190, 226, 235, 237, 245, 246, 259, 267, 268, 289, 296, 302, 303, 324, 339, 340, 341, 342, 345, 357, 359, 365, 387, 388, 391, 414, 415, 416, 417, 423, 424, 425, 426, 443, 446, 452, 462, 463, 468, 470, 477, 479, 482, 501, 517, 533, 558, 561, 562, 563, 564, 566], "11": [0, 423, 559, 560], "command": [0, 555], "e": [0, 98, 136, 178, 216, 255, 256, 370, 378, 388, 397, 400, 423, 457, 466, 478, 496, 498, 512, 521, 525, 529, 535, 538, 539, 540, 542, 545, 546, 562, 564, 566], "just": [0, 86, 330, 339, 340, 341, 342, 376, 377, 464, 465, 488, 489, 493, 556, 559, 560, 561, 562, 566], "pass": [0, 109, 110, 134, 151, 153, 156, 161, 165, 189, 190, 214, 231, 233, 236, 241, 245, 267, 268, 295, 302, 308, 322, 329, 339, 340, 341, 342, 346, 356, 359, 370, 371, 373, 374, 375, 376, 377, 379, 381, 389, 391, 396, 400, 401, 403, 404, 405, 432, 442, 446, 457, 458, 459, 460, 461, 462, 464, 465, 467, 471, 480, 482, 484, 486, 488, 489, 493, 494, 497, 499, 501, 502, 503, 504, 508, 512, 520, 521, 528, 531, 533, 555, 556, 561, 562, 563, 564], "select": [0, 372, 478, 512, 566], "regex": 0, "runner": [0, 562], "dag": [0, 6, 19, 86, 89, 90, 93, 160, 166, 169, 170, 173, 240, 298, 303, 308, 323, 325, 339, 340, 341, 342, 346, 498, 499, 523, 524, 525, 562], "id": [0, 86, 146, 166, 226, 246, 289, 338, 372, 376, 377, 386, 391, 464, 465, 476, 482, 488, 489, 493, 498, 519, 522, 533, 562], "argument": [0, 109, 110, 114, 115, 134, 153, 166, 189, 190, 194, 195, 214, 233, 246, 267, 268, 303, 310, 311, 312, 313, 314, 321, 332, 333, 334, 339, 340, 341, 342, 346, 348, 349, 350, 351, 352, 357, 361, 365, 366, 368, 377, 386, 391, 392, 394, 432, 434, 435, 436, 437, 438, 443, 448, 452, 453, 455, 465, 476, 482, 493, 499, 501, 513, 519, 533, 562, 566], "after": [0, 86, 98, 157, 166, 178, 237, 246, 255, 296, 537, 544, 551, 552, 561, 562, 564, 566], "bare": 0, "option": [0, 86, 98, 99, 116, 117, 134, 146, 157, 160, 161, 165, 166, 178, 179, 196, 197, 214, 226, 237, 240, 241, 245, 246, 255, 256, 270, 271, 289, 296, 298, 302, 308, 314, 319, 320, 321, 324, 327, 330, 331, 332, 338, 344, 345, 346, 352, 355, 357, 358, 360, 361, 364, 365, 366, 367, 368, 369, 371, 372, 376, 377, 378, 379, 381, 383, 384, 385, 386, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 432, 438, 441, 443, 445, 447, 448, 451, 452, 453, 454, 455, 456, 458, 462, 464, 465, 466, 467, 471, 473, 474, 475, 476, 482, 484, 488, 493, 496, 497, 501, 503, 504, 508, 512, 513, 514, 516, 518, 519, 521, 528, 529, 530, 533, 555, 556, 561, 562], "refer": [0, 100, 129, 130, 131, 132, 156, 157, 161, 180, 209, 210, 211, 212, 236, 237, 241, 257, 295, 296, 297, 329, 359, 371, 379, 389, 401, 446, 458, 467, 480, 484, 497, 512, 517, 531, 555, 560, 561, 562, 566], "stestr": 0, "readthedoc": 0, "io": [0, 559, 562], "en": [0, 512, 562], "html": [0, 517], "class": [0, 19, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 65, 70, 74, 78, 82, 86, 166, 246, 303, 307, 315, 323, 324, 325, 345, 357, 365, 432, 443, 452, 534, 541, 547, 559, 560, 562, 566], "individu": 0, "method": [0, 25, 29, 35, 39, 46, 50, 65, 70, 74, 78, 82, 86, 88, 99, 107, 108, 111, 113, 116, 117, 127, 128, 134, 137, 155, 160, 166, 168, 179, 187, 188, 191, 193, 196, 197, 207, 208, 214, 217, 235, 240, 246, 256, 265, 266, 270, 271, 280, 281, 283, 298, 303, 304, 316, 324, 332, 343, 345, 357, 365, 366, 371, 379, 392, 401, 443, 452, 453, 458, 467, 484, 497, 501, 506, 512, 534, 541, 545, 547, 555, 560, 561, 562, 563, 564, 566], "faster": [0, 322, 356, 442, 520, 561, 562], "n": [0, 112, 146, 192, 226, 269, 289, 319, 332, 361, 386, 390, 395, 396, 397, 398, 407, 408, 410, 411, 413, 421, 422, 423, 444, 448, 476, 481, 501, 503, 519, 528, 529, 530, 532, 562, 566], "discov": [0, 324, 344, 345, 357, 364, 365, 366, 392, 443, 451, 452, 453, 543, 551], "test_max_weight_match": 0, "same": [0, 65, 86, 88, 99, 112, 151, 152, 153, 155, 157, 166, 168, 179, 192, 231, 232, 233, 235, 237, 269, 296, 303, 375, 380, 389, 405, 461, 469, 480, 488, 489, 493, 500, 504, 512, 531, 542, 556, 559, 562, 564], "path": [0, 6, 19, 25, 29, 70, 74, 146, 155, 160, 165, 226, 235, 240, 245, 289, 298, 302, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 330, 332, 334, 339, 340, 341, 342, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 361, 367, 368, 369, 370, 373, 374, 375, 378, 380, 381, 382, 390, 393, 394, 400, 403, 404, 405, 406, 419, 428, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 448, 454, 455, 456, 457, 459, 460, 461, 466, 469, 471, 472, 481, 483, 496, 500, 501, 502, 508, 509, 515, 517, 520, 525, 532, 555, 559, 560, 562, 563, 564, 566], "test_nod": 0, "testnod": 0, "test_no_nod": 0, "rel": [0, 384, 386, 474, 476, 516, 519], "each": [0, 86, 105, 114, 115, 134, 153, 155, 165, 166, 185, 194, 195, 214, 233, 235, 245, 246, 263, 297, 302, 303, 304, 310, 311, 312, 313, 314, 315, 319, 321, 322, 324, 326, 328, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 345, 348, 349, 350, 351, 352, 353, 356, 357, 361, 363, 365, 366, 368, 369, 370, 373, 374, 375, 376, 377, 381, 384, 385, 386, 390, 391, 392, 394, 395, 397, 398, 399, 400, 405, 408, 411, 422, 434, 435, 436, 437, 438, 439, 442, 443, 448, 450, 452, 453, 455, 456, 457, 464, 465, 471, 474, 475, 476, 482, 484, 488, 489, 490, 491, 493, 498, 501, 502, 503, 504, 508, 512, 513, 516, 518, 519, 520, 523, 529, 530, 532, 533, 540, 546, 551, 555, 557, 560, 561, 562, 563, 564, 566], "fail": [0, 373, 374, 375, 403, 404, 405, 459, 460, 461, 562], "except": [0, 19, 44, 45, 56, 57, 58, 59, 60, 61, 62, 63, 69, 86, 166, 246, 324, 339, 340, 341, 342, 345, 357, 365, 366, 381, 391, 392, 443, 452, 453, 471, 482, 501, 508, 533, 553, 554, 559, 561, 562], "rais": [0, 86, 88, 99, 118, 119, 120, 121, 122, 135, 147, 149, 160, 162, 163, 165, 166, 168, 179, 198, 199, 200, 201, 202, 215, 227, 229, 240, 242, 243, 245, 246, 272, 273, 274, 275, 276, 290, 292, 298, 299, 300, 302, 303, 304, 310, 311, 314, 320, 321, 324, 337, 339, 340, 341, 342, 345, 347, 348, 349, 350, 351, 352, 354, 355, 357, 365, 366, 367, 368, 378, 381, 386, 392, 402, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 440, 441, 443, 452, 453, 454, 455, 466, 471, 476, 486, 494, 498, 501, 502, 507, 508, 515, 519, 520, 523, 524, 525, 526, 561, 562, 564], "save": [0, 555], "output": [0, 116, 117, 152, 153, 156, 160, 161, 165, 196, 197, 232, 233, 236, 240, 241, 245, 270, 271, 295, 297, 298, 302, 303, 308, 309, 315, 320, 344, 346, 347, 353, 355, 364, 367, 369, 378, 381, 382, 393, 399, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 439, 441, 451, 454, 466, 471, 472, 496, 498, 499, 501, 506, 508, 509, 555, 562, 563, 564], "imag": [0, 160, 240, 255, 298, 415, 416, 425, 426, 555, 561, 562, 563, 564, 566], "current": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "ensur": [0, 86, 162, 166, 242, 280, 299, 560, 562], "usabl": [0, 562], "clutter": 0, "clean": 0, "up": [0, 303, 349, 351, 435, 437, 564, 566], "view": [0, 391, 482, 488, 493, 533, 561, 564], "inspect": [0, 564], "common": [0, 468, 490, 512, 562, 564], "set": [0, 86, 88, 99, 119, 122, 127, 128, 146, 151, 156, 161, 165, 166, 168, 179, 199, 202, 207, 208, 226, 231, 236, 241, 245, 246, 247, 256, 273, 276, 289, 295, 302, 303, 304, 309, 310, 311, 312, 313, 315, 316, 317, 321, 322, 327, 328, 330, 335, 336, 338, 339, 340, 343, 347, 348, 349, 350, 351, 353, 356, 358, 362, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 383, 386, 388, 389, 390, 391, 394, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 439, 442, 445, 449, 455, 457, 458, 459, 460, 461, 464, 465, 467, 469, 473, 476, 478, 479, 480, 481, 482, 483, 488, 489, 490, 491, 493, 497, 498, 499, 500, 501, 506, 507, 514, 519, 520, 526, 530, 531, 532, 533, 556, 557, 561, 562, 563, 564, 566], "rustworkx_test_preserve_imag": 0, "environ": [0, 309, 310, 311, 312, 313, 347, 348, 349, 350, 351, 373, 374, 375, 380, 388, 390, 403, 404, 405, 433, 459, 460, 461, 469, 478, 479, 481, 484, 500, 526, 532, 560, 562, 566], "variabl": [0, 309, 310, 311, 312, 313, 347, 348, 349, 350, 351, 373, 374, 375, 380, 388, 390, 403, 404, 405, 433, 459, 460, 461, 469, 478, 479, 481, 500, 526, 532, 562], "valu": [0, 94, 95, 98, 99, 109, 110, 116, 117, 134, 157, 160, 174, 175, 178, 179, 189, 190, 196, 197, 214, 237, 240, 252, 255, 267, 268, 270, 271, 296, 298, 303, 308, 310, 311, 312, 313, 314, 320, 321, 322, 326, 327, 329, 331, 346, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 378, 379, 380, 381, 383, 384, 385, 386, 387, 390, 392, 393, 394, 399, 400, 401, 403, 404, 405, 407, 410, 412, 414, 419, 420, 424, 432, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 481, 484, 496, 497, 500, 501, 502, 503, 504, 508, 512, 513, 514, 516, 518, 519, 520, 521, 532, 555, 556, 562, 563, 566], "skip": [0, 99, 157, 179, 237, 296, 333, 334, 562], "cleanup": 0, "enabl": [0, 86, 99, 160, 166, 179, 240, 298, 373, 374, 375, 403, 404, 405, 459, 460, 461, 559, 561, 562], "look": [0, 112, 192, 269, 561, 564, 566], "correct": [0, 562], "1": [0, 25, 29, 35, 50, 65, 70, 78, 82, 86, 98, 101, 109, 146, 155, 165, 166, 178, 181, 189, 226, 235, 245, 246, 255, 259, 267, 289, 302, 303, 308, 310, 311, 312, 313, 314, 318, 320, 321, 322, 324, 327, 329, 331, 332, 338, 345, 346, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 369, 371, 373, 374, 375, 379, 384, 385, 386, 387, 390, 392, 393, 394, 396, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 446, 447, 448, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 467, 468, 470, 474, 475, 476, 477, 481, 484, 492, 497, 498, 501, 503, 504, 505, 513, 516, 517, 518, 519, 520, 521, 525, 527, 528, 529, 531, 532, 556, 559, 561, 563, 564, 566], "preserv": [0, 99, 179, 256, 357, 365, 366, 443, 452, 453, 562], "finish": [0, 303, 318, 324, 345, 354, 357, 365, 366, 392, 440, 443, 452, 453, 544], "As": [0, 152, 153, 232, 233, 279, 288, 564], "crate": [0, 559, 562], "own": 0, "combin": [0, 98, 99, 161, 178, 179, 241, 255, 256, 562], "embed": 0, "book": 0, "how": [0, 308, 322, 326, 346, 356, 369, 370, 373, 374, 375, 390, 399, 400, 403, 404, 405, 432, 442, 456, 457, 459, 460, 461, 481, 503, 504, 532, 555, 561, 562, 564], "lang": [0, 512], "org": [0, 330, 371, 401, 415, 416, 423, 425, 426, 458, 478, 515, 517, 520, 562], "ch11": 0, "01": [0, 330, 562], "primari": 0, "languag": [0, 515, 559, 562], "written": [0, 338, 555, 559, 560, 561, 562, 564], "rustfmt": 0, "enforc": [0, 564], "consist": [0, 65, 134, 157, 214, 237, 296, 515, 558, 562, 564], "job": [0, 562, 564], "configur": 0, "check": [0, 86, 99, 123, 133, 153, 160, 166, 179, 203, 213, 233, 240, 298, 303, 339, 340, 341, 342, 371, 376, 377, 379, 391, 401, 444, 458, 464, 465, 467, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 501, 505, 512, 533, 562, 564], "luckili": 0, "adapt": [0, 338, 386, 476, 519, 561], "simpl": [0, 308, 309, 315, 330, 346, 347, 353, 373, 374, 375, 376, 377, 380, 391, 403, 404, 405, 408, 432, 433, 439, 444, 459, 460, 461, 464, 465, 469, 482, 488, 489, 493, 500, 503, 504, 517, 521, 533, 560, 562, 564], "fmt": 0, "automat": 0, "restyl": 0, "match": [0, 6, 19, 109, 110, 111, 112, 113, 114, 115, 189, 190, 191, 192, 193, 194, 195, 267, 268, 269, 333, 334, 376, 377, 391, 464, 465, 482, 488, 489, 490, 491, 493, 501, 512, 533, 562], "what": [0, 561, 562], "step": [0, 303], "clippi": 0, "some": [0, 109, 110, 189, 190, 267, 268, 303, 308, 322, 346, 356, 373, 374, 375, 398, 403, 404, 405, 432, 442, 459, 460, 461, 503, 504, 530, 542, 559, 562, 563], "small": [0, 562], "piec": 0, "namespac": 0, "actual": [0, 318, 354, 440, 561, 564], "black": [0, 160, 240, 298, 324, 345, 357, 365, 415, 416, 425, 426, 443, 452, 535, 556, 562, 566], "flake8": 0, "repositori": 0, "mode": [0, 160, 240, 298, 415, 416, 425, 426, 555, 562, 563, 564, 566], "conform": 0, "rule": 0, "return": [0, 19, 25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 151, 153, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 231, 233, 236, 237, 238, 239, 240, 241, 244, 245, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566], "format": [0, 146, 226, 289, 323, 325, 381, 471, 508, 512, 515, 555, 561, 562, 566], "error": [0, 127, 128, 135, 160, 207, 208, 215, 240, 280, 281, 298, 303, 339, 340, 341, 342, 371, 379, 386, 401, 458, 467, 476, 484, 497, 512, 515, 519, 560, 562, 564], "updat": [0, 86, 156, 162, 163, 166, 236, 242, 243, 246, 247, 248, 249, 265, 266, 295, 299, 300, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 562, 566], "handl": [0, 346, 432, 561, 562, 566], "venv": 0, "render": [0, 566], "web": [0, 512], "browser": 0, "built": [0, 560, 562], "locat": [0, 562], "rustworkx_cor": [0, 559, 562], "off": [0, 560, 562, 566], "dir": [0, 470], "signatur": 0, "anot": 0, "requir": [0, 65, 109, 110, 189, 190, 267, 268, 303, 341, 342, 357, 365, 366, 380, 443, 452, 453, 469, 500, 555, 560, 561, 562], "stub": 0, "tool": [0, 558, 561, 562, 566], "pyi": 0, "thei": [0, 98, 153, 160, 178, 233, 240, 255, 298, 376, 377, 389, 464, 465, 480, 488, 489, 493, 499, 523, 531, 556, 560, 561, 562, 566], "strip": 0, "more": [0, 86, 112, 146, 166, 192, 226, 246, 269, 289, 303, 305, 306, 326, 330, 332, 337, 361, 363, 380, 385, 423, 448, 450, 469, 475, 500, 501, 515, 517, 518, 555, 556, 558, 559, 560, 561, 562, 566], "mypi": [0, 562], "latest": [0, 562], "veri": [0, 561, 566], "help": 0, "end": [0, 103, 183, 261, 314, 320, 324, 344, 345, 352, 355, 357, 364, 365, 366, 367, 392, 393, 438, 441, 443, 451, 452, 453, 454, 562, 564], "user": [0, 86, 470, 506, 559, 562, 566], "let": [0, 344, 364, 451, 562, 563, 564], "bug": 0, "One": [0, 542, 566], "thing": [0, 561, 566], "necessari": [0, 562, 564], "line": [0, 146, 226, 289, 463, 468, 556, 562], "__init__": [0, 324, 345, 357, 365, 443, 452, 561, 562, 566], "form": [0, 25, 29, 33, 34, 35, 50, 55, 65, 70, 74, 78, 82, 89, 90, 101, 104, 107, 108, 126, 143, 164, 169, 170, 181, 184, 187, 188, 206, 223, 244, 248, 249, 259, 262, 265, 266, 279, 288, 301, 307, 329, 332, 338, 344, 359, 361, 364, 372, 387, 389, 446, 448, 451, 477, 480, 531, 540, 546, 562], "foo": 0, "abl": [0, 560, 562], "access": [0, 25, 29, 33, 34, 43, 54, 55, 64, 70, 74, 86, 127, 128, 166, 207, 208, 246, 307, 323, 325, 561, 562], "pattern": [0, 558, 562], "face": 0, "must": [0, 116, 117, 160, 196, 197, 240, 270, 271, 298, 318, 333, 339, 340, 341, 342, 354, 367, 379, 393, 415, 416, 425, 426, 440, 454, 467, 497, 512, 521, 555, 556, 561, 562, 564], "explain": 0, "wa": [0, 86, 366, 369, 373, 374, 375, 390, 392, 399, 403, 404, 405, 453, 459, 460, 461, 513, 532, 555, 559, 560, 561, 562, 564], "why": 0, "idea": 0, "behind": 0, "naiv": 0, "limit": [0, 160, 240, 298, 309, 310, 311, 312, 313, 347, 348, 349, 350, 351, 373, 374, 375, 376, 377, 380, 388, 391, 403, 404, 405, 433, 459, 460, 461, 464, 465, 469, 478, 479, 482, 488, 493, 500, 526, 533, 560, 561, 562], "intern": [0, 21, 22, 99, 179, 256, 423, 559, 562, 564], "knowledg": 0, "upgrad": [0, 560], "previou": [0, 304, 330, 384, 474, 516, 523, 562, 566], "program": [0, 559, 560, 562], "would": [0, 86, 99, 127, 128, 151, 166, 179, 207, 208, 231, 246, 309, 310, 311, 312, 313, 347, 348, 349, 350, 351, 373, 374, 375, 376, 377, 380, 388, 391, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 459, 460, 461, 464, 465, 469, 478, 479, 482, 488, 489, 491, 493, 499, 500, 526, 533, 560, 561, 562, 564, 566], "go": [0, 135, 215, 561], "ideal": 0, "too": [0, 116, 117, 196, 197, 270, 271, 560, 562, 563], "context": [0, 562], "sure": [0, 556, 562], "don": [0, 135, 215, 564, 566], "forget": 0, "over": [0, 65, 129, 130, 131, 132, 134, 155, 157, 209, 210, 211, 212, 214, 235, 237, 296, 303, 332, 361, 389, 391, 448, 478, 480, 482, 531, 533, 562, 564], "cycl": [0, 6, 19, 86, 88, 99, 166, 168, 179, 303, 310, 311, 320, 321, 330, 338, 339, 340, 341, 342, 348, 349, 355, 372, 402, 409, 412, 434, 435, 441, 487, 505, 517, 523, 524, 562, 564], "accomplish": [0, 561], "reno": 0, "git": 0, "base": [0, 21, 22, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 65, 70, 74, 78, 82, 86, 99, 166, 179, 246, 256, 303, 307, 322, 323, 325, 346, 356, 370, 371, 376, 377, 379, 391, 397, 400, 401, 432, 442, 444, 457, 458, 464, 465, 467, 470, 478, 482, 488, 489, 492, 493, 497, 501, 506, 517, 529, 533, 534, 541, 547, 561, 562, 563, 564], "workflow": 0, "quit": [0, 566], "straightforward": [0, 561], "checkout": 0, "short": 0, "string": [0, 146, 160, 165, 226, 240, 245, 289, 298, 302, 346, 381, 432, 471, 499, 508, 555, 556, 562, 566], "brief": 0, "space": [0, 513, 562], "describ": [0, 89, 90, 169, 170, 248, 249, 319, 372, 395, 406, 428, 462, 515, 561, 562], "becom": [0, 540, 546, 562], "prefix": [0, 561], "yaml": 0, "releasenot": 0, "text": [0, 388, 479, 556], "editor": 0, "basic": [0, 561, 562], "restructur": 0, "list": [0, 33, 34, 43, 54, 55, 64, 74, 86, 89, 90, 92, 99, 102, 103, 104, 105, 106, 107, 108, 110, 114, 115, 118, 126, 127, 128, 130, 132, 136, 137, 138, 139, 143, 144, 145, 146, 149, 154, 156, 158, 159, 164, 165, 166, 169, 170, 172, 179, 182, 183, 184, 185, 186, 187, 188, 190, 194, 195, 198, 206, 207, 208, 210, 212, 216, 217, 218, 219, 223, 224, 225, 226, 229, 234, 236, 238, 239, 244, 245, 246, 248, 249, 251, 256, 260, 261, 262, 263, 264, 265, 266, 268, 272, 279, 281, 282, 283, 284, 285, 288, 289, 292, 294, 295, 301, 302, 304, 305, 307, 309, 311, 313, 314, 315, 318, 321, 323, 324, 325, 330, 333, 334, 336, 338, 344, 345, 347, 349, 351, 352, 353, 354, 357, 364, 365, 366, 368, 372, 384, 386, 392, 394, 402, 406, 407, 408, 409, 410, 411, 412, 414, 418, 419, 420, 422, 424, 428, 429, 430, 431, 433, 435, 437, 438, 439, 440, 443, 451, 452, 453, 455, 474, 476, 478, 495, 498, 499, 501, 513, 515, 516, 519, 520, 521, 522, 523, 524, 555, 556, 557, 561, 562, 563, 566], "under": [0, 559, 562], "categori": 0, "item": [0, 563, 566], "group": [0, 332, 333, 361, 448], "A": [0, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 65, 70, 74, 78, 82, 86, 89, 90, 92, 94, 95, 98, 99, 102, 103, 105, 106, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 126, 127, 128, 136, 137, 138, 139, 143, 144, 145, 149, 151, 153, 154, 156, 157, 158, 159, 160, 161, 166, 169, 170, 172, 174, 175, 178, 179, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 206, 207, 208, 216, 217, 218, 219, 223, 224, 225, 229, 231, 233, 234, 236, 237, 238, 239, 240, 241, 246, 248, 249, 251, 252, 255, 256, 260, 261, 263, 264, 265, 266, 267, 270, 271, 272, 279, 280, 281, 282, 283, 284, 285, 288, 292, 294, 295, 296, 297, 298, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 363, 364, 365, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 386, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 480, 482, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 513, 515, 517, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 533, 534, 541, 547, 555, 556, 557, 558, 559, 560, 562, 564, 566], "mani": [0, 303, 322, 326, 356, 369, 370, 390, 399, 400, 442, 456, 457, 481, 532, 560, 561, 562], "entri": [0, 248, 266, 320, 355, 367, 374, 375, 393, 404, 405, 441, 454, 460, 461, 512, 562], "potenti": [0, 564], "newli": [0, 87, 89, 90, 91, 92, 93, 99, 129, 130, 131, 132, 157, 167, 169, 170, 171, 172, 173, 179, 209, 210, 211, 212, 237, 247, 248, 249, 250, 251, 256, 296, 561], "full": [0, 152, 153, 232, 233, 422, 562], "templat": 0, "delet": [0, 86, 166, 246, 562], "aren": [0, 564], "content": [0, 65, 146, 160, 165, 226, 240, 245, 289, 298, 302, 379, 467, 497, 559, 562], "result": [0, 25, 29, 33, 34, 39, 43, 46, 54, 55, 64, 70, 74, 86, 166, 246, 297, 303, 307, 317, 326, 328, 330, 337, 338, 363, 385, 388, 396, 450, 475, 479, 512, 518, 525, 526, 528, 558, 562, 566], "someth": [0, 380, 469, 500, 556, 561, 562, 564], "featur": [0, 86, 166, 561], "func": [0, 556], "support": [0, 346, 416, 426, 432, 478, 515, 555, 559, 561, 562, 564, 566], "pydigraph": [0, 19, 86, 98, 99, 105, 110, 116, 117, 146, 155, 156, 157, 160, 165, 297, 303, 308, 309, 310, 311, 312, 313, 315, 316, 318, 320, 321, 322, 323, 324, 325, 327, 329, 331, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 448, 483, 484, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 505, 506, 508, 509, 511, 512, 515, 516, 517, 518, 519, 522, 523, 524, 525, 526, 531, 532, 555, 556, 557, 559, 561, 562, 564, 566], "object": [0, 21, 22, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 65, 70, 74, 78, 82, 86, 87, 88, 89, 91, 92, 93, 94, 95, 98, 99, 105, 106, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 135, 139, 146, 151, 152, 153, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 178, 179, 185, 186, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202, 215, 219, 226, 231, 232, 233, 236, 237, 240, 241, 243, 245, 246, 247, 248, 250, 251, 252, 255, 256, 263, 264, 270, 271, 272, 273, 274, 276, 285, 289, 295, 296, 297, 298, 300, 302, 303, 307, 308, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 324, 329, 332, 333, 334, 339, 340, 341, 342, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 379, 381, 386, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 476, 477, 480, 482, 484, 488, 489, 493, 495, 497, 501, 502, 503, 504, 505, 506, 508, 512, 513, 519, 520, 521, 528, 529, 530, 531, 533, 534, 541, 547, 555, 556, 561, 562, 564, 566], "meth": 0, "equival": [0, 50, 65, 78, 136, 157, 216, 237, 255, 296, 380, 406, 428, 469, 500, 525, 559, 562, 564], "conveni": [0, 506], "nativ": [0, 561, 562, 564], "g": [0, 256, 324, 344, 345, 357, 364, 365, 366, 388, 392, 423, 443, 451, 452, 453, 468, 525, 556, 562, 564, 566], "deprec": 0, "bar": 0, "been": [0, 98, 161, 178, 241, 255, 297, 304, 306, 499, 535, 537, 544, 552, 559, 562], "remov": [0, 86, 99, 129, 130, 131, 132, 135, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 166, 179, 209, 210, 211, 212, 215, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 246, 256, 290, 291, 292, 293, 294, 297, 298, 317, 326, 328, 535, 561, 562, 563], "futur": [0, 304, 562], "supersed": 0, "similar": [0, 346, 432, 561, 562, 566], "accur": 0, "better": [0, 88, 168, 376, 377, 464, 465, 488, 489, 562, 566], "perform": [0, 86, 88, 166, 168, 303, 319, 376, 377, 380, 386, 395, 464, 465, 469, 476, 478, 488, 489, 499, 500, 519, 534, 541, 547, 559, 560, 561, 562, 564], "instead": [0, 86, 146, 151, 153, 161, 162, 166, 226, 231, 233, 241, 242, 246, 289, 299, 330, 380, 381, 391, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 469, 471, 482, 500, 508, 533, 561, 562, 566], "sphinx": 0, "tabl": 0, "enumer": [0, 562], "bullet": 0, "etc": [0, 308, 346, 373, 374, 375, 403, 404, 405, 432, 459, 460, 461, 503, 504, 521, 566], "express": [0, 332, 361, 448, 562], "much": [0, 561, 562], "commit": [0, 562], "pr": 0, "artifact": [0, 357, 365, 366, 443, 452, 453], "part": [0, 324, 326, 345, 357, 365, 366, 392, 443, 452, 453, 521, 553, 559, 560, 562, 566], "inlin": 0, "number": [0, 35, 86, 140, 141, 151, 152, 153, 166, 220, 221, 231, 232, 233, 246, 286, 287, 306, 309, 310, 311, 312, 313, 317, 319, 322, 326, 327, 328, 332, 337, 347, 348, 349, 350, 351, 356, 358, 361, 363, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 382, 383, 386, 388, 389, 390, 391, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 442, 444, 445, 448, 450, 456, 457, 458, 459, 460, 461, 464, 465, 467, 469, 472, 473, 476, 478, 479, 480, 481, 482, 484, 488, 493, 497, 500, 501, 503, 509, 510, 511, 512, 513, 514, 519, 520, 526, 528, 529, 530, 531, 532, 533, 562, 563], "12345": 0, "fix": [0, 134, 214, 386, 476, 519], "race": 0, "condit": [0, 109, 110, 111, 113, 114, 115, 151, 189, 190, 191, 193, 194, 195, 231, 267, 268, 333, 334, 513, 562, 564], "__": [0, 339, 340, 341, 342, 562], "rst": 0, "restructuredtext": 0, "report": [0, 543, 544, 548, 558], "dure": [0, 303, 372, 562], "0": [0, 25, 29, 33, 34, 35, 50, 65, 70, 74, 78, 82, 86, 101, 109, 116, 117, 146, 155, 160, 165, 166, 181, 189, 196, 197, 226, 235, 240, 245, 246, 259, 267, 270, 271, 289, 298, 302, 303, 308, 309, 310, 311, 312, 313, 314, 315, 321, 322, 324, 329, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 359, 365, 366, 369, 371, 373, 374, 375, 379, 385, 386, 387, 392, 394, 396, 397, 399, 401, 403, 404, 405, 408, 411, 423, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 446, 452, 453, 456, 458, 459, 460, 461, 462, 463, 467, 468, 470, 475, 476, 477, 484, 495, 497, 501, 503, 504, 512, 513, 518, 519, 521, 527, 528, 529, 555, 556, 559, 560, 561, 563, 564, 566], "8": [0, 388, 423, 462, 484, 517, 556, 558, 559, 561, 566], "tag": 0, "standard": [0, 559, 562], "state": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "_build": 0, "particular": [0, 462, 562], "release_not": 0, "submit": 0, "approv": 0, "team": 0, "get": [0, 94, 95, 101, 104, 114, 115, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 142, 143, 144, 145, 158, 159, 162, 164, 174, 175, 181, 184, 194, 195, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 222, 223, 224, 225, 238, 239, 242, 244, 252, 258, 259, 262, 273, 274, 275, 279, 280, 281, 282, 283, 288, 299, 301, 316, 318, 323, 325, 337, 343, 344, 354, 363, 364, 369, 382, 399, 440, 450, 451, 456, 472, 498, 499, 509, 523, 524, 559, 562, 566], "trigger": [0, 478], "subsequ": [0, 562, 566], "mai": [0, 153, 161, 233, 241, 297, 303, 317, 326, 328, 330, 337, 338, 363, 388, 450, 462, 479, 512, 526, 560, 562, 564], "take": [0, 98, 109, 110, 111, 113, 114, 115, 134, 157, 160, 161, 178, 189, 190, 191, 193, 194, 195, 214, 237, 240, 241, 255, 267, 268, 296, 298, 318, 320, 330, 333, 334, 354, 355, 367, 376, 377, 391, 393, 402, 440, 441, 454, 462, 464, 465, 482, 488, 489, 493, 501, 505, 533, 560, 561, 562, 563, 566], "week": 0, "month": 0, "dai": [0, 561, 562, 566], "avail": [0, 390, 481, 532, 555, 558, 560, 561, 562, 566], "propos": [0, 560, 562], "valuabl": 0, "everyth": [0, 561], "highest": 0, "prioriti": [0, 562], "process": [0, 303, 304, 305, 330, 444, 478, 560, 562, 563], "quickli": [0, 562, 566], "activ": 0, "member": [0, 540, 546], "permiss": 0, "final": [0, 98, 178, 255, 562], "mark": [0, 304, 305, 306, 423, 542, 562], "readi": [0, 303, 305, 306, 562], "everyon": 0, "welcom": 0, "extrem": 0, "reduc": [0, 397, 520, 529, 550, 562], "burden": 0, "bit": [0, 560, 564], "back": [0, 324, 345, 357, 365, 366, 392, 443, 452, 453, 539, 542, 561], "forth": [0, 561], "receiv": [0, 157, 237, 296, 378, 466, 496, 562], "feedback": 0, "multipl": [0, 65, 86, 99, 147, 149, 153, 157, 161, 166, 179, 227, 229, 233, 237, 241, 246, 248, 266, 273, 290, 292, 296, 308, 346, 380, 432, 469, 500, 561, 562, 566], "round": [0, 556], "pleas": [0, 561, 562], "discourag": 0, "normal": [0, 322, 356, 370, 400, 442, 457, 484, 556, 560, 561, 562, 563], "qualiti": 0, "appear": [0, 152, 153, 232, 233, 303, 333, 334, 517, 564], "might": [0, 65, 303, 504], "larger": [0, 562, 566], "implic": 0, "obviou": 0, "feel": 0, "free": 0, "adjust": [0, 86, 166, 246, 322, 356, 369, 370, 390, 399, 400, 442, 456, 457, 481, 532, 562], "comment": [0, 146, 226, 289], "anoth": [0, 98, 178, 255, 558, 562, 564, 566], "constrain": 0, "resourc": [0, 560], "infinit": [0, 562], "wait": 0, "period": 0, "fine": 0, "regress": [0, 562], "codebas": 0, "often": [0, 564, 566], "needlessli": 0, "wast": 0, "starvat": 0, "slow": 0, "down": 0, "total": 0, "throughput": 0, "possibl": [0, 303, 314, 352, 388, 391, 396, 397, 398, 438, 482, 523, 527, 528, 529, 530, 533, 560, 562, 566], "try": [0, 391, 482, 533, 560, 562], "bundl": 0, "head": [0, 556, 564, 566], "automerg": 0, "signal": 0, "mergifi": 0, "bot": 0, "enqueu": 0, "onto": [0, 98, 178, 255], "At": [0, 512], "point": [0, 317, 319, 324, 326, 345, 357, 365, 366, 392, 395, 443, 452, 453, 499, 512, 534, 541, 542, 547, 562, 564, 566], "fulli": [0, 560, 562], "autom": [0, 562], "effort": [0, 560], "conserv": 0, "maxim": [0, 326, 337, 363, 450, 491, 501, 562], "idl": 0, "deep": 0, "backlog": 0, "unless": [0, 134, 214, 386, 476, 506, 519, 561, 562], "delai": [0, 562], "intend": [0, 556], "safe": 0, "high": [0, 319, 395, 559, 560, 562], "impact": [0, 562], "secur": 0, "balanc": 0, "risk": 0, "given": [0, 111, 112, 113, 120, 121, 122, 153, 191, 192, 193, 200, 201, 202, 233, 269, 274, 275, 276, 280, 303, 304, 324, 330, 333, 334, 338, 345, 346, 357, 365, 366, 372, 375, 389, 392, 398, 405, 415, 416, 425, 426, 432, 443, 452, 453, 461, 463, 480, 485, 499, 512, 530, 531, 562, 563, 566], "patch": [0, 556], "appropri": [0, 324, 345, 357, 365, 366, 392, 443, 452, 453, 561, 562], "inclus": 0, "riski": 0, "major": [0, 562], "trivial": 0, "fairli": [0, 566], "obscur": 0, "factor": [0, 327, 331, 358, 360, 379, 384, 385, 386, 422, 445, 447, 467, 474, 475, 476, 497, 516, 518, 519, 520], "weigh": 0, "consid": [0, 151, 231, 330, 376, 377, 380, 395, 464, 465, 469, 488, 489, 500], "tiniest": 0, "carri": 0, "realli": 0, "visibl": 0, "benefit": 0, "notic": [0, 562, 564], "self": [0, 296, 317, 324, 326, 328, 330, 335, 337, 345, 357, 362, 363, 365, 388, 396, 443, 449, 450, 452, 479, 526, 528, 561, 562, 566], "signific": 0, "refactor": 0, "lot": [0, 561], "worth": [0, 156, 236, 295, 329, 339, 340, 341, 342, 359, 389, 446, 480, 531, 555, 562], "think": 0, "less": [0, 306, 322, 356, 370, 400, 407, 410, 414, 422, 424, 442, 457, 478, 521], "whether": [0, 86, 109, 110, 114, 115, 151, 166, 189, 190, 194, 195, 231, 246, 267, 268, 322, 333, 334, 356, 370, 400, 442, 444, 457, 486, 490, 491, 492, 494, 506, 561, 562], "simpli": [0, 562, 566], "non": [0, 318, 324, 330, 333, 354, 357, 367, 377, 393, 423, 440, 443, 454, 465, 493, 512, 517, 535, 538, 561, 564], "allow": [0, 86, 88, 161, 166, 168, 241, 246, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 561, 562, 564, 566], "accept": [0, 310, 311, 312, 313, 314, 321, 348, 349, 350, 351, 352, 366, 368, 386, 392, 394, 434, 435, 436, 437, 438, 453, 455, 476, 519, 561, 562], "least": [0, 114, 115, 194, 195, 512, 562, 563], "until": [0, 303, 324, 330, 344, 345, 357, 364, 365, 366, 386, 392, 443, 451, 452, 453, 476, 519, 562], "mainta": 0, "minor": 0, "approach": [0, 463, 562, 566], "reason": 0, "cherri": 0, "pick": [0, 303], "x": [0, 308, 346, 373, 374, 375, 376, 377, 380, 403, 404, 423, 432, 459, 460, 461, 464, 465, 469, 488, 489, 493, 500, 501, 503, 504, 520, 561, 562, 563, 564], "main_commit_id": 0, "squash": 0, "track": [0, 303, 324, 345, 357, 365, 443, 452], "strict": 0, "cleanli": 0, "resolv": [0, 499, 542, 562], "yourself": [0, 562], "messag": [0, 160, 240, 298, 562], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "document": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567], "branch": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "rustworkx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 65, 70, 74, 78, 82, 86, 166, 246, 303, 307, 534, 541, 547, 562, 563, 564, 567], "chang": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "prior": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "releas": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567], "central": [6, 19, 39, 46, 322, 332, 356, 361, 370, 371, 379, 400, 401, 442, 448, 457, 458, 467, 497, 559, 562, 565], "betweenness_centr": [6, 400, 562, 563], "edge_betweenness_centr": [6, 322, 562], "eigenvector_centr": [6, 371, 458, 562], "katz_centr": [6, 379, 467, 562], "closeness_centr": [6, 562], "color": [6, 19, 160, 240, 298, 324, 333, 345, 357, 365, 415, 416, 423, 425, 426, 443, 444, 452, 462, 463, 470, 527, 535, 538, 555, 556, 562, 563, 566], "graph_greedy_color": [6, 562], "graph_bipartite_edge_color": [6, 562], "graph_greedy_edge_color": [6, 562], "graph_misra_gries_edge_color": [6, 562], "two_color": [6, 562], "connect": [6, 19, 103, 153, 161, 183, 233, 241, 261, 317, 328, 330, 332, 333, 336, 344, 361, 388, 390, 398, 406, 408, 411, 418, 428, 429, 448, 451, 479, 481, 486, 494, 503, 504, 510, 511, 522, 530, 532, 557, 562, 563, 564, 566], "number_connected_compon": [6, 562], "connected_compon": [6, 562, 566], "node_connected_compon": [6, 562], "is_connect": [6, 562], "strongly_connected_compon": [6, 562], "number_weakly_connected_compon": [6, 562], "weakly_connected_compon": [6, 562], "is_weakly_connect": [6, 562], "cycle_basi": [6, 562], "simple_cycl": [6, 562], "digraph_find_cycl": [6, 562], "articulation_point": [6, 562], "bridg": [6, 562], "biconnected_compon": [6, 562], "chain_decomposit": [6, 43, 562], "all_simple_path": [6, 562], "all_pairs_all_simple_path": [6, 380, 469, 500, 562], "stoer_wagner_min_cut": [6, 562], "longest_simple_path": [6, 562], "is_bipartit": [6, 562], "has_path": [6, 562], "dag_longest_path": [6, 340, 341, 342, 562], "dag_longest_path_length": [6, 342, 562], "dag_weighted_longest_path": [6, 562], "dag_weighted_longest_path_length": [6, 562], "is_directed_acyclic_graph": 6, "transitive_reduct": [6, 562], "topological_gener": [6, 562], "oper": [6, 19, 389, 480, 531, 560, 561, 562, 564], "complement": [6, 362, 449, 562], "union": [6, 329, 389, 480, 515, 562], "cartesian_product": [6, 562, 566], "isomorph": [6, 19, 376, 377, 391, 464, 465, 482, 488, 489, 493, 533, 559, 562], "is_isomorph": [6, 376, 391, 464, 482, 533, 562], "is_subgraph_isomorph": [6, 377, 391, 465, 482, 533, 558, 562], "is_isomorphic_node_match": [6, 562], "vf2_map": [6, 562], "link": [6, 19, 379, 381, 467, 471, 497, 508, 520, 561, 562, 566], "analysi": [6, 19, 332, 562, 564], "pagerank": [6, 562], "hit": [6, 562], "max_weight_match": [6, 562], "is_match": [6, 562], "is_maximal_match": 6, "adjacency_matrix": [6, 561, 562], "transit": [6, 388, 479, 512, 525, 562, 566], "core_numb": [6, 562], "graph_line_graph": [6, 562], "metric_closur": [6, 562], "is_planar": [6, 562], "shortest": [6, 19, 310, 311, 312, 313, 314, 318, 320, 321, 322, 332, 348, 349, 350, 351, 352, 354, 355, 356, 361, 367, 368, 370, 373, 374, 375, 378, 382, 390, 393, 394, 400, 403, 404, 405, 434, 435, 436, 437, 438, 440, 441, 442, 448, 454, 455, 457, 459, 460, 461, 466, 472, 481, 496, 502, 509, 520, 532, 559, 560, 562, 563], "dijkstra_shortest_path": [6, 74, 560, 562], "dijkstra_shortest_path_length": [6, 70, 558, 562], "all_pairs_dijkstra_shortest_path": [6, 29, 562], "all_pairs_dijkstra_path_length": [6, 558, 562], "bellman_ford_shortest_path": [6, 562], "bellman_ford_shortest_path_length": [6, 562], "all_pairs_bellman_ford_shortest_path": [6, 562], "all_pairs_bellman_ford_path_length": [6, 562], "negative_edge_cycl": [6, 562], "find_negative_cycl": [6, 562], "distance_matrix": [6, 562], "floyd_warshal": [6, 562], "floyd_warshall_numpi": [6, 399, 561, 562], "floyd_warshall_successor_and_dist": [6, 562], "astar_shortest_path": [6, 562], "k_shortest_path_length": [6, 562], "num_shortest_paths_unweight": [6, 562], "unweighted_average_shortest_path_length": [6, 562], "all_shortest_path": [6, 562], "digraph_all_shortest_path": [6, 562], "travers": [6, 19, 324, 339, 340, 341, 342, 344, 345, 357, 364, 365, 366, 367, 392, 393, 443, 451, 452, 453, 454, 553, 554, 562], "dfs_edg": [6, 562], "dfs_search": [6, 365, 452, 541, 562], "bfs_successor": [6, 34, 562], "bfs_predecessor": [6, 33, 562], "bfs_search": [6, 357, 443, 534, 562], "dijkstra_search": [6, 547, 562], "topological_sort": [6, 499, 562, 564], "lexicographical_topological_sort": [6, 562], "descend": [6, 523], "ancestor": [6, 523], "collect_run": [6, 562, 564], "collect_bicolor_run": 6, "dfsvisitor": [6, 345, 365, 452, 562], "bfsvisitor": [6, 324, 357, 443, 562], "dijkstravisitor": [6, 366, 392, 453, 562], "topologicalsort": [6, 562], "minimum_spanning_edg": [6, 562], "minimum_spanning_tre": [6, 562], "steiner_tre": [6, 562], "pydag": [19, 21, 178, 255, 487, 489, 562], "function": [19, 25, 29, 33, 34, 39, 43, 46, 54, 55, 64, 70, 74, 109, 110, 114, 115, 134, 136, 150, 151, 152, 153, 160, 161, 165, 189, 190, 194, 195, 214, 216, 230, 231, 232, 233, 240, 241, 245, 267, 268, 293, 298, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 322, 324, 326, 328, 330, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 363, 365, 366, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 386, 388, 389, 390, 391, 392, 394, 395, 397, 399, 400, 401, 402, 403, 404, 405, 416, 426, 432, 433, 434, 435, 436, 437, 438, 442, 443, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 471, 476, 478, 479, 480, 481, 482, 484, 488, 489, 493, 497, 499, 500, 501, 503, 504, 505, 506, 508, 512, 513, 517, 519, 521, 522, 526, 529, 531, 532, 533, 542, 544, 555, 556, 558, 559, 560, 562, 563, 564, 566], "gener": [19, 25, 29, 33, 34, 43, 54, 55, 64, 70, 74, 78, 105, 109, 116, 117, 153, 155, 156, 160, 161, 165, 185, 189, 196, 197, 233, 235, 236, 240, 241, 245, 263, 267, 270, 271, 295, 297, 298, 302, 303, 307, 308, 310, 311, 312, 313, 314, 319, 321, 327, 331, 332, 346, 349, 351, 352, 358, 359, 360, 361, 368, 370, 381, 383, 384, 385, 386, 387, 391, 394, 395, 396, 397, 398, 400, 432, 434, 435, 436, 437, 438, 445, 446, 447, 448, 455, 457, 462, 463, 470, 471, 473, 474, 475, 476, 477, 482, 508, 513, 514, 516, 517, 518, 519, 523, 528, 529, 530, 533, 555, 556, 559, 560, 561, 562, 564], "random": [19, 319, 383, 386, 395, 396, 397, 398, 473, 476, 478, 513, 514, 519, 528, 529, 530, 559, 562, 566], "layout": [19, 78, 327, 331, 358, 360, 383, 384, 385, 386, 423, 445, 447, 462, 473, 474, 475, 476, 514, 516, 518, 519, 555, 556, 559, 561, 562, 566], "serial": [19, 559, 561, 562], "convert": [19, 506, 559, 562], "custom": [19, 25, 29, 33, 34, 39, 43, 46, 54, 55, 64, 70, 74, 307, 323, 325, 559, 561, 562, 563, 566], "type": [19, 21, 22, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 106, 109, 110, 112, 114, 115, 116, 117, 118, 121, 123, 124, 125, 126, 127, 128, 133, 136, 137, 138, 139, 142, 143, 144, 145, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 181, 182, 183, 184, 185, 186, 189, 190, 192, 194, 195, 196, 197, 198, 201, 203, 204, 205, 206, 207, 208, 213, 216, 217, 218, 219, 222, 223, 224, 225, 236, 237, 238, 239, 240, 241, 244, 247, 248, 249, 250, 251, 252, 255, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 295, 296, 297, 298, 301, 305, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 555, 556, 557, 559, 561, 562, 563, 566], "specif": [21, 22, 111, 112, 113, 116, 117, 162, 191, 192, 193, 196, 197, 242, 269, 270, 271, 299, 515, 556, 560, 561, 562, 564], "univers": [21, 22, 332, 562], "retworkx": [21, 559, 562], "explicitli": [21, 22, 561, 562], "data": [21, 22, 33, 34, 50, 86, 88, 89, 90, 94, 95, 98, 99, 100, 106, 109, 110, 114, 115, 116, 117, 118, 119, 120, 122, 126, 127, 128, 134, 139, 143, 145, 151, 156, 157, 159, 160, 161, 163, 165, 166, 168, 169, 170, 174, 175, 178, 179, 180, 186, 189, 190, 194, 195, 196, 197, 198, 199, 200, 202, 206, 207, 208, 214, 219, 223, 225, 231, 236, 237, 239, 240, 241, 243, 245, 246, 247, 248, 249, 252, 255, 256, 257, 264, 267, 268, 270, 271, 272, 273, 274, 276, 279, 280, 281, 285, 288, 295, 296, 297, 298, 300, 302, 307, 318, 320, 323, 325, 329, 333, 334, 354, 355, 359, 367, 369, 376, 377, 381, 389, 391, 393, 399, 402, 440, 441, 446, 454, 456, 464, 465, 471, 480, 482, 488, 489, 493, 498, 499, 502, 505, 506, 508, 515, 520, 531, 533, 555, 556, 559, 562, 563, 564], "length": [25, 70, 310, 312, 320, 322, 340, 342, 348, 350, 355, 367, 373, 374, 375, 378, 380, 390, 393, 403, 404, 405, 407, 414, 424, 434, 436, 441, 454, 459, 460, 461, 466, 469, 481, 496, 500, 525, 532, 556, 562], "node": [25, 29, 33, 34, 39, 50, 55, 64, 65, 70, 74, 78, 82, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 265, 266, 268, 269, 270, 271, 272, 273, 276, 277, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 475, 476, 477, 478, 480, 481, 482, 483, 484, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 548, 555, 556, 558, 560, 562, 563, 564], "map": [25, 29, 35, 39, 46, 50, 65, 70, 74, 78, 82, 86, 98, 101, 127, 157, 166, 178, 181, 207, 237, 246, 255, 259, 280, 296, 309, 322, 329, 332, 347, 359, 361, 382, 387, 391, 433, 446, 448, 472, 477, 478, 482, 509, 525, 533, 556, 561, 562, 563, 566], "integ": [25, 29, 33, 34, 39, 43, 46, 54, 55, 64, 70, 74, 86, 89, 90, 107, 108, 166, 169, 170, 187, 188, 246, 248, 249, 265, 266, 307, 326, 333, 339, 340, 423, 462, 498, 501, 527, 561, 562, 566], "indic": [25, 29, 39, 46, 50, 54, 55, 64, 65, 70, 74, 78, 82, 86, 89, 90, 92, 94, 95, 98, 101, 102, 103, 104, 107, 108, 109, 110, 112, 127, 128, 132, 134, 136, 137, 138, 144, 146, 156, 157, 158, 161, 164, 166, 169, 170, 172, 174, 175, 178, 181, 182, 183, 184, 187, 188, 189, 190, 192, 207, 208, 212, 214, 216, 217, 218, 224, 226, 236, 237, 238, 241, 244, 246, 248, 249, 251, 252, 255, 259, 260, 261, 262, 265, 266, 267, 268, 269, 279, 280, 281, 282, 283, 284, 288, 289, 295, 296, 297, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 324, 327, 329, 330, 339, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 365, 366, 368, 371, 373, 379, 380, 382, 384, 387, 391, 392, 394, 399, 401, 403, 410, 414, 416, 417, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 452, 453, 455, 457, 458, 459, 462, 463, 467, 468, 469, 470, 472, 474, 477, 482, 484, 495, 497, 498, 499, 500, 504, 509, 512, 516, 520, 524, 527, 533, 535, 538, 556, 560, 561, 562, 563, 566], "pathlengthmap": [25, 320, 355, 367, 378, 441, 454, 466, 562], "234": 25, "2": [25, 29, 33, 34, 43, 50, 54, 55, 64, 70, 74, 78, 86, 88, 98, 101, 105, 109, 110, 116, 117, 118, 119, 129, 130, 131, 132, 146, 147, 151, 155, 165, 166, 168, 178, 181, 185, 189, 190, 196, 197, 198, 199, 209, 210, 211, 212, 226, 227, 231, 235, 245, 246, 247, 255, 259, 263, 267, 268, 270, 271, 272, 273, 289, 290, 302, 303, 307, 308, 310, 311, 312, 313, 315, 322, 324, 327, 330, 331, 345, 346, 347, 348, 349, 350, 351, 353, 356, 357, 358, 359, 360, 365, 370, 373, 376, 377, 383, 384, 385, 386, 387, 388, 391, 397, 399, 400, 403, 406, 407, 408, 410, 414, 415, 417, 423, 424, 425, 427, 428, 432, 433, 434, 435, 436, 437, 439, 442, 443, 445, 446, 447, 452, 457, 459, 462, 463, 464, 465, 468, 470, 473, 474, 475, 476, 477, 482, 488, 489, 493, 513, 514, 516, 517, 518, 519, 520, 528, 529, 531, 533, 555, 556, 559, 561, 563, 564, 566], "34": 25, "python": [25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 86, 87, 88, 89, 90, 91, 92, 93, 98, 99, 111, 113, 152, 153, 161, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 191, 193, 232, 233, 241, 246, 247, 248, 249, 250, 251, 255, 256, 307, 318, 320, 323, 325, 339, 340, 341, 342, 354, 355, 367, 376, 377, 378, 380, 391, 393, 402, 440, 441, 454, 464, 465, 466, 469, 482, 488, 489, 493, 496, 499, 500, 505, 533, 558, 559, 560, 561, 562, 566], "protocol": [25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 86, 166, 246, 307, 323, 325, 561, 562, 566], "dict": [25, 29, 35, 39, 46, 50, 65, 70, 74, 78, 82, 94, 95, 98, 160, 166, 174, 175, 178, 240, 246, 252, 255, 298, 310, 311, 312, 313, 321, 322, 326, 332, 337, 348, 349, 350, 351, 356, 363, 368, 370, 371, 373, 378, 379, 386, 393, 394, 400, 401, 403, 415, 416, 425, 426, 434, 435, 436, 437, 442, 444, 450, 455, 457, 458, 459, 462, 463, 466, 467, 468, 470, 476, 478, 484, 496, 497, 512, 519, 525, 527, 555, 556, 561, 562, 566], "rx": [25, 29, 33, 34, 43, 54, 55, 64, 70, 74, 86, 98, 146, 155, 160, 165, 166, 178, 226, 235, 240, 245, 246, 255, 289, 298, 302, 303, 307, 324, 345, 357, 365, 443, 452, 462, 463, 468, 469, 470, 555, 556, 560, 561, 562, 563, 564, 566], "directed_path_graph": [25, 29, 33, 34, 54, 55, 64, 70, 74, 165, 245, 303, 307, 359, 387, 391, 556, 562, 564, 566], "5": [25, 29, 33, 34, 54, 55, 64, 70, 74, 78, 86, 110, 155, 165, 166, 190, 235, 245, 246, 268, 302, 303, 307, 371, 401, 408, 409, 411, 412, 413, 421, 422, 423, 458, 462, 463, 470, 484, 559, 560, 563, 564, 566], "edg": [25, 29, 35, 43, 46, 50, 54, 55, 70, 74, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 140, 142, 143, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 220, 222, 223, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 286, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 307, 308, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 324, 326, 328, 330, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 357, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 440, 441, 443, 444, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 476, 479, 480, 481, 482, 484, 488, 490, 491, 492, 493, 496, 497, 499, 501, 502, 503, 504, 505, 508, 512, 513, 515, 519, 520, 521, 525, 526, 528, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 542, 544, 545, 546, 549, 550, 551, 552, 555, 556, 558, 560, 562, 563, 564], "all_pairs_dijkstra_shortest_path_length": 25, "third_node_shortest_path_length": 25, "pathmap": [29, 321, 562], "third_node_shortest_path": 29, "sequenc": [33, 34, 43, 54, 55, 64, 307, 323, 325, 380, 469, 500, 556, 561, 562, 563, 564, 566], "tupl": [33, 34, 50, 55, 82, 89, 90, 98, 101, 104, 105, 107, 108, 121, 126, 127, 143, 164, 169, 170, 178, 181, 184, 185, 187, 188, 201, 206, 207, 223, 244, 248, 249, 255, 256, 259, 262, 263, 265, 266, 275, 279, 280, 288, 301, 307, 327, 329, 331, 344, 358, 359, 360, 364, 375, 383, 384, 385, 387, 405, 445, 446, 447, 451, 461, 468, 473, 474, 475, 477, 478, 484, 490, 491, 501, 514, 516, 518, 521, 525, 556, 560, 561, 562], "predecessor_a": 33, "predecessor_b": 33, "payload": [33, 34, 50, 86, 90, 100, 109, 110, 114, 115, 128, 129, 130, 131, 132, 134, 151, 156, 157, 161, 162, 163, 164, 165, 166, 170, 180, 189, 190, 194, 195, 208, 209, 210, 211, 212, 214, 231, 236, 237, 241, 242, 243, 244, 245, 246, 247, 248, 249, 257, 265, 266, 267, 268, 281, 295, 296, 297, 299, 300, 301, 302, 307, 329, 333, 334, 359, 369, 371, 378, 379, 381, 389, 399, 401, 446, 456, 458, 466, 467, 471, 480, 484, 496, 497, 502, 506, 508, 512, 520, 531, 555, 556, 561, 562, 563, 564], "index": [33, 34, 43, 50, 54, 55, 64, 86, 87, 88, 91, 93, 94, 95, 98, 99, 101, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 166, 167, 168, 171, 173, 174, 175, 178, 179, 181, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 241, 242, 243, 246, 247, 250, 252, 255, 256, 258, 259, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 288, 290, 291, 292, 293, 294, 295, 296, 299, 300, 304, 307, 314, 315, 316, 318, 320, 321, 322, 323, 325, 328, 330, 332, 337, 338, 343, 344, 352, 353, 354, 355, 361, 363, 364, 367, 368, 372, 378, 379, 393, 394, 438, 439, 440, 441, 448, 450, 451, 454, 455, 462, 466, 467, 483, 490, 491, 496, 497, 498, 507, 521, 525, 560, 561, 562, 563, 564, 566], "iter": [33, 34, 43, 54, 55, 64, 65, 70, 74, 99, 129, 130, 131, 132, 134, 155, 157, 179, 209, 210, 211, 212, 214, 235, 237, 256, 296, 303, 307, 344, 364, 371, 379, 386, 391, 401, 451, 458, 467, 476, 482, 484, 497, 499, 512, 519, 533, 561, 562, 564], "wrap": [33, 34, 43, 54, 55, 64, 70, 74, 307, 562], "yield": [33, 34, 43, 54, 55, 64, 65, 70, 74, 307, 562], "order": [33, 34, 43, 54, 55, 64, 65, 70, 74, 99, 112, 157, 179, 192, 237, 248, 256, 266, 269, 296, 303, 304, 307, 323, 325, 339, 340, 341, 342, 344, 357, 364, 365, 366, 376, 377, 380, 391, 407, 410, 443, 451, 452, 453, 464, 465, 469, 482, 488, 489, 493, 499, 500, 512, 533, 534, 541, 547, 562, 564, 566], "bfs_succ": [33, 34], "third_el": [33, 34, 54, 55, 64, 70, 74, 307], "bfs_iter": [33, 34], "first_el": [33, 34, 54, 55, 64, 307], "second_el": [33, 34, 54, 55, 64, 307], "successor_a": 34, "successor_b": 34, "repres": [35, 50, 55, 65, 74, 78, 82, 86, 156, 157, 166, 236, 237, 295, 296, 307, 310, 311, 312, 313, 314, 318, 320, 321, 328, 330, 348, 349, 350, 351, 352, 354, 355, 366, 367, 368, 369, 380, 381, 384, 386, 391, 392, 393, 394, 402, 434, 435, 436, 437, 438, 440, 441, 453, 454, 455, 456, 462, 468, 469, 471, 474, 476, 478, 482, 500, 505, 508, 512, 516, 519, 525, 533, 558, 562, 564], "endpoint": [35, 55, 121, 128, 201, 208, 256, 275, 279, 280, 281, 288, 307, 322, 326, 356, 442, 490, 562, 566], "biconnect": [35, 317, 326, 562], "compon": [35, 317, 324, 326, 328, 330, 332, 336, 344, 345, 357, 361, 364, 365, 366, 392, 443, 448, 451, 452, 453, 503, 507, 510, 511, 522, 557, 562], "belong": [35, 326, 523, 562], "float": [39, 46, 70, 116, 117, 196, 197, 270, 271, 308, 310, 311, 312, 313, 314, 318, 320, 321, 327, 331, 341, 342, 346, 348, 349, 350, 351, 352, 354, 355, 358, 360, 366, 367, 368, 369, 371, 373, 374, 375, 378, 379, 383, 384, 385, 386, 388, 390, 392, 393, 394, 397, 398, 399, 401, 402, 403, 404, 405, 432, 434, 435, 436, 437, 438, 440, 441, 445, 447, 453, 454, 455, 456, 458, 459, 460, 461, 466, 467, 473, 474, 475, 476, 479, 481, 484, 496, 497, 502, 503, 504, 505, 512, 513, 514, 516, 518, 519, 520, 521, 526, 529, 530, 532, 556, 560, 561, 562, 563], "between": [39, 46, 86, 88, 94, 95, 103, 105, 118, 119, 129, 130, 131, 132, 134, 147, 149, 151, 152, 153, 157, 161, 162, 166, 168, 174, 175, 183, 185, 198, 199, 209, 210, 211, 212, 214, 227, 229, 231, 232, 233, 237, 241, 242, 246, 247, 248, 249, 252, 256, 261, 263, 265, 266, 272, 273, 277, 290, 292, 296, 299, 303, 308, 309, 314, 315, 318, 322, 332, 346, 347, 352, 353, 354, 356, 361, 370, 371, 374, 375, 379, 386, 389, 390, 391, 397, 398, 399, 400, 401, 404, 405, 410, 412, 414, 416, 417, 419, 420, 425, 432, 433, 438, 439, 440, 442, 448, 457, 458, 460, 461, 467, 468, 476, 480, 481, 482, 483, 484, 497, 499, 502, 512, 513, 519, 520, 529, 530, 531, 532, 533, 542, 558, 559, 560, 561, 562, 564, 565, 566], "score": [39, 46, 322, 356, 370, 371, 379, 400, 401, 442, 457, 458, 467, 484, 497, 512, 548, 562], "edgelist": [43, 104, 184, 262, 330, 344, 364, 372, 451, 478, 561, 562], "instanc": [43, 99, 155, 166, 179, 235, 246, 256, 303, 564], "hexagonal_lattice_graph": [43, 562, 563], "third_chain": 43, "chains_it": 43, "first_chain": 43, "second_chain": 43, "weight": [50, 86, 98, 99, 100, 101, 104, 107, 108, 112, 114, 115, 116, 117, 135, 146, 151, 152, 153, 155, 156, 157, 161, 162, 163, 164, 165, 166, 178, 179, 180, 181, 184, 187, 188, 192, 194, 195, 196, 197, 215, 226, 231, 232, 233, 235, 236, 237, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 256, 257, 259, 262, 265, 266, 269, 270, 271, 289, 295, 296, 297, 299, 300, 301, 302, 307, 308, 310, 311, 312, 313, 314, 319, 320, 321, 329, 333, 334, 339, 340, 341, 342, 346, 348, 349, 350, 351, 352, 354, 355, 359, 366, 367, 368, 369, 371, 373, 374, 375, 378, 379, 386, 389, 392, 393, 394, 395, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 418, 419, 420, 422, 424, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 440, 441, 446, 453, 454, 455, 456, 458, 459, 460, 461, 466, 467, 476, 480, 484, 497, 501, 502, 503, 504, 512, 519, 520, 521, 531, 555, 556, 558, 560, 561, 562, 564, 566], "effici": [50, 78, 380, 397, 469, 500, 501, 529, 562], "behav": [50, 78, 86, 99, 179, 256, 309, 315, 347, 353, 433, 439, 566], "drop": [50, 78, 559, 562], "replac": [50, 78, 99, 156, 157, 179, 236, 237, 256, 295, 296, 559, 562, 564, 566], "readonli": [50, 78], "edge_indic": [54, 562, 566], "edges_it": [54, 55, 70, 74, 307], "node_index_a": [55, 307], "node_index_b": [55, 307], "edge_list": [55, 105, 107, 108, 165, 185, 187, 188, 245, 256, 263, 265, 266, 302, 468, 556, 561, 562], "node_indic": [64, 86, 137, 166, 217, 246, 283, 462, 468, 562, 563, 566], "nodes_it": 64, "though": [65, 303], "unord": [65, 157, 237, 296, 479, 566], "when": [65, 86, 88, 90, 98, 99, 118, 119, 120, 121, 122, 134, 157, 161, 162, 163, 166, 168, 170, 178, 179, 198, 199, 200, 201, 202, 214, 237, 241, 242, 243, 246, 249, 255, 256, 272, 273, 274, 275, 276, 296, 299, 300, 303, 310, 311, 314, 320, 321, 348, 349, 350, 351, 352, 354, 355, 367, 368, 371, 378, 379, 393, 396, 397, 401, 402, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 440, 441, 454, 455, 458, 466, 467, 484, 497, 498, 499, 502, 506, 507, 512, 515, 520, 528, 529, 536, 543, 548, 555, 559, 561, 562, 566], "sort": [65, 303, 499, 523, 524, 562, 564], "24": [70, 558, 562], "first_target": [70, 74], "first_path": [70, 74], "second_target": [70, 74], "second_path": [70, 74], "node_c": [74, 98, 178, 255, 468, 562], "node_a": [74, 98, 103, 118, 119, 123, 178, 183, 198, 199, 203, 247, 248, 249, 255, 261, 265, 266, 272, 273, 277, 290, 468, 561, 562], "node_b": [74, 98, 103, 118, 119, 123, 178, 183, 198, 199, 203, 247, 248, 249, 255, 261, 265, 266, 272, 273, 277, 290, 468, 561, 562], "2d": 78, "posit": [78, 134, 157, 214, 237, 296, 310, 311, 312, 313, 327, 331, 339, 340, 341, 342, 348, 349, 350, 351, 358, 360, 376, 377, 383, 384, 385, 386, 391, 434, 435, 436, 437, 445, 447, 464, 465, 473, 474, 475, 476, 482, 488, 489, 493, 513, 514, 516, 518, 519, 533, 556, 562], "direct": [86, 95, 103, 155, 161, 166, 175, 183, 235, 241, 303, 304, 316, 324, 343, 345, 346, 357, 362, 363, 365, 366, 369, 373, 374, 375, 376, 377, 386, 388, 389, 390, 396, 397, 398, 399, 405, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 476, 495, 499, 501, 506, 511, 515, 519, 522, 525, 527, 532, 539, 556, 557, 559, 561, 562, 565], "acycl": [86, 166, 525, 559, 562, 565], "alia": [86, 562], "ident": [86, 134, 137, 151, 152, 214, 217, 231, 232, 283, 406, 561, 562, 566], "interchang": 86, "sole": [86, 562], "backward": [86, 137, 217, 283, 357, 365, 366, 443, 452, 453, 562], "4": [86, 98, 110, 165, 166, 178, 190, 245, 246, 255, 268, 302, 303, 309, 310, 311, 312, 313, 347, 348, 349, 350, 351, 373, 374, 375, 380, 388, 397, 403, 404, 405, 406, 407, 410, 418, 423, 428, 429, 433, 459, 460, 461, 462, 463, 469, 470, 478, 479, 500, 517, 521, 526, 529, 559, 561, 563, 566], "multigraph": [86, 88, 94, 95, 99, 105, 161, 166, 168, 174, 175, 179, 185, 241, 246, 247, 248, 249, 252, 256, 263, 265, 266, 335, 362, 371, 379, 396, 401, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 444, 449, 458, 467, 484, 497, 501, 512, 528, 559, 561, 562], "although": [86, 157, 166, 237, 246, 296, 562], "rare": [86, 166, 246], "stabl": [86, 166, 246, 380, 469, 500, 517, 562, 566], "lifetim": [86, 166, 246, 566], "hole": [86, 166, 246, 562, 566], "reus": [86, 166, 246, 566], "add_nodes_from": [86, 109, 110, 166, 189, 190, 246, 255, 267, 268, 561, 562, 564, 566], "rang": [86, 109, 110, 166, 189, 190, 246, 267, 268, 555, 562, 563, 564, 566], "remove_nod": [86, 166, 246, 566], "print": [86, 165, 166, 245, 246, 302, 303, 324, 345, 357, 365, 443, 452, 562, 563, 564, 566], "res_manu": [86, 166, 246], "add_par": [86, 88, 166, 168, 564], "6": [86, 166, 246, 371, 379, 386, 401, 416, 423, 426, 444, 458, 462, 463, 467, 470, 476, 497, 512, 519, 559, 564, 566], "none": [86, 90, 98, 99, 107, 108, 112, 134, 146, 151, 153, 156, 157, 160, 161, 165, 166, 170, 178, 179, 187, 188, 192, 214, 226, 231, 233, 236, 237, 240, 241, 245, 246, 249, 255, 256, 265, 266, 269, 289, 295, 296, 298, 302, 308, 309, 314, 315, 319, 320, 321, 324, 327, 330, 331, 333, 338, 339, 340, 344, 345, 346, 347, 352, 353, 355, 357, 358, 360, 364, 365, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 391, 393, 394, 395, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 418, 419, 420, 422, 424, 428, 429, 430, 431, 432, 433, 438, 439, 441, 443, 444, 445, 447, 451, 452, 453, 454, 458, 459, 460, 461, 462, 464, 465, 466, 467, 469, 471, 474, 475, 476, 478, 482, 484, 488, 493, 496, 497, 499, 500, 501, 503, 504, 508, 512, 513, 514, 516, 518, 519, 521, 527, 528, 529, 530, 533, 555, 556, 561, 562, 564, 566], "ad": [86, 88, 89, 90, 98, 107, 108, 134, 135, 152, 153, 155, 161, 166, 168, 169, 170, 178, 187, 188, 214, 215, 232, 233, 235, 241, 246, 248, 249, 255, 265, 266, 319, 395, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 491, 561, 562, 564, 566], "new": [86, 87, 88, 89, 90, 91, 92, 93, 98, 99, 105, 116, 117, 134, 135, 146, 152, 153, 155, 156, 161, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 185, 196, 197, 214, 215, 226, 232, 233, 235, 236, 241, 246, 248, 249, 250, 251, 255, 256, 263, 270, 271, 289, 295, 297, 305, 319, 329, 359, 379, 387, 389, 395, 446, 467, 468, 477, 480, 497, 504, 531, 560, 561, 564, 566], "nodeindic": [86, 92, 110, 136, 137, 138, 144, 158, 166, 172, 190, 216, 217, 218, 224, 238, 246, 251, 268, 282, 283, 284, 318, 339, 341, 354, 380, 402, 440, 469, 495, 500, 521, 524, 562, 566], "arbitrari": [86, 166, 246, 372, 402], "data_payload": [86, 166, 246], "node_index": [86, 126, 143, 166, 206, 223, 246, 279, 288, 562], "add_nod": [86, 98, 99, 166, 178, 179, 246, 256, 468, 560, 561, 562, 564, 566], "real": [86, 166, 561, 564], "introduc": [86, 99, 166, 179, 256, 562, 564, 566], "By": [86, 116, 117, 127, 128, 151, 156, 166, 196, 197, 207, 208, 231, 236, 246, 270, 271, 295, 303, 308, 309, 315, 346, 347, 353, 369, 377, 390, 399, 432, 433, 439, 456, 465, 481, 493, 512, 532, 534, 541, 547, 555, 556, 562, 566], "disabl": [86, 166, 246, 303, 562], "check_cycl": [86, 99, 166, 179, 303, 562, 564], "attribut": [86, 88, 156, 160, 166, 168, 236, 240, 246, 295, 298, 362, 381, 449, 471, 506, 508, 513, 515, 555, 556, 559, 562, 564], "true": [86, 88, 95, 98, 99, 114, 115, 123, 124, 127, 128, 133, 146, 151, 153, 156, 157, 161, 166, 168, 175, 178, 179, 194, 195, 203, 204, 207, 208, 213, 226, 231, 233, 236, 237, 241, 255, 277, 278, 289, 295, 296, 303, 306, 318, 321, 322, 327, 332, 333, 335, 354, 356, 358, 361, 362, 368, 369, 370, 373, 374, 375, 376, 377, 385, 386, 389, 390, 391, 394, 399, 400, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 440, 442, 445, 448, 449, 455, 457, 464, 465, 475, 476, 480, 481, 482, 483, 484, 485, 487, 488, 489, 493, 498, 499, 501, 505, 506, 518, 519, 531, 532, 533, 556, 561, 562, 563, 564, 566], "creation": [86, 166, 246, 559, 566], "With": [86, 166, 561, 562, 564], "add_edg": [86, 126, 143, 166, 206, 223, 255, 279, 288, 468, 561, 562, 564, 566], "truli": [86, 166], "note": [86, 94, 95, 134, 147, 149, 156, 161, 166, 174, 175, 214, 227, 229, 236, 241, 252, 273, 290, 292, 295, 326, 329, 339, 340, 341, 342, 359, 377, 389, 426, 446, 462, 465, 480, 493, 501, 531, 555, 556, 559, 560, 561, 566], "add_edges_from": [86, 90, 108, 109, 166, 170, 188, 189, 249, 255, 266, 267, 560, 561, 562, 566], "add_edges_from_no_data": [86, 107, 166, 187, 265, 561, 562], "extend_from_edge_list": [86, 166, 324, 345, 357, 365, 443, 452, 561, 562, 566], "extend_from_weighted_edge_list": [86, 155, 166, 235, 561, 562], "come": [86, 166, 499, 558, 564], "penalti": [86, 166], "grow": [86, 166], "leverag": [86, 160, 166, 240, 298, 559, 562, 563, 566], "add_child": [86, 88, 98, 166, 168, 178, 564], "overhead": [86, 166, 564], "parallel": [86, 99, 105, 124, 134, 161, 162, 166, 179, 185, 204, 214, 241, 242, 246, 248, 256, 263, 266, 278, 299, 317, 322, 326, 328, 330, 335, 337, 338, 346, 356, 362, 363, 369, 370, 371, 373, 374, 375, 379, 380, 388, 390, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 442, 449, 450, 456, 457, 458, 459, 460, 461, 467, 469, 478, 479, 481, 484, 497, 500, 501, 512, 526, 532, 562, 566], "kwarg": [86, 127, 128, 151, 166, 207, 208, 231, 246, 555, 556, 561, 562], "fals": [86, 95, 99, 109, 123, 124, 127, 128, 146, 151, 153, 156, 161, 166, 175, 179, 189, 203, 204, 207, 208, 226, 231, 233, 236, 241, 246, 247, 248, 249, 265, 266, 267, 277, 278, 289, 295, 303, 306, 314, 321, 322, 327, 333, 334, 352, 356, 358, 369, 373, 374, 375, 376, 377, 385, 386, 389, 390, 391, 394, 399, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 445, 464, 465, 475, 476, 480, 481, 482, 483, 485, 487, 488, 489, 493, 498, 499, 501, 505, 506, 518, 519, 531, 532, 533, 556, 561, 562, 564, 566], "constructor": [86, 166, 246, 556, 562, 564, 566], "initi": [86, 166, 246, 303, 304, 305, 319, 330, 345, 365, 386, 395, 452, 476, 499, 519, 561, 562], "maximum": [86, 166, 246, 309, 315, 346, 347, 353, 371, 379, 380, 386, 396, 401, 407, 410, 432, 433, 439, 458, 467, 469, 470, 476, 484, 491, 497, 500, 501, 512, 519, 528, 556, 562], "32": [86, 166, 246, 555, 560, 562], "294": [86, 166, 246], "967": [86, 166, 246], "attempt": [86, 166, 246, 562, 564, 566], "than": [86, 112, 146, 166, 192, 226, 246, 269, 289, 306, 322, 326, 332, 356, 361, 370, 371, 377, 379, 380, 381, 396, 400, 401, 407, 410, 414, 422, 424, 442, 448, 457, 458, 465, 467, 469, 471, 478, 484, 493, 497, 500, 501, 508, 512, 517, 521, 525, 528, 561, 562, 563], "paramet": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 258, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 303, 304, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 555, 556, 557, 561, 562], "bool": [86, 95, 99, 123, 124, 127, 128, 133, 146, 151, 153, 161, 166, 175, 179, 203, 204, 207, 208, 213, 226, 231, 233, 241, 246, 277, 278, 289, 303, 321, 322, 327, 332, 356, 358, 361, 368, 369, 370, 376, 377, 385, 386, 389, 390, 391, 394, 399, 400, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 445, 448, 455, 457, 464, 465, 475, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 498, 499, 501, 505, 506, 518, 519, 531, 532, 533, 556], "runtim": [86, 166, 380, 469, 500, 562, 564], "detect": [86, 124, 166, 204, 278, 303, 562], "multgraph": 86, "place": [86, 155, 166, 235, 246, 299, 300, 319, 395, 513, 562, 566], "attr": [86, 156, 166, 236, 246, 295, 381, 471, 508, 515, 561, 562, 566], "digraph": [86, 166, 346, 561], "dagwouldcycl": [86, 99, 166, 179], "parent": [87, 88, 89, 90, 93, 95, 114, 126, 145, 147, 167, 168, 169, 170, 173, 175, 194, 206, 225, 227, 247, 249, 279, 290, 323, 325, 562], "obj": [87, 89, 91, 93, 99, 112, 167, 169, 171, 173, 179, 192, 248, 250, 256, 269], "child": [87, 88, 89, 90, 93, 115, 143, 147, 159, 167, 168, 169, 170, 173, 195, 223, 227, 239, 247, 249, 288, 290], "int": [87, 88, 89, 90, 91, 92, 93, 94, 95, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 237, 238, 239, 242, 243, 247, 248, 249, 250, 251, 252, 258, 269, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 288, 290, 291, 293, 296, 299, 300, 303, 304, 309, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 330, 338, 340, 341, 342, 343, 344, 345, 347, 352, 353, 354, 355, 356, 357, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 386, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 438, 439, 440, 441, 442, 443, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 472, 473, 476, 478, 481, 482, 483, 484, 488, 493, 496, 497, 499, 501, 507, 509, 510, 511, 512, 513, 514, 519, 528, 529, 530, 532, 533, 556, 562], "attach": [87, 89, 90, 91, 92, 93, 167, 169, 170, 171, 172, 173, 248, 249, 250, 251, 319, 395, 561, 562], "duplic": [88, 168, 562], "obj_list": [89, 90, 92, 169, 170, 172, 248, 249, 251, 266], "neighbor": [94, 95, 114, 115, 144, 145, 158, 159, 174, 175, 194, 195, 224, 225, 238, 239, 252, 280, 344, 364, 451, 495, 561, 562], "dictionari": [94, 95, 98, 160, 174, 175, 178, 240, 252, 255, 298, 310, 311, 312, 313, 320, 321, 322, 326, 329, 332, 337, 348, 349, 350, 351, 355, 359, 361, 363, 367, 368, 373, 378, 379, 381, 386, 387, 393, 394, 403, 434, 435, 436, 437, 441, 444, 446, 448, 450, 454, 455, 459, 462, 463, 466, 467, 468, 470, 471, 476, 477, 496, 497, 506, 508, 512, 519, 527, 555, 556, 561, 562], "adjac": [94, 95, 111, 116, 117, 174, 175, 191, 196, 197, 252, 270, 271, 308, 346, 432, 468, 561, 562], "inbound": [94, 95, 125, 174, 175, 205, 252, 258], "outbound": [94, 95, 142, 174, 175, 222, 252, 562], "dat": [94, 174], "two": [94, 95, 135, 146, 151, 161, 174, 175, 215, 226, 231, 241, 256, 289, 314, 327, 329, 331, 333, 352, 358, 359, 360, 371, 374, 375, 379, 383, 384, 385, 387, 389, 391, 397, 398, 401, 404, 405, 406, 412, 419, 420, 438, 445, 446, 447, 458, 460, 461, 467, 468, 473, 474, 475, 477, 480, 482, 484, 490, 497, 512, 513, 514, 516, 518, 521, 527, 529, 530, 531, 533, 558, 562, 566], "share": [94, 95, 100, 174, 175, 180, 252, 256, 257, 389, 480, 490, 531, 562], "specifi": [94, 95, 99, 103, 105, 125, 129, 130, 131, 132, 134, 142, 147, 149, 157, 160, 161, 165, 166, 174, 175, 179, 183, 185, 205, 209, 210, 211, 212, 214, 222, 227, 229, 237, 240, 241, 245, 246, 252, 256, 258, 261, 263, 290, 292, 296, 298, 302, 308, 314, 319, 320, 321, 324, 327, 330, 344, 345, 346, 352, 355, 357, 358, 364, 365, 366, 367, 368, 371, 372, 376, 377, 378, 379, 381, 386, 390, 391, 392, 393, 394, 395, 401, 403, 404, 406, 408, 409, 411, 412, 414, 417, 418, 419, 420, 424, 427, 428, 429, 430, 431, 432, 438, 441, 443, 445, 451, 452, 453, 454, 455, 458, 462, 464, 465, 466, 467, 471, 476, 481, 482, 484, 488, 489, 493, 496, 497, 501, 503, 504, 508, 512, 513, 519, 521, 532, 533, 555, 556, 562, 566], "children": [95, 143, 175, 223, 323, 325, 422], "clear": [97, 177, 254, 562], "leav": [97, 99, 177, 179, 254, 256, 566], "intact": [97, 177, 254], "node_map": [98, 178, 255, 562], "node_map_func": [98, 178, 255], "edge_map_func": [98, 178, 255], "weight2": [98, 178, 255], "callabl": [98, 99, 111, 113, 134, 151, 153, 157, 160, 161, 165, 178, 179, 191, 193, 214, 231, 233, 237, 240, 241, 245, 255, 256, 296, 298, 302, 308, 310, 311, 312, 313, 318, 320, 339, 340, 341, 342, 346, 348, 349, 350, 351, 354, 355, 367, 371, 373, 374, 375, 376, 377, 378, 379, 381, 391, 393, 401, 402, 403, 404, 405, 432, 434, 435, 436, 437, 440, 441, 454, 458, 459, 460, 461, 462, 464, 465, 466, 467, 471, 482, 484, 488, 489, 493, 496, 497, 499, 501, 502, 503, 504, 505, 508, 512, 520, 521, 533, 555, 562], "singl": [98, 99, 111, 113, 134, 161, 178, 179, 191, 193, 214, 241, 252, 255, 256, 310, 311, 312, 313, 314, 320, 321, 322, 333, 334, 344, 348, 349, 350, 351, 352, 355, 356, 366, 367, 368, 370, 386, 392, 393, 394, 400, 415, 416, 425, 426, 434, 435, 436, 437, 438, 441, 442, 451, 453, 454, 455, 457, 476, 478, 479, 499, 501, 519, 520, 556, 559, 562, 563, 564, 566], "new_node_id": [98, 178, 255], "correspond": [98, 178, 374, 375, 404, 405, 460, 461, 468, 562, 566], "build": [98, 178, 255, 559, 560, 561, 562, 566], "visual": [98, 146, 160, 178, 226, 240, 255, 289, 298, 359, 387, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 446, 462, 477, 559, 562, 564, 566], "mpl_draw": [98, 146, 178, 226, 255, 289, 359, 387, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 446, 462, 477, 561, 562, 563, 564, 566], "b": [98, 109, 178, 189, 255, 267, 416, 426, 468, 560, 562, 564, 566], "c": [98, 109, 178, 189, 255, 267, 332, 361, 388, 448, 468, 470, 479, 484, 503, 558, 560, 561, 562, 564, 566], "with_label": [98, 178, 255, 556, 562, 566], "label": [98, 146, 178, 226, 255, 289, 326, 344, 364, 451, 556, 561, 562, 563, 564, 566], "str": [98, 146, 160, 165, 178, 226, 240, 245, 255, 289, 298, 302, 381, 471, 508, 515, 555, 556, 562, 564, 566], "edge_label": [98, 178, 255, 556, 561, 562, 566], "figur": [98, 146, 178, 226, 255, 289, 359, 387, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 446, 462, 477, 556, 562, 563, 564, 566], "size": [98, 146, 160, 178, 226, 240, 255, 289, 298, 359, 387, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 446, 462, 477, 520, 555, 556, 562, 563, 564, 566], "640x480": [98, 146, 178, 226, 255, 289, 359, 387, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 446, 462, 477, 556, 562, 563, 564, 566], "ax": [98, 146, 178, 226, 255, 289, 359, 387, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 446, 462, 477, 556, 562, 563, 564, 566], "second": [98, 118, 119, 162, 178, 198, 199, 242, 255, 272, 273, 277, 279, 280, 299, 329, 359, 375, 376, 377, 387, 389, 391, 405, 446, 461, 464, 465, 477, 480, 482, 484, 488, 489, 493, 531, 533, 558, 562, 566], "other_graph": [98, 178, 255, 562], "node_d": [98, 178, 255, 468, 562], "weight_combo_fn": [99, 161, 179, 241, 256, 562], "substitut": [99, 157, 179, 237, 256, 296], "ignor": [99, 105, 150, 152, 153, 154, 156, 179, 185, 230, 232, 233, 234, 236, 256, 263, 293, 294, 295, 333, 406, 408, 409, 411, 412, 414, 418, 419, 420, 424, 428, 429, 430, 431, 521, 564], "empti": [99, 127, 128, 179, 207, 208, 256, 280, 281, 305, 372, 380, 391, 396, 397, 413, 421, 469, 482, 486, 494, 500, 528, 529, 533, 562, 564, 566], "slower": [99, 179, 256], "associ": [99, 160, 179, 240, 256, 298, 555, 561, 562], "valid": [99, 179, 303, 304, 423, 462, 490, 491, 556, 562], "contract": [99, 179, 256, 562], "inherit": [99, 179], "merg": [99, 135, 179, 215, 256, 389, 480, 531, 562], "occur": [99, 179, 248, 256, 266, 339, 340, 341, 342, 501], "incom": [99, 127, 128, 151, 152, 153, 179, 207, 208, 231, 232, 233, 303, 339, 340, 341, 342, 562], "outgo": [99, 127, 128, 151, 152, 153, 179, 207, 208, 231, 232, 233, 562], "unspecifi": [99, 179, 256], "choos": [99, 179, 256, 556, 561], "arbitrarili": [99, 179, 256], "subject": [99, 179, 256], "shallow": [100, 180, 257, 562], "origin": [100, 129, 130, 131, 132, 161, 180, 209, 210, 211, 212, 241, 257, 353, 366, 392, 439, 453, 525, 559, 561, 562, 564], "edgeindexmap": [101, 127, 181, 207, 259, 280, 562, 566], "edgeindic": [102, 103, 109, 128, 182, 183, 189, 208, 260, 261, 267, 281, 562, 566], "induc": [105, 185, 263, 377, 391, 465, 482, 493, 520, 533, 562], "subgraph": [105, 185, 263, 326, 337, 363, 377, 391, 450, 465, 482, 488, 493, 498, 520, 533, 559, 562], "incid": [105, 127, 128, 185, 207, 208, 263, 280, 281, 317, 326, 562, 566], "silent": [105, 156, 185, 236, 263, 295], "extend": [107, 108, 187, 188, 265, 266, 319, 395, 562], "present": [107, 108, 120, 121, 127, 128, 134, 150, 151, 152, 153, 154, 156, 163, 187, 188, 200, 201, 207, 208, 214, 230, 231, 232, 233, 234, 236, 243, 265, 266, 274, 275, 280, 281, 293, 294, 295, 300, 380, 469, 500], "filter_funct": [109, 110, 189, 190, 267, 268], "filter": [109, 110, 114, 115, 189, 190, 194, 195, 267, 268, 333, 334, 562], "criteria": [109, 110, 189, 190, 267, 268, 562], "boolean": [109, 110, 111, 113, 114, 115, 189, 190, 191, 193, 194, 195, 267, 268, 318, 333, 334, 354, 391, 440, 482, 484, 501, 533, 562], "fit": [109, 110, 189, 190, 267, 268, 562], "complete_graph": [109, 189, 267, 428, 562], "def": [109, 110, 189, 190, 267, 268, 324, 345, 357, 365, 375, 405, 443, 452, 461, 555, 561, 562, 563, 564, 566], "my_filter_funct": [109, 110, 189, 190, 267, 268, 562], "assert": [109, 110, 155, 189, 190, 235, 267, 268, 463, 468, 470, 561, 562], "predic": [111, 113, 191, 193], "within": [112, 192, 269, 520, 562], "worst": [112, 192, 269], "o": [112, 151, 152, 153, 160, 165, 192, 231, 232, 233, 240, 245, 255, 269, 298, 302, 378, 389, 396, 397, 444, 466, 480, 496, 501, 528, 529, 531, 556, 562], "equal": [112, 135, 151, 153, 192, 215, 231, 233, 269, 309, 310, 311, 312, 313, 347, 348, 349, 350, 351, 373, 374, 375, 376, 377, 380, 388, 389, 403, 404, 405, 433, 459, 460, 461, 464, 465, 469, 478, 479, 480, 488, 489, 493, 500, 526, 531, 562], "found": [112, 192, 269, 339, 340, 341, 342, 344, 364, 372, 380, 391, 451, 469, 482, 499, 500, 501, 517, 533, 560, 562, 563, 564], "predecessor": [113, 114, 129, 130, 144, 151, 152, 153, 193, 194, 209, 210, 224, 231, 232, 233, 305, 316, 323, 542, 562], "filter_fn": [114, 115, 194, 195, 333, 334, 564], "whose": [114, 115, 194, 195, 317, 328, 356, 370, 371, 379, 398, 400, 401, 442, 457, 458, 467, 484, 497, 498, 512, 520, 530, 535, 538, 562], "successor": [115, 131, 132, 136, 151, 152, 153, 158, 195, 211, 212, 216, 231, 232, 233, 238, 304, 325, 334, 343, 375, 405, 461, 562], "static": [116, 117, 146, 196, 197, 226, 270, 271, 289, 561, 562], "matrix": [116, 117, 196, 197, 270, 271, 308, 346, 369, 374, 375, 390, 399, 404, 405, 432, 456, 460, 461, 481, 512, 532, 562, 564], "null_valu": [116, 117, 196, 197, 270, 271, 308, 346, 369, 399, 432, 456, 562], "element": [116, 117, 146, 196, 197, 226, 270, 271, 280, 289, 329, 359, 369, 387, 409, 412, 419, 420, 430, 431, 446, 456, 477, 562], "construct": [116, 117, 166, 196, 197, 246, 270, 271, 468, 470, 498, 562, 566], "input": [116, 117, 151, 196, 197, 231, 270, 271, 304, 308, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 326, 328, 329, 330, 332, 337, 338, 339, 340, 341, 342, 344, 346, 348, 349, 350, 351, 354, 355, 356, 359, 361, 363, 367, 369, 370, 371, 372, 379, 387, 388, 389, 390, 393, 394, 395, 399, 400, 401, 402, 407, 410, 432, 434, 435, 436, 437, 440, 441, 442, 444, 446, 448, 450, 451, 454, 457, 458, 462, 463, 467, 468, 470, 477, 478, 479, 480, 483, 484, 487, 495, 497, 502, 505, 506, 512, 515, 521, 522, 526, 527, 531, 532, 561, 562, 564, 566], "from_complex_adjacency_matrix": [116, 196, 270, 562], "numpi": [116, 117, 196, 197, 270, 271, 308, 346, 369, 374, 375, 399, 404, 405, 432, 456, 460, 461, 560, 561, 562], "float64": [116, 117, 196, 197, 270, 271, 561, 562], "complex": [116, 117, 151, 152, 153, 196, 197, 231, 232, 233, 270, 271, 388, 396, 528, 559, 562], "complex128": [116, 117, 196, 197, 270, 271], "ndarrai": [116, 117, 196, 197, 270, 271, 308, 346, 369, 374, 375, 399, 404, 405, 432, 456, 460, 461], "arrai": [116, 117, 196, 197, 270, 271, 308, 346, 432, 556, 561, 562], "dimension": [116, 117, 196, 197, 270, 271, 561, 562], "np": [116, 117, 196, 197, 270, 271, 374, 375, 397, 404, 405, 460, 461, 462, 529, 561, 562], "null": [116, 117, 196, 197, 270, 271, 308, 346, 369, 399, 432, 456, 562], "0j": [117, 197, 271, 562], "from_adjacency_matrix": [117, 197, 271, 561, 562, 566], "noedgebetweennod": [118, 119, 147, 149, 162, 198, 199, 227, 229, 242, 272, 273, 290, 292, 299], "edge_index": [120, 121, 163, 200, 201, 243, 274, 275, 300, 566], "indexerror": [120, 121, 122, 163, 200, 201, 202, 243, 274, 275, 276, 300, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 562], "invalid": [122, 202, 276, 303, 337, 462, 507, 526, 562], "destin": [123, 203, 321, 368, 378, 394, 435, 437, 455, 466, 496, 562], "degre": [125, 142, 205, 222, 303, 319, 337, 363, 395, 450, 462, 470, 495, 499, 561, 562, 566], "recreat": [126, 143, 206, 223, 279, 288, 562], "param": [126, 206, 322, 356, 370, 400, 442, 457], "parent_index": [126, 206, 279], "edge_data": [126, 143, 206, 223, 279, 288], "weightededgelist": [126, 143, 164, 206, 223, 244, 279, 288, 301, 503, 562], "all_edg": [127, 128, 207, 208], "later": [128, 208, 281], "retriev": [128, 208, 281, 391, 482, 533, 562], "get_edge_data_by_index": [128, 208, 281, 562, 566], "get_edge_endpoints_by_index": [128, 208, 281, 562, 566], "ref_nod": [129, 130, 131, 132, 209, 210, 211, 212], "essenti": [129, 130, 131, 132, 209, 210, 211, 212], "copi": [129, 130, 131, 132, 134, 156, 157, 209, 210, 211, 212, 214, 236, 237, 295, 296, 297, 561, 562], "symmetr": [133, 134, 213, 214, 562], "edge_payload_fn": [134, 214], "make": [134, 214, 311, 313, 321, 349, 351, 368, 394, 435, 437, 455, 556, 560, 562, 564, 566], "revers": [134, 214, 303, 499, 561, 562], "guarante": [134, 153, 214, 233, 371, 379, 380, 401, 458, 467, 469, 484, 497, 500, 512, 523, 561, 562, 563, 566], "execut": [134, 214, 373, 374, 375, 380, 403, 404, 405, 459, 460, 461, 469, 500, 562, 564], "edge_payload": [134, 214], "typic": [134, 214, 561, 566], "lower": [134, 214, 385, 397, 475, 518, 529, 562], "v": [135, 215, 322, 324, 332, 344, 345, 356, 357, 361, 364, 365, 366, 370, 378, 390, 392, 400, 442, 443, 448, 451, 452, 453, 457, 466, 481, 496, 499, 525, 532, 536, 537, 542, 543, 544, 548, 552, 556, 562, 563, 564], "successor_indic": [136, 216, 562], "prefer": [137, 217, 283], "earlier": [137, 217, 283, 357, 365, 366, 443, 452, 453, 564], "child_index": [143, 223, 288], "indici": [144, 154, 158, 224, 234, 238, 282, 294], "delimin": [146, 165, 226, 245, 289, 302], "file": [146, 160, 165, 226, 240, 245, 289, 298, 302, 381, 471, 508, 515, 555, 561, 562, 566], "seper": [146, 226, 289], "3rd": [146, 226, 289], "charact": [146, 165, 226, 245, 289, 302], "whitespac": [146, 226, 289, 562], "separ": [146, 226, 289, 555, 561, 562], "field": [146, 226, 289, 381, 471, 508, 515], "uniqu": [146, 226, 289, 408, 411, 561, 562, 566], "identifi": [146, 148, 226, 228, 280, 289, 291, 562, 566], "tempfil": [146, 160, 165, 226, 240, 245, 255, 289, 298, 302, 562, 566], "namedtemporaryfil": [146, 226, 289, 562, 566], "wt": [146, 226, 289, 562, 566], "fd": [146, 226, 289, 562, 566], "flush": [146, 226, 289, 562, 566], "index_list": [149, 154, 229, 234, 292, 294], "pair": [149, 152, 153, 229, 232, 233, 292, 297, 309, 322, 328, 347, 356, 370, 373, 374, 375, 380, 386, 390, 400, 403, 404, 405, 408, 411, 433, 442, 457, 459, 460, 461, 469, 476, 479, 481, 500, 519, 520, 532, 559, 562, 563, 566], "effect": [150, 151, 152, 153, 230, 231, 232, 233, 293, 396, 528], "use_outgo": [151, 153, 231, 233], "retain": [151, 231, 562], "minimum": [151, 152, 153, 231, 232, 233, 309, 315, 346, 347, 353, 432, 433, 439, 503, 504, 520, 521, 556, 562], "mathcal": [151, 152, 153, 231, 232, 233, 389, 480, 531, 562], "e_i": [151, 152, 153, 231, 232, 233], "e_o": [151, 152, 153, 231, 232, 233], "respect": [151, 231, 330, 389, 396, 397, 480, 528, 529, 531, 558, 561, 562, 564], "cast": [151, 231, 308, 346, 373, 374, 375, 403, 404, 405, 432, 459, 460, 461, 502, 503, 504, 520, 556, 562], "hashabl": [151, 153, 231, 233, 561, 562, 566], "quantiti": [151, 231], "remove_node_retain_edges_by_kei": [151, 231, 562], "referenti": [151, 231, 562], "remove_node_retain_edges_by_id": [151, 231, 562], "ingor": [151, 231, 562], "willl": [151, 231], "lambda": [151, 160, 231, 240, 298, 308, 339, 340, 341, 342, 346, 373, 374, 375, 376, 377, 380, 403, 404, 405, 415, 416, 425, 426, 432, 459, 460, 461, 464, 465, 469, 488, 489, 493, 500, 501, 503, 504, 521, 556, 561, 562, 564], "in_edg": [151, 231, 562], "out_edg": [151, 231, 562, 564], "had": [151, 231, 303, 304, 562], "consequ": [152, 153, 232, 233], "exact": [153, 233, 562], "determinist": [153, 157, 233, 237, 296, 562], "drawn": [153, 233, 492, 556], "exactli": [153, 233, 333, 562], "position": [153, 233], "relev": [153, 233, 562, 563], "opposit": [155, 235, 499], "weighted_edge_list": [155, 235, 307, 561, 562], "preserve_attr": [156, 236, 295], "edge_map_fn": [157, 237, 296, 562], "node_filt": [157, 237, 296], "edge_weight_map": [157, 237, 296], "nodemap": [157, 237, 296, 391, 482, 533, 562], "succesor": [158, 238], "node_attr": [160, 240, 298, 381, 471, 508, 555, 562], "edge_attr": [160, 240, 298, 381, 471, 508, 562], "graph_attr": [160, 240, 298, 381, 471, 508, 555], "filenam": [160, 240, 298, 555], "dot": [160, 240, 298, 555, 562], "typeerror": [160, 165, 240, 245, 298, 302, 337, 357, 365, 366, 417, 423, 427, 443, 452, 453, 526, 562], "unfortun": [160, 240, 298], "graphviz": [160, 240, 298, 555, 561, 562, 563, 566], "pydot": [160, 240, 255, 298, 555, 561, 562], "pil": [160, 240, 255, 298, 415, 416, 425, 426, 555, 562, 563, 564, 566], "directed_gnp_random_graph": [160, 240, 562], "15": [160, 240, 298, 422, 423, 520, 562, 563], "25": [160, 240, 298, 322, 356, 442, 556, 562], "dot_str": [160, 240, 298, 562], "fillcolor": [160, 240, 298, 415, 416, 425, 426, 555, 562, 563], "lightblu": [160, 240, 298, 415, 416, 425, 426, 562], "style": [160, 240, 298, 415, 416, 425, 426, 555, 556, 562, 563, 566], "fill": [160, 240, 298, 414, 415, 416, 424, 425, 426, 555, 562, 563, 566], "graph_from_dot_data": [160, 240, 298, 562], "temporarydirectori": [160, 240, 298, 562], "tmpdirnam": [160, 240, 298, 562], "tmp_path": [160, 240, 298, 562], "join": [160, 165, 240, 245, 298, 302, 406, 513, 562], "png": [160, 240, 298, 555, 562], "write_png": [160, 240, 298, 562], "pngimageplugin": [160, 240, 298, 415, 416, 425, 426, 555, 562, 563, 564, 566], "pngimagefil": [160, 240, 298, 415, 416, 425, 426, 555, 562, 563, 564, 566], "rgba": [160, 240, 298, 415, 416, 425, 426, 556, 562, 563, 564, 566], "1133x1211": 160, "undirect": [161, 241, 246, 279, 288, 317, 321, 324, 326, 328, 330, 336, 344, 345, 359, 368, 369, 373, 374, 375, 387, 390, 394, 399, 405, 406, 407, 408, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 443, 446, 449, 451, 452, 453, 455, 456, 464, 465, 477, 479, 480, 483, 492, 501, 503, 504, 510, 528, 529, 530, 532, 539, 542, 545, 562, 564, 566], "bidirect": [161, 241, 297, 369, 373, 374, 375, 390, 399, 405, 410, 412, 414, 415, 416, 417, 419, 420, 425, 532, 562], "condens": [161, 241, 562], "largest": [161, 241, 462, 562], "kept": [161, 241], "inplac": [162, 242, 562], "update_edge_by_index": [162, 242, 299, 562, 566], "weight_fn": [165, 245, 302, 308, 314, 321, 339, 340, 341, 342, 346, 352, 366, 368, 371, 373, 374, 375, 379, 386, 392, 394, 401, 403, 404, 405, 432, 438, 453, 455, 458, 459, 460, 461, 467, 476, 484, 497, 501, 502, 503, 504, 512, 519, 520, 521, 560, 561, 562], "callback": [165, 245, 302, 324, 345, 357, 365, 366, 392, 443, 452, 453, 462, 556, 561, 562], "gettempdir": [165, 245, 302], "rt": [165, 245, 302], "edge_fil": [165, 245, 302], "metadata": [166, 246, 566], "keyword": [166, 246, 513, 562], "source_path": [166, 246], "tmp": [166, 246], "csv": [166, 246], "new_path": [166, 246], "old_path": [166, 246], "assign": [166, 246, 326, 346, 432, 512, 561, 562, 563, 566], "992x1115": 240, "last": [248, 266, 344, 364, 451, 558, 562, 564], "callabbl": 255, "node_": 255, "represent": [256, 386, 476, 519, 562, 564], "rest": [256, 562], "get_all_edge_data": 273, "alwai": [279, 280, 288, 396, 397, 528, 529, 561, 562], "easili": [280, 562, 566], "undirected_gnp_random_graph": [298, 562], "636x443": 298, "path_graph": [302, 446, 477, 482, 533, 562, 564, 566], "topolog": [303, 304, 339, 340, 341, 342, 499, 523, 524, 562, 564], "is_act": 303, "get_readi": [303, 304, 306], "sorter": [303, 562], "underli": 303, "mutat": [303, 324, 345, 357, 365, 366, 392, 443, 452, 453, 562, 566], "recommend": 303, "daghascycl": [303, 339, 340, 341, 342, 523, 524], "block": 303, "progress": [303, 305, 306], "regular": [303, 423, 499], "flip": 303, "ones": 303, "certainli": [303, 499], "domin": [303, 499, 562], "notabl": [303, 499], "natur": [303, 499], "zero": [303, 397, 499, 512, 521, 529, 562], "valueerror": [303, 304, 314, 347, 350, 351, 352, 354, 367, 368, 378, 402, 433, 436, 437, 438, 440, 454, 455, 466, 499, 502, 520, 562], "partial": [303, 304, 478, 499, 562], "themselv": [303, 304, 499], "check_arg": [303, 562], "were": [303, 499, 562, 564, 566], "circuit": [303, 517, 564], "meaning": [303, 562], "memori": [303, 562], "improv": [303, 332, 361, 380, 448, 469, 488, 500, 559, 562], "undefin": [303, 562], "unblock": 304, "yet": [304, 306, 562], "happen": 304, "amongst": 304, "further": 305, "haven": 306, "default_weight": [308, 314, 321, 346, 352, 368, 371, 373, 374, 375, 379, 386, 394, 401, 403, 404, 405, 432, 438, 455, 458, 459, 460, 461, 467, 476, 497, 501, 503, 504, 512, 519], "sum": [308, 320, 322, 338, 346, 355, 356, 367, 370, 371, 379, 393, 400, 401, 432, 441, 442, 454, 457, 458, 467, 484, 497, 501, 512, 520, 562], "tell": [308, 346, 373, 374, 375, 403, 404, 405, 432, 459, 460, 461, 503, 504], "rust": [308, 346, 373, 374, 375, 403, 404, 405, 432, 459, 460, 461, 503, 504, 559, 560, 561, 562], "extract": [308, 346, 366, 373, 374, 375, 392, 403, 404, 405, 432, 453, 459, 460, 461, 503, 504], "numer": [308, 346, 373, 374, 375, 403, 404, 405, 432, 459, 460, 461, 503, 504, 556, 559, 561, 566], "absenc": [308, 346, 399, 432, 562], "rtype": [308, 322, 346, 356, 370, 400, 442, 457], "min_depth": [309, 315, 347, 353, 433, 439, 562], "cutoff": [309, 315, 347, 353, 433, 439, 562], "multithread": [309, 310, 311, 312, 313, 322, 347, 348, 349, 350, 351, 356, 369, 370, 373, 374, 375, 380, 388, 390, 399, 400, 403, 404, 405, 433, 442, 456, 457, 459, 460, 461, 469, 478, 479, 481, 500, 526, 532, 562], "thread": [309, 310, 311, 312, 313, 322, 347, 348, 349, 350, 351, 356, 369, 370, 373, 374, 375, 380, 388, 390, 399, 400, 403, 404, 405, 433, 442, 456, 457, 459, 460, 461, 469, 478, 479, 481, 500, 526, 532, 562], "pool": [309, 310, 311, 312, 313, 347, 348, 349, 350, 351, 373, 374, 375, 380, 388, 403, 404, 405, 433, 459, 460, 461, 469, 478, 479, 500, 526], "cpu": [309, 310, 311, 312, 313, 347, 348, 349, 350, 351, 373, 374, 375, 380, 388, 390, 403, 404, 405, 433, 459, 460, 461, 469, 478, 479, 481, 500, 526, 532, 558, 560, 562], "tune": [309, 310, 311, 312, 313, 347, 348, 349, 350, 351, 369, 373, 374, 375, 380, 388, 390, 399, 403, 404, 405, 433, 456, 459, 460, 461, 469, 478, 479, 481, 500, 526, 532], "rayon_num_thread": [309, 310, 311, 312, 313, 322, 347, 348, 349, 350, 351, 356, 369, 370, 373, 374, 375, 380, 388, 390, 399, 400, 403, 404, 405, 433, 442, 456, 457, 459, 460, 461, 469, 478, 479, 481, 500, 526, 532, 562], "depth": [309, 315, 330, 344, 345, 347, 353, 364, 365, 433, 439, 451, 452, 498, 562], "regardless": [309, 315, 347, 353, 433, 439], "allpairsmultiplepathmap": [309, 347, 433], "edge_cost_fn": [310, 311, 312, 313, 318, 320, 348, 349, 350, 351, 354, 355, 367, 393, 402, 434, 435, 436, 437, 440, 441, 454, 505], "calcul": [310, 312, 322, 332, 348, 350, 356, 361, 363, 369, 370, 390, 399, 400, 434, 436, 442, 448, 456, 457, 481, 532, 558, 560, 562], "bellman": [310, 311, 320, 321, 348, 349, 355, 402, 434, 435, 441, 505, 562], "ford": [310, 311, 320, 321, 348, 349, 355, 402, 434, 435, 441, 505, 562], "act": [310, 311, 312, 313, 348, 349, 350, 351, 434, 435, 436, 437, 561], "cost": [310, 311, 312, 313, 314, 318, 320, 321, 348, 349, 350, 351, 352, 354, 355, 366, 367, 368, 378, 386, 392, 393, 394, 402, 434, 435, 436, 437, 438, 440, 441, 453, 454, 455, 466, 476, 496, 503, 504, 505, 519, 562], "allpairspathlengthmap": [310, 312, 348, 350, 373, 403, 434, 436, 459, 562], "negativecycl": [310, 311, 320, 321, 348, 349, 355, 434, 435, 441], "neg": [310, 311, 314, 318, 320, 321, 333, 348, 349, 350, 351, 352, 354, 355, 367, 368, 373, 374, 375, 378, 393, 402, 403, 404, 405, 423, 434, 435, 436, 437, 438, 440, 441, 454, 455, 459, 460, 461, 466, 502, 505, 520, 562], "run": [311, 313, 322, 333, 334, 349, 351, 356, 369, 370, 371, 373, 374, 375, 379, 380, 388, 390, 391, 397, 399, 400, 403, 404, 405, 407, 410, 442, 444, 456, 457, 458, 459, 460, 461, 467, 469, 478, 479, 481, 482, 484, 500, 501, 512, 526, 529, 532, 533, 556, 559, 560, 562, 564, 566], "allpairspathmap": [311, 313, 349, 351, 435, 437], "dijkstra": [312, 313, 314, 350, 351, 352, 366, 367, 368, 373, 374, 375, 392, 393, 394, 403, 404, 405, 436, 437, 438, 453, 454, 455, 459, 460, 461, 562], "as_undirect": [314, 321, 352, 368, 369, 373, 374, 375, 390, 394, 399, 405, 455, 483, 532, 562], "isn": [314, 321, 352, 368, 386, 394, 395, 438, 455, 476, 503, 504, 519, 561], "nan": [314, 350, 351, 352, 354, 367, 368, 378, 390, 436, 437, 438, 440, 454, 455, 466, 481, 502, 520, 521, 532, 562], "from_": 315, "repeat": [315, 324, 330, 344, 345, 353, 357, 364, 365, 366, 392, 439, 443, 451, 452, 453], "inner": [315, 330, 353, 439, 562], "articul": [317, 326, 562], "cut": [317, 326, 521, 562], "vertex": [317, 324, 330, 345, 357, 365, 366, 390, 392, 443, 452, 453, 468, 479, 481, 532, 535, 536, 537, 538, 543, 544, 548, 551, 552, 562], "along": [317, 562], "increas": [317, 328, 386, 476, 519, 562], "implicitli": [317, 326, 328, 330, 337, 338, 363, 388, 450, 479, 526], "assum": [317, 326, 328, 330, 337, 338, 363, 388, 450, 479, 526, 562], "loop": [317, 326, 328, 330, 335, 337, 338, 362, 363, 372, 388, 396, 449, 450, 479, 526, 528, 562], "produc": [317, 326, 328, 330, 337, 338, 363, 388, 450, 470, 478, 479, 520, 526, 562], "incorrect": [317, 326, 328, 330, 337, 338, 363, 388, 450, 479, 526, 562], "unexpect": [317, 326, 328, 330, 337, 338, 339, 340, 341, 342, 363, 388, 450, 479, 526, 562], "goal_fn": [318, 354, 440], "estimate_cost_fn": [318, 354, 440], "comput": [318, 320, 322, 326, 332, 335, 354, 355, 356, 361, 362, 367, 370, 371, 378, 379, 380, 388, 390, 393, 400, 401, 440, 441, 442, 448, 449, 454, 457, 458, 466, 467, 469, 479, 481, 484, 496, 497, 500, 501, 512, 520, 521, 522, 526, 527, 532, 556, 562, 564], "estim": [318, 354, 440], "admiss": [318, 354, 440], "never": [318, 335, 354, 362, 440, 449, 545, 562], "overestim": [318, 354, 440], "nearest": [318, 354, 440], "goal": [318, 320, 354, 355, 367, 378, 393, 440, 441, 454, 466, 496, 561, 562], "seed": [319, 383, 386, 395, 396, 397, 398, 473, 476, 478, 513, 514, 519, 528, 529, 530, 562], "initial_graph": [319, 395, 562], "barab\u00e1si": [319, 395, 562], "albert": [319, 395, 562], "preferenti": [319, 395, 562], "grown": [319, 395, 559, 566], "l": [319, 395, 468, 512, 513, 562], "r": [319, 395, 422, 512, 558, 559, 562], "emerg": [319, 395], "scale": [319, 327, 331, 332, 358, 360, 361, 384, 385, 386, 395, 445, 447, 448, 474, 475, 476, 516, 518, 519, 556, 562], "network": [319, 332, 370, 386, 388, 395, 397, 400, 457, 476, 519, 529, 558, 559, 562, 566], "scienc": [319, 332, 395], "286": [319, 395], "pp": [319, 395], "509": [319, 395], "512": [319, 395], "1999": [319, 395, 484, 512], "star_graph": [319, 395, 562], "star": [319, 395, 420, 423, 431, 562], "spfa": [320, 321, 355, 402, 441, 505, 562], "heurist": [320, 321, 355, 376, 377, 391, 402, 441, 462, 464, 465, 482, 488, 489, 493, 505, 533, 562], "wit": 321, "parallel_threshold": [322, 356, 369, 370, 373, 374, 375, 390, 399, 400, 403, 404, 405, 442, 456, 457, 459, 460, 461, 478, 481, 532, 562], "50": [322, 356, 370, 386, 400, 442, 457, 476, 478, 519, 562], "fraction": [322, 332, 356, 361, 370, 400, 442, 448, 457, 562], "through": [322, 356, 370, 400, 442, 457, 562, 563, 564], "math": [322, 356, 370, 400, 442, 457], "c_b": [322, 356, 370, 400, 442, 457, 562, 563], "sum_": [322, 332, 356, 361, 370, 390, 400, 442, 448, 457, 481, 532, 562, 563], "frac": [322, 332, 356, 361, 370, 386, 388, 390, 400, 442, 448, 457, 476, 479, 481, 519, 532, 562, 563], "sigma": [322, 356, 370, 400, 442, 457, 562, 563], "ulrik": [322, 356, 370, 397, 400, 442, 457, 492, 529, 562], "brand": [322, 356, 370, 397, 400, 442, 457, 492, 529, 562], "journal": [322, 356, 371, 401, 423, 442, 458, 484, 521, 562], "mathemat": [322, 356, 442, 562], "sociologi": [322, 356, 371, 401, 442, 458, 562], "163": [322, 356, 442, 562], "177": [322, 356, 442, 562], "2001": [322, 356, 442, 562], "abov": [322, 356, 369, 370, 373, 374, 375, 380, 390, 397, 399, 400, 403, 404, 405, 407, 410, 442, 456, 457, 459, 460, 461, 469, 481, 500, 529, 532, 561, 562, 564, 566], "env": [322, 356, 369, 370, 390, 399, 400, 442, 456, 457, 481, 532], "var": [322, 356, 369, 370, 390, 399, 400, 442, 456, 457, 481, 532], "distinct": [322, 356, 370, 400, 408, 411, 442, 457, 490, 564], "breadth": [323, 324, 325, 357, 443, 562], "bf": [323, 324, 325, 357, 443], "bfspredecessor": 323, "visitor": [324, 345, 357, 365, 366, 392, 443, 452, 453, 534, 541, 547, 562], "pseudo": [324, 344, 345, 357, 364, 365, 366, 392, 443, 451, 452, 453], "code": [324, 344, 345, 357, 364, 365, 366, 392, 415, 416, 425, 426, 443, 451, 452, 453, 559, 562, 564, 566], "annot": [324, 345, 357, 365, 366, 392, 443, 452, 453, 562], "event": [324, 345, 357, 365, 366, 392, 443, 452, 453, 534, 541, 542, 547, 549, 550, 562], "white": [324, 345, 357, 365, 443, 452, 566], "grai": [324, 345, 357, 365, 443, 452, 538], "equeu": [324, 357, 443], "q": [324, 357, 366, 392, 443, 453], "\u00f8": [324, 344, 357, 364, 366, 392, 443, 451, 453], "dequeu": [324, 357, 443], "adj": [324, 345, 357, 365, 366, 392, 443, 452, 453, 561, 562], "els": [324, 344, 345, 357, 364, 365, 366, 392, 443, 451, 452, 453, 555, 561, 562, 564, 566], "insid": [324, 345, 357, 365, 366, 392, 443, 452, 453, 534, 541, 547], "stop": [324, 333, 345, 357, 365, 366, 367, 371, 376, 377, 379, 386, 391, 392, 393, 401, 443, 452, 453, 454, 458, 464, 465, 467, 476, 482, 484, 488, 493, 497, 512, 519, 533, 554, 562], "immedi": [324, 345, 357, 365, 366, 379, 392, 443, 452, 453, 467, 497, 562], "exploit": [324, 345, 357, 365, 366, 392, 443, 452, 453], "exit": [324, 345, 357, 365, 366, 392, 443, 452, 453, 562], "earli": [324, 345, 357, 365, 366, 392, 443, 452, 453], "stopsearch": [324, 345, 357, 365, 366, 392, 443, 452, 453], "prune": [324, 345, 357, 365, 366, 392, 443, 452, 453, 553], "prunesearch": [324, 345, 357, 365, 366, 392, 443, 452, 453], "visit": [324, 345, 357, 365, 376, 377, 391, 443, 452, 464, 465, 482, 488, 493, 533, 562], "treeedgesrecord": [324, 345, 357, 365, 443, 452, 562], "tree_edg": [324, 345, 357, 365, 443, 452, 542, 562], "append": [324, 345, 357, 365, 375, 405, 407, 410, 414, 422, 424, 443, 452, 461, 562, 563], "vi": [324, 345, 357, 365, 443, 452, 562], "chosen": [324, 330, 344, 345, 357, 364, 365, 366, 392, 443, 451, 452, 453], "arbitrarli": [324, 330, 344, 345, 357, 364, 365, 366, 392, 443, 451, 452, 453], "invok": [324, 345, 357, 365, 366, 392, 443, 452, 453, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552], "subclass": [324, 345, 357, 365, 366, 392, 443, 452, 453, 562], "bfssuccessor": [325, 562], "disconnect": [326, 390, 481, 521, 532, 562], "vertic": [326, 407, 408, 410, 411, 444, 468, 499, 544, 562, 566], "first_nod": [327, 358, 445], "horizont": [327, 358, 445], "center": [327, 331, 358, 360, 383, 384, 385, 386, 409, 412, 419, 420, 430, 431, 445, 447, 473, 474, 475, 476, 514, 516, 518, 519], "aspect_ratio": [327, 358, 445], "3333333333333333": 327, "bipartit": [327, 358, 398, 444, 445, 485, 527, 530, 562], "left": [327, 358, 398, 416, 426, 445, 492, 530], "horitont": [327, 445], "orient": [327, 330, 358, 388, 445], "ratio": [327, 332, 358, 361, 445, 448, 562], "width": [327, 358, 445, 556], "height": [327, 358, 445], "pos2dmap": [327, 331, 358, 360, 383, 384, 385, 445, 447, 473, 474, 475, 514, 516, 518, 556, 561, 562], "cartesian": [329, 359, 446, 562], "product": [329, 359, 387, 446, 477, 562], "productnodemap": [329, 359, 387, 446, 477], "chain": [330, 333, 562], "decomposit": [330, 562], "deriv": [330, 379, 467, 497, 562], "fundament": [330, 338, 562], "manner": [330, 562, 566], "begin": [330, 564], "nontre": 330, "awai": 330, "overlap": 330, "segment": 330, "inform": [330, 398, 515, 530, 558, 562, 566], "schmidt": 330, "jen": 330, "2013": [330, 562], "test": [330, 492, 501, 560, 562], "letter": [330, 558], "113": 330, "241": 330, "244": 330, "elsevi": 330, "doi": [330, 332, 371, 401, 423, 458, 492, 517, 520, 562], "10": [330, 332, 371, 379, 401, 416, 419, 420, 423, 426, 430, 431, 458, 467, 492, 497, 517, 520, 556, 559, 560, 563], "1016": [330, 423, 520, 562], "j": [330, 408, 411, 484, 562], "ipl": [330, 562], "016": [330, 562], "circular": [331, 360, 447], "wf_improv": [332, 361, 448], "close": [332, 361, 386, 448, 476, 517, 519, 562], "reciproc": [332, 361, 448, 562], "averag": [332, 346, 361, 378, 390, 432, 448, 466, 481, 496, 532, 562], "distanc": [332, 361, 369, 374, 375, 386, 390, 399, 404, 405, 415, 416, 425, 426, 448, 456, 460, 461, 476, 481, 502, 513, 519, 520, 532, 548, 550, 558, 562], "reachabl": [332, 344, 361, 364, 378, 448, 451, 466, 496, 562], "reach": [332, 361, 367, 371, 379, 393, 401, 448, 454, 458, 467, 484, 497, 512, 562], "altern": [332, 361, 448, 561, 563, 566], "formula": [332, 361, 448], "actor": [332, 361, 448], "who": [332, 361, 448, 562, 566], "wf": [332, 361, 448], "c_": [332, 361, 448], "wasserman": 332, "faust": 332, "k": [332, 337, 338, 363, 378, 386, 422, 423, 450, 466, 476, 496, 519, 556, 562], "1994": 332, "social": [332, 370, 400, 457, 562], "cambridg": 332, "press": 332, "1017": 332, "cbo9780511815478": 332, "color_fn": 333, "collect": [333, 334, 338, 523, 564], "bicolor": 333, "continu": [333, 386, 476, 519, 561, 562], "core": [337, 363, 450, 515, 558, 562], "basi": [338, 562], "minim": [338, 478, 520, 563], "summat": 338, "exclus": 338, "cacm": 338, "491": 338, "paton": 338, "comm": 338, "acm": [338, 484, 501, 521], "12": [338, 423, 556, 559, 560], "9": [338, 423, 462, 559, 566], "sept": 338, "1969": [338, 423], "514": 338, "518": 338, "longest": [339, 340, 341, 342, 380, 469, 500, 562], "unsign": [339, 340, 562], "_": [339, 340, 341, 342, 359, 387, 405, 446, 477, 562], "could": [339, 340, 341, 342, 556, 561, 562, 564, 566], "df": [344, 345, 364, 365, 372, 451, 452, 544], "procedur": [344, 364, 451, 562], "stack": [344, 364, 451], "push": [344, 364, 451], "hasnext": [344, 364, 451], "w": [344, 364, 451, 525], "pop": [344, 364, 451, 548], "span": [344, 451, 503, 504, 520, 562], "examin": [345, 365, 366, 392, 452, 453, 535, 537, 538, 544, 549, 550, 552, 562, 564], "cross": [345, 365, 452, 539, 545, 560], "forward": [345, 365, 452, 545], "parallel_edg": [346, 432, 562], "dag_adjacency_matrix": 346, "determin": [346, 376, 377, 380, 432, 464, 465, 469, 485, 488, 489, 493, 499, 500, 521, 562], "min": [346, 366, 392, 432, 453, 521, 562, 563], "caus": [346, 432, 491, 562], "behavior": [346, 432, 562], "max": [346, 380, 407, 410, 432, 469, 500, 501, 562, 563], "avg": [346, 432, 562], "digraph_edge_betweenness_centr": 356, "pathlength": [356, 442], "centralitymap": [356, 361, 371, 379, 401, 442, 448, 458, 467, 484, 497, 512, 563], "version": [357, 365, 366, 443, 452, 453, 560, 561, 562], "33333333333333": [358, 445], "graph_1": [359, 387, 446, 477, 562], "graph_2": [359, 387, 446, 477, 562], "graph_product": [359, 387, 446, 477, 562], "in_degre": [363, 562], "out_degre": [363, 562], "infin": [366, 390, 392, 453, 481, 513, 532], "p": [366, 392, 397, 398, 453, 513, 529, 530, 555, 556, 558, 562], "relax": [366, 392, 453, 549], "decreas": [366, 392, 453], "300": [369, 373, 374, 375, 390, 399, 403, 404, 405, 456, 459, 460, 461, 481, 532, 556], "digraph_floyd_warshall_numpi": [369, 456, 561, 562], "absens": [369, 456], "definit": [370, 400, 457], "On": [370, 400, 457, 562], "variant": [370, 400, 416, 426, 457, 561, 562], "30": [370, 400, 457, 562], "136": [370, 400, 457, 562], "145": [370, 400, 457, 520, 562], "2008": [370, 400, 457, 562], "digraph_betweenness_centr": [370, 562], "edgecentralitymap": [370, 400, 457], "max_it": [371, 379, 401, 458, 467, 484, 497, 512], "100": [371, 401, 458, 484, 497, 512, 562], "tol": [371, 379, 386, 401, 458, 467, 476, 484, 497, 512, 519], "1e": [371, 379, 386, 401, 458, 467, 476, 484, 497, 512, 519], "06": [371, 379, 386, 401, 458, 467, 476, 497, 512, 519], "eigenvector": [371, 379, 401, 458, 467, 497, 562], "phillip": [371, 401, 458], "bonacich": [371, 401, 458], "famili": [371, 401, 458, 556], "measur": [371, 401, 458, 520, 562, 563, 564], "american": [371, 401, 458], "92": [371, 401, 458], "1170": [371, 401, 458], "1182": [371, 401, 458], "1986": [371, 401, 458, 501], "1086": [371, 401, 458], "228631": [371, 401, 458], "converg": [371, 379, 401, 458, 467, 484, 497, 512], "vector": [371, 379, 401, 458, 467, 484, 497, 512], "smaller": [371, 379, 401, 458, 467, 484, 497, 512, 566], "toler": [371, 379, 401, 458, 467, 484, 497, 512], "multipli": [371, 379, 401, 458, 467, 484, 497, 512], "networkx": [371, 379, 397, 401, 458, 467, 497, 506, 512, 517, 529, 559, 562, 566], "encount": [372, 515, 523, 524, 536, 543, 548, 561, 562], "floyd": [373, 374, 375, 403, 404, 405, 459, 460, 461, 562], "dens": [373, 374, 375, 403, 404, 405, 459, 460, 461], "graph_floyd_warshall_numpi": [374, 375, 461, 562], "inf": [374, 375, 404, 405, 444, 460, 461, 562], "matric": [375, 405, 461, 561, 562], "reconstruct": [375, 405, 461], "among": [375, 405, 461, 501, 558], "reconstruct_path": [375, 405, 461], "curr": [375, 405, 461], "node_match": [376, 377, 391, 464, 465, 482, 488, 493, 533, 562], "edge_match": [376, 377, 391, 464, 465, 482, 488, 493, 533, 562], "id_ord": [376, 377, 391, 464, 465, 482, 488, 489, 493, 533, 562], "call_limit": [376, 377, 391, 464, 465, 482, 488, 493, 533, 562], "compar": [376, 377, 464, 465, 488, 489, 493, 558, 562], "matcher": [376, 377, 464, 465, 488, 489, 493], "graph_a": [376, 377, 391, 464, 465, 482, 488, 489, 493, 533], "graph_b": [376, 377, 391, 464, 465, 482, 488, 489, 493, 533], "y": [376, 377, 380, 464, 465, 469, 488, 489, 493, 500], "evalu": [376, 377, 380, 391, 464, 465, 469, 482, 488, 489, 493, 500, 533], "vied": [376, 377, 464, 465, 489], "vf2": [376, 377, 391, 464, 465, 482, 488, 489, 493, 533, 562], "paper": [376, 377, 391, 416, 426, 444, 464, 465, 470, 478, 482, 488, 489, 493, 533, 562], "bound": [376, 377, 391, 397, 464, 465, 482, 488, 493, 529, 533, 562], "solut": [376, 377, 391, 462, 464, 465, 482, 488, 493, 501, 533, 562], "exce": [376, 377, 391, 407, 410, 422, 464, 465, 482, 488, 493, 533, 562], "ambigu": [377, 465, 493, 542], "term": [377, 465, 493], "fewer": [377, 465, 493], "edge_cost": [378, 466, 496], "kth": [378, 466, 496], "log": [378, 444, 466, 496, 562], "eedg": [378, 466, 496], "alpha": [379, 467, 497, 512, 556], "beta": [379, 467, 497], "1000": [379, 467], "katz": [379, 467, 497, 562], "leo": [379, 467, 497], "statu": [379, 467, 497, 564], "sociometr": [379, 467, 497], "psychometrika": [379, 467, 497], "18": [379, 467, 497, 562], "39": [379, 467, 497, 562], "43": [379, 467, 497], "1953": [379, 467, 497], "springer": [379, 467, 497, 520, 562], "pdf": [379, 444, 467, 470, 484, 497, 512, 555], "1007": [379, 467, 497, 520, 562], "bf02289026": [379, 467, 497], "attenu": [379, 467, 497], "neighbourhood": [379, 467, 497], "roughli": [380, 469, 500], "len": [380, 469, 500, 562, 564], "There": [380, 469, 500, 561, 562, 566], "tradeoff": [380, 469, 500], "json": [381, 471, 508, 562], "anyth": [381, 471, 508], "unweight": [382, 390, 472, 481, 509, 532, 562], "preset": [382, 462, 472, 509, 562], "nodescountmap": [382, 509], "nlist": [384, 423, 462, 474, 516, 562, 566], "rotat": [384, 474, 516], "shell": [384, 474, 516], "angl": [384, 474, 516], "radian": [384, 474, 516], "resolut": [385, 475, 518], "35": [385, 475, 518], "equidist": [385, 475, 518], "spiral": [385, 475, 518], "compact": [385, 475, 518], "compress": [385, 475, 518], "plot": [385, 475, 518], "po": [386, 423, 462, 476, 513, 519, 556, 561, 562, 566], "repulsive_expon": [386, 476, 519], "adaptive_cool": [386, 476, 519, 562], "num_it": [386, 476, 519], "fruchterman": [386, 476, 519, 562], "reingold": [386, 476, 519, 562], "forc": [386, 476, 519, 562], "simul": [386, 476, 519], "spring": [386, 476, 519, 556], "hold": [386, 476, 519], "repel": [386, 476, 519], "anti": [386, 476, 519], "graviti": [386, 476, 519], "equilibrium": [386, 476, 519], "coordin": [386, 476, 519, 566], "optim": [386, 462, 476, 478, 491, 519, 520, 548, 562, 564], "sqrt": [386, 476, 519], "farther": [386, 476, 519], "apart": [386, 476, 519], "repuls": [386, 476, 519], "expon": [386, 476, 519], "cool": [386, 476, 519], "scheme": [386, 476, 519], "linear": [386, 414, 424, 468, 476, 499, 519, 562, 564], "threshold": [386, 476, 513, 519], "Not": [386, 476, 519], "around": [386, 476, 519, 562], "tensor": [387, 477, 562], "fag": 388, "eq": 388, "triangl": [388, 479], "tripl": [388, 479], "count": [388, 562, 564], "cluster": 388, "fagiolo": 388, "physic": 388, "review": [388, 564], "76": 388, "026107": 388, "2007": 388, "merge_nod": [389, 480, 531, 562], "merge_edg": [389, 480, 531, 562], "three": [389, 480, 531, 562], "phase": [389, 480, 531], "n_2": [389, 480, 531], "n_1": [389, 480, 531], "togeth": [389, 406, 480, 515, 531, 543, 544, 548], "ne": [390, 481, 532], "taken": [390, 481, 532, 562], "funcion": [391, 482, 533], "direccted_path_graph": 391, "stopiter": [391, 482, 533, 562], "dicitonari": [391, 482, 533], "purpos": [395, 559, 560], "weak": 395, "direction": [395, 564, 566], "num_nod": [396, 397, 408, 409, 411, 412, 418, 419, 420, 422, 429, 430, 431, 513, 528, 529, 562], "num_edg": [396, 528, 562], "g_": [396, 397, 528, 529, 562], "nm": [396, 528], "known": [396, 397, 528, 529, 562, 564], "erd\u0151": [396, 397, 528, 529], "r\u00e9nyi": [396, 397, 528, 529], "higher": [396, 462, 528], "reproduc": [396, 528, 558, 562], "complet": [396, 397, 406, 408, 411, 418, 428, 429, 502, 520, 528, 529, 562, 564], "binomi": [397, 407, 410, 529, 562], "mention": [397, 529], "upper": [397, 529, 562], "fast_gnp_random_graph": [397, 529], "vladimir": [397, 529], "batagelj": [397, 529], "phy": [397, 529], "rev": [397, 529], "71": [397, 529], "036113": [397, 529], "2005": [397, 529], "random_graph": [397, 529, 562], "l49": [397, 529], "l120": [397, 529], "num_l_nod": [398, 530], "num_r_nod": [398, 530], "divid": [398, 530], "disjoint": [398, 498, 530, 562], "right": [398, 410, 414, 416, 417, 426, 492, 530], "num_mesh_nod": [406, 428], "num_path_nod": [406, 428], "mesh_weight": [406, 428], "path_weight": [406, 428], "barbel": [406, 562], "mesh": [406, 418, 428, 429, 562], "won": [406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "recurs": [407, 410, 517, 562], "platform": [407, 410, 559, 562, 566], "64bit": [407, 410, 559, 560], "60": [407, 410, 562], "32bit": [407, 410, 559, 560], "29": [407, 410, 562], "overflowerror": [407, 410, 562], "extra": [407, 410, 414, 422, 424, 562], "greater": [407, 410, 414, 422, 424, 525], "neither": [408, 409, 411, 412, 414, 418, 419, 420, 424, 428, 429, 430, 431, 564], "propag": [410, 414, 417], "toward": [410, 414, 417, 420], "bottom": [410, 414, 417], "lenght": [410, 422], "row": [414, 417, 424, 427], "col": [414, 417, 424, 427], "grid": [414, 424, 562], "wise": [414, 424], "trail": [414, 424, 564], "heavi": [415, 416, 425, 426, 562], "hex": [415, 425, 562], "fig": [415, 416, 425, 426, 555], "arxiv": [415, 416, 425, 426, 478, 562], "ab": [415, 416, 425, 426, 478, 562], "1907": [415, 416, 425, 426], "09528": [415, 416, 425, 426], "ascii": [415, 416, 425, 426], "diagram": [415, 416, 425, 426], "f": [415, 416, 425, 426, 563, 564, 566], "odd": [415, 416, 425, 426], "graphviz_draw": [415, 416, 425, 426, 561, 562, 563, 564, 566], "1043x155": [415, 425], "squar": [416, 426, 562], "four": [416, 426, 558, 562], "frequenc": [416, 426], "467x539": [416, 426], "hexagon": [417, 427, 562, 563], "lattic": [417, 427, 562, 563], "inward": 420, "branching_factor": 422, "ari": [422, 562], "cannot": [422, 501, 562], "petersen": [423, 562], "2n": 423, "3n": 423, "watkin": 423, "denot": [423, 564], "extern": [423, 561], "polygon": 423, "shift": 423, "shell_layout": [423, 462, 562, 566], "7": [423, 462, 463, 470, 559, 566], "m\u00f6biu": 423, "kantor": 423, "13": [423, 559], "14": [423, 559], "theorem": [423, 470, 562], "tait": 423, "combinatori": 423, "theori": [423, 566], "152": 423, "164": 423, "s0021": 423, "9800": 423, "69": 423, "80116": 423, "column": [427, 562], "lollipop": [428, 562], "nor": 428, "graph_edge_betweenness_centr": 442, "noga": [444, 562], "alon": [444, 562], "lett": 444, "85": [444, 512], "2003": [444, 558, 562], "www": [444, 470, 484], "tau": 444, "ac": 444, "il": 444, "nogaa": 444, "lex2": 444, "graph_betweenness_centr": [457, 562], "preset_color_fn": [462, 562], "greedi": [462, 463, 498, 562], "strategi": 462, "problem": [462, 520, 558], "manual": [462, 560], "generalized_petersen_graph": [462, 562, 566], "draw": [462, 555, 556, 562], "node_color": [462, 556, 562, 563], "adrian": 462, "kosowski": 462, "krzysztof": 462, "manuszewski": 462, "classic": [462, 564], "19": [462, 560, 562], "2004": 462, "isbn": 462, "8218": 462, "3458": 462, "greedili": [463, 562], "cycle_graph": [463, 470, 562, 564], "edge_color": [463, 470, 556, 562], "edge_ab": [468, 562], "edge_ac": [468, 562], "edge_bc": [468, 562], "edge_ad": [468, 562], "out_graph": [468, 562], "out_edge_map": [468, 562], "simple_path_pair": 469, "longest_path": [469, 562], "z": 469, "misra": [470, 562], "gri": [470, 562], "proof": [470, 562], "vize": [470, 562], "1992": [470, 562], "utexa": 470, "edu": [470, 484, 492, 512], "psp": 470, "numpathsmap": 472, "trial": 478, "modul": [478, 562], "approxim": [478, 520, 562], "token": [478, 562], "swap": [478, 562], "permut": [478, 562], "miltzow": [478, 562], "et": [478, 558, 562], "al": [478, 558, 562], "2016": [478, 562], "1602": [478, 562], "05150": [478, 562], "rearrang": 478, "nstart": [484, 512], "08": 484, "hub": [484, 562], "author": [484, 562], "kleinberg": 484, "authorit": 484, "hyperlink": 484, "46": 484, "cornel": 484, "home": 484, "kleinber": 484, "auth": 484, "nullgraph": [486, 494], "alp\u00e1r": 488, "j\u00fcttner": 488, "p\u00e9ter": 488, "madarasi": 488, "longer": [491, 559, 562], "global": 491, "local": [491, 560, 562], "planar": [492, 562], "iff": 492, "plane": 492, "intersect": 492, "2009": [492, 558], "citeseerx": 492, "ist": 492, "psu": 492, "viewdoc": 492, "summari": 492, "217": 492, "9208": 492, "weakli": [494, 511, 557, 562], "first_lay": [498, 562], "index_output": [498, 562], "invalidnod": [498, 507], "lexicograph": 499, "ti": 499, "affect": 499, "comparison": [499, 561, 562, 566], "max_cardin": 501, "verify_optimum": 501, "subset": [501, 512, 535, 538], "cardin": 501, "blossom": 501, "augment": 501, "primal": 501, "dual": [501, 562], "invent": 501, "jack": 501, "edmond": 501, "untest": 501, "optimum": 501, "mostli": [501, 562, 566], "ofth": 501, "zvi": 501, "galil": 501, "survei": 501, "metric": [502, 513, 520, 562], "closur": [502, 520, 562], "forest": [503, 504], "kruskal": [503, 504], "keep_attribut": [506, 562], "__networkx_node__": [506, 562], "person": 512, "dangl": 512, "page": [512, 562], "brin": 512, "motwani": 512, "winograd": 512, "citat": 512, "rank": [512, 562], "bring": 512, "stanford": 512, "digit": 512, "technologi": 512, "1998": 512, "dbpub": 512, "8090": 512, "showdoc": 512, "fulltext": 512, "66": 512, "tri": [512, 562], "damp": 512, "uniform": 512, "distribut": [512, 560, 562], "outedg": 512, "accord": 512, "irreduc": 512, "radiu": [513, 556], "dim": 513, "geometr": [513, 562], "unit": 513, "cube": [513, 562], "dimens": 513, "model": [513, 564], "uniformli": 513, "store": [513, 515, 564, 566], "euclidean": 513, "minkowski": 513, "meet": 513, "graphml": [515, 562], "comprehens": 515, "easi": [515, 542], "properti": [515, 561, 564], "flexibl": [515, 566], "mechan": 515, "graphdraw": 515, "mix": 515, "unidirect": 515, "hyperedg": 515, "nest": 515, "port": 515, "domain": 515, "pars": 515, "runtimeerror": [515, 562], "elementari": [517, 562], "johnson": [517, 558, 562], "1137": 517, "0204007": 517, "l98": 517, "l222": 517, "terminal_nod": 520, "steiner": [520, 562], "regard": 520, "amoung": 520, "termin": [520, 562], "due": [520, 560, 562], "rather": [520, 562], "kou": [520, 562], "markowski": [520, 562], "berman": [520, 562], "fast": [520, 562], "acta": 520, "informatica": 520, "141": 520, "1981": [520, 562], "articl": [520, 562], "bf00288961": [520, 562], "kurt": 520, "mehlhorn": 520, "0020": [520, 562], "0190": [520, 562], "88": [520, 562], "90066": [520, 562], "stoer": [521, 562], "wagner": [521, 562], "stoer_simple_1997": 521, "nonneg": 521, "conid": 521, "partit": [521, 562], "usiz": 521, "mechthild": 521, "frank": [521, 562], "44": 521, "585": [521, 562], "591": 521, "1997": 521, "strongli": [522, 562], "kosaraju": 522, "earliest": 523, "reduct": [525, 562], "prime": 525, "pyvalueerror": 525, "action": [534, 541, 547, 562], "queue": [535, 538, 548, 562], "record": 542, "disregard": 542, "leaf": 544, "upon": [549, 550, 562], "emit": [549, 550, 562], "node_attr_fn": [555, 562, 563, 564, 566], "edge_attr_fn": [555, 564], "image_typ": 555, "pillow": [555, 562], "instruct": [555, 564], "disk": 555, "canon": 555, "cmap": [555, 556], "cmapx": 555, "cmapx_np": 555, "dia": 555, "gd": 555, "gd2": 555, "gif": 555, "hpgl": 555, "imap": 555, "imap_np": 555, "ismap": 555, "jpe": 555, "jpeg": 555, "jpg": 555, "mif": 555, "mp": 555, "pcl": 555, "pic": 555, "plain": 555, "ext": 555, "ps2": 555, "svg": 555, "svgz": 555, "vml": 555, "vmlz": 555, "vrml": 555, "vtx": 555, "wbmp": 555, "xdot": 555, "xlib": 555, "twopi": 555, "neato": [555, 563, 566], "circo": 555, "fdp": [555, 562], "sfdp": [555, 562], "yellow": [555, 562, 566], "blue": [555, 562, 566], "red": [555, 562], "directed_star_graph": [555, 562], "rgb": [555, 556, 562], "766x747": [555, 562], "arrow": [556, 564, 566], "kwd": 556, "matplotlib": [556, 562, 563, 566], "mpl": [556, 562], "layout_funct": 556, "arrowhead": 556, "arrowstyl": 556, "arrowshead": 556, "arrow_s": [556, 561], "fancyarrowpatch": 556, "mutation_scal": 556, "info": 556, "node_list": [556, 561], "node_s": [556, 562], "vmin": [556, 562, 563], "vmax": [556, 562, 563], "scatter": 556, "1f78b4": [556, 562], "node_shap": 556, "shape": [556, 562, 563, 566], "pyplot": [556, 562, 563, 566], "marker": 556, "h": [556, 564], "transpar": 556, "colormap": [556, 563], "intens": 556, "linewidth": 556, "symbol": 556, "border": 556, "edge_cmap": 556, "edge_vmin": 556, "edge_vmax": 556, "word": 556, "solid": 556, "dash": 556, "linestyl": 556, "Or": [556, 562, 566], "font_siz": 556, "fontsiz": 556, "font_color": 556, "font": 556, "ie": 556, "font_weight": 556, "font_famili": 556, "san": 556, "serif": 556, "legend": 556, "connectionstyl": 556, "curv": 556, "arc": [556, 564, 566], "rad": 556, "arc3": 556, "backend": [556, 561], "jupyt": 556, "plt": [556, 562, 563, 566], "competit": 558, "against": [558, 562], "popular": 558, "igraph": 558, "networkit": 558, "task": 558, "machin": 558, "intel": 558, "i9": 558, "9900k": 558, "60ghz": 558, "eight": 558, "16": [558, 562], "thead": 558, "32gb": 558, "ram": 558, "avaialbl": 558, "usa": 558, "road": 558, "9th": 558, "dimac": 558, "challeng": 558, "dataset": 558, "demetrescu": 558, "datta": 558, "third": 558, "citi": 558, "rome": 558, "lastli": 558, "fourth": 558, "answer": 558, "arg": 558, "databas": 558, "de": 558, "santo": 558, "goldberg": 558, "ninth": 558, "foggia": 558, "sanson": 558, "vento": 558, "recognit": 558, "1067": 558, "1079": 558, "studi": 559, "variou": [559, 561, 562], "licens": 559, "apach": 559, "host": 559, "inher": 559, "safeti": [559, 560], "significantli": [559, 562], "oppos": [559, 562], "publish": [559, 560, 562], "pre": [559, 560, 562], "binari": [559, 562, 566], "linux": [559, 560, 562], "x86": 559, "x86_64": [559, 560, 562], "aarch64": [559, 560, 562], "s390x": [559, 560, 562], "ppc64le": [559, 560, 562], "maco": [559, 560, 562], "arm64": [559, 560, 562], "window": [559, 560], "wish": 559, "expos": [559, 561, 562], "renam": [559, 562], "legaci": [559, 562], "now": [559, 562, 563, 564, 566], "usag": [559, 566], "came": 559, "tutori": [559, 563, 564], "guid": [559, 561, 566], "introduct": [559, 560, 562, 565], "52": 559, "contribut": 559, "gap": [559, 562], "benchmark": 559, "pypi": [560, 562], "i686": 560, "64": [560, 562], "rustup": 560, "simpler": 560, "reli": [560, 562, 566], "properli": [560, 562], "prebuilt": 560, "pep": 560, "517": [560, 562], "setuptool": 560, "reciev": 560, "again": [560, 562, 566], "strive": 560, "broken": 560, "level": [560, 561], "architectur": 560, "manylinux": 560, "2014": 560, "pp64le": 560, "musl": [560, 562], "newer": [560, 562], "ci": [560, 562], "upstream": [560, 562], "correctli": [560, 562], "best": [560, 564], "introductori": 561, "impli": [561, 564], "inspir": 561, "util": 561, "offer": 561, "boundari": 561, "decis": 561, "aspect": 561, "dynam": [561, 562], "put": 561, "nx": [561, 562], "multidigraph": 561, "my_node_a": 561, "my_node_b": 561, "constraint": [561, 562, 566], "That": 561, "migrat": 561, "similarli": [561, 566], "dist_matrix": 561, "extend_from": 561, "concis": 561, "graph_": 561, "digraph_": 561, "pretti": 561, "referenc": 561, "concept": [561, 562, 564], "dedic": [561, 566], "fridai": [561, 562, 566], "mondai": [561, 562, 566], "But": [561, 562, 564], "analog": [561, 562], "5pm": 561, "2pm": 561, "room": 561, "714": 561, "accessor": 561, "dtype": [561, 562], "astyp": 561, "to_numpy_matrix": 561, "to_numpy_arrai": 561, "to_numpy_recarrai": 561, "to_scipy_sparse_matrix": 561, "to_pandas_adjac": 561, "scipi": 561, "csr": 561, "spars": [561, 562], "per": [561, 562], "digraph_adjacency_matrix": [561, 562], "graph_adjacency_matrix": [561, 562], "networkx_draw": 561, "pygraphviz": 561, "varieti": 561, "strictli": [561, 562, 564], "retwork": [561, 562], "draw_networkx": 561, "fork": 561, "nodelist": 561, "arrows": 561, "mpl_drawer": [561, 562], "draw_networkx_edge_label": 561, "networkx_convert": [561, 562], "respons": 561, "accordingli": 561, "unwant": 561, "convert_rustworkx_to_networkx": 561, "isinst": 561, "matur": 561, "wide": [561, 566], "younger": 561, "enhanc": 561, "request": [561, 562], "issu": [561, 562], "priorit": 561, "connected_subgraph": 562, "polynomi": 562, "brute": 562, "magnitud": 562, "address": 562, "experiment": 562, "christian": 562, "komusiewicz": 562, "sommer": 562, "gain": 562, "discuss": [562, 566], "lemma": 562, "thu": 562, "intermedi": 562, "speedup": 562, "40": 562, "nameabl": 562, "particularli": 562, "quadrat": 562, "remove_node_retain_edg": 562, "suppli": 562, "wheel": 562, "abi": 562, "storag": 562, "mirror": 562, "onlin": 562, "meaningless": 562, "sizeabl": 562, "condition": 562, "alloc": 562, "temporari": 562, "70": 562, "panicexcept": 562, "moment": 562, "1117": 562, "hint": 562, "1130": 562, "long": [562, 566], "promot": 562, "tier": 562, "previous": 562, "blog": 562, "changelog": 562, "2024": 562, "m1": 562, "switch": 562, "tox": 562, "highlight": 562, "downgrad": 562, "directed_barabasi_albert_graph": 562, "barabasi_albert_graph": 562, "starting_graph": 562, "20": 562, "graph_all_shortest_path": 562, "shortest_path": 562, "heavy_square_graph": 562, "bridges_set": 562, "clear_edg": 562, "edge_indices_from_endpoint": 562, "filter_nod": 562, "abstract": 562, "filter_edg": 562, "substitute_node_with_subgraph": [562, 564], "sub_graph": 562, "___": 562, "stratifi": 562, "graphnotbipartit": 562, "directed_random_bipartite_graph": 562, "undirected_random_bipartite_graph": 562, "bipartite_layout": 562, "66666667": 562, "entir": 562, "invalidmap": 562, "graph_token_swapp": 562, "feasibl": 562, "path_exist": 562, "preset_color": 562, "greedy_node_color_with_preset_color": 562, "greedy_node_color": 562, "transtiv": 562, "tr": 562, "ref": 562, "wikipedia": 562, "wiki": 562, "msrv": 562, "56": 562, "adopt": [562, 566], "difficult": 562, "catch": 562, "unhandl": 562, "token_swapp": 562, "vec": 562, "nodeindex": 562, "mapnotposs": 562, "ungraph": 562, "from_edg": 562, "hashmap": 562, "err": 562, "panick": 562, "funciton": 562, "pllatform": 562, "infrastructur": 562, "hopefulli": 562, "shouldn": 562, "likelihood": 562, "precompil": [562, 566], "polici": 562, "74": 562, "deprecationwarn": 562, "graph_all_simple_path": 562, "digraph_all_simple_path": 562, "955": 562, "gnp_random_graph": 562, "pin": 562, "seri": [562, 564], "unreleas": 562, "soon": 562, "prevent": [562, 566], "manag": 562, "older": 562, "incompat": 562, "forcibli": 562, "alongsid": 562, "expans": 562, "expand": 562, "suport": 562, "make_symmetr": 562, "83x443": 562, "5x5": 562, "grid_graph": 562, "btw": [562, 563], "find_cycl": 562, "directed_hexagonal_lattice_graph": 562, "hub_scor": 562, "650": 562, "2f": [562, 563], "centrality_scor": 562, "binomial_tree_graph": 562, "31": 562, "28": 562, "path_set": 562, "longest_simple_path_multiple_target": 562, "hashset": 562, "pagerank_scor": 562, "gnm_random_graph": 562, "random_geometric_graph": 562, "bread": 562, "find_predecessor_node_by_edg": 562, "colorbar": [562, 563], "rcparam": [562, 563], "figsiz": [562, 563], "gca": [562, 563], "sm": [562, 563], "cm": [562, 563], "scalarmapp": [562, 563], "norm": [562, 563], "titl": [562, 563], "1500x1000": [562, 563], "empty_graph": 562, "directed_empty_graph": 562, "directed_complete_graph": 562, "mesh_graph": [562, 566], "directed_mesh_graph": 562, "trait": 562, "gnp_directed_random_graph": 562, "gnp_undirected_random_graph": 562, "situat": 562, "48": 562, "well": 562, "facilit": 562, "deepcopi": 562, "836": 562, "incorrectli": 562, "flatten": 562, "744": 562, "node_remov": 562, "reflect": 562, "previosuli": 562, "certain": 562, "696": 562, "formerli": 562, "maintain": 562, "notif": 562, "manylinux2014": 562, "parser": 562, "read_graphml": 562, "node_link_json": 562, "cut_val": 562, "orang": 562, "graph_tensor_product": 562, "digraph_tensor_product": 562, "all_simple_paths_multiple_target": 562, "algo": 562, "dictmap": 562, "preserve_attribut": 562, "k_5": 562, "bfs_undirect": 562, "xml": [562, 566], "manylinux2010": 562, "glibc": 562, "sdist": 562, "41": 562, "rustc": 562, "bfsssuccessor": 562, "slice": 562, "__getitem__": 562, "did": 562, "590": 562, "amd": 562, "digraph_cartesian_product": 562, "graph_cartesian_product": 562, "throughout": 562, "eventu": 562, "account": 562, "barbell_graph": 562, "graph_bfs_search": 562, "digraph_bfs_search": 562, "remain": [562, 566], "comp": 562, "150": 562, "color_edg": 562, "edges_in_chain": 562, "idx": 562, "adj_matrix": 562, "1j": 562, "2j": 562, "5j": 562, "contract_nod": [562, 564], "multi": 562, "guard": 562, "abc": 562, "graph_dfs_search": 562, "digraph_dfs_search": 562, "graph_dijkstra_search": 562, "digraph_dijkstra_search": 562, "dijkstratreeedgesrecord": 562, "discover_vertex": 562, "edge_relax": 562, "incident_edg": [562, 566], "incident_edge_index_map": 562, "endoint": 562, "achiev": 562, "full_rary_tre": 562, "lollipop_graph": [562, 566], "abil": 562, "freed": 562, "workspac": 562, "downstream": 562, "stabil": 562, "necessarili": 562, "turquois": 562, "fuschia": 562, "rx_graph": 562, "arguabl": 562, "desir": 562, "undirected_gnm_random_graph": 562, "42": [562, 566], "d_mat": 562, "avg_shortest_path": 562, "directed_binomial_tree_graph": 562, "overflow": 562, "panic": 562, "exceed": 562, "457": 562, "increment": 562, "515": 562, "oversight": 562, "525": 562, "heavy_hex_graph": [562, 566], "directed_heavy_hex_graph": 562, "directed_heavy_square_graph": 562, "pyo3_runtim": 562, "452": 562, "bugfix": 562, "importantli": 562, "graph_union": 562, "digraph_union": 562, "unifi": 562, "a_0": 562, "a_1": 562, "b_0": 562, "b_1": 562, "find_node_by_weight": 562, "432": 562, "429": 562, "hash": 562, "367": 562, "slew": 562, "1080": 562, "0022250x": 562, "9990249": 562, "secondli": 562, "edge_subgraph": 562, "ap": 562, "prx": 562, "1103": 562, "physrevx": 562, "011022": 562, "read_edge_list": [562, 566], "first_edg": 562, "second_edg": 562, "original_graph": 562, "_sourc": 562, "_target": 562, "_weight": 562, "17": 562, "21": 562, "22": 562, "23": 562, "26": 562, "27": 562, "to_direct": 562, "rework": 562, "graph_floyd_warshal": 562, "digraph_floyd_warshal": 562, "to_undirect": 562, "control": 562, "undirected_graph": 562, "digraph_num_shortest_paths_unweight": 562, "graph_num_shortest_paths_unweight": 562, "has_parallel_edg": 562, "directed_grid_graph": 562, "33": 562, "path_length": 562, "lambda_": 562, "fashion": 562, "explicit": 562, "408": 562, "digraph_dijkstra_shortest_path": 562, "graph_dijkstra_shortest_path": 562, "digraph_all_pairs_dijkstra_shortest_path": 562, "graph_all_pairs_dijkstra_shortest_path": 562, "387": 562, "consecut": 562, "373": 562, "347": 562, "plethora": 562, "drawer": 562, "spring_layout": [562, 566], "convienc": 562, "preclud": 562, "95": 562, "random_layout": 562, "graph_random_layout": 562, "diraph_random_layout": 562, "circl": [562, 563, 566], "fixeds": 562, "527x579": 562, "immut": 562, "coeffici": 562, "digraph_all_pairs_dijkstra_path_length": 562, "graph_all_pairs_dijkstra_path_length": 562, "edge_index_map": [562, 566], "source_node_index": 562, "target_node_index": 562, "find_successors_by_edg": 562, "find_predecessors_by_edg": 562, "mst": 562, "tweak": 562, "00ffff": 562, "directed_cycle_graph": [562, 564], "to_dot": 562, "circular_layout": 562, "spiral_layout": 562, "795x1031": 562, "352x356": 562, "write_edge_list": 562, "digraph_k_shortest_path_length": 562, "graph_k_shortest_path_length": 562, "digraph_dijkstra_shortest_path_length": 562, "graph_dijkstra_shortest_path_length": 562, "predecessor_indic": 562, "dispatch": 562, "mistakenli": 562, "appl": 562, "arm": 562, "outward": 562, "371x155": 562, "is_maxmimal_match": 562, "disallow": 562, "145x291": 562, "143x291": 562, "queri": 562, "__str__": [562, 566], "human": 562, "readabl": [562, 566], "__hash__": 562, "unhash": 562, "update_edg": [562, 566], "garbag": 562, "collector": 562, "know": 562, "integr": [562, 566], "250": 562, "pickl": 562, "multiprocess": 562, "lookup": 562, "graph_astar_shortest_path": 562, "digraph_astar_shortest_path": 562, "digraph_dfs_edg": 562, "graph_dfs_edg": 562, "lock": 562, "meant": 562, "focu": 562, "commonli": 562, "is_symmetr": 562, "directed_gnm_random_graph": 562, "remove_edges_from": [562, 566], "removed_edges_from": 562, "graph_distance_matrix": 562, "digraph_distance_matrix": 562, "insert_node_on_in_edg": 562, "insert_node_on_out_edg": 562, "insert_node_on_in_edges_multipl": 562, "insert_node_on_out_edges_multipl": 562, "contigu": [562, 563, 566], "fortran": 562, "easier": 562, "defer": 562, "convers": 562, "bottleneck": 562, "especi": [562, 566], "across": 562, "172": 562, "eas": 562, "graphivz": 562, "compos": 562, "predecesor": 562, "warshal": 562, "segfault": 562, "backtrac": 562, "problemat": 562, "thank": 562, "contributor": 562, "find_adjacent_node_by_edg": 562, "remove_nodes_from": [562, 566], "No": 562, "export": 562, "special": 562, "pprint": 563, "007277212457600987": 563, "02047046385621779": 563, "07491079688119466": 563, "04242324126690451": 563, "09205321351482312": 563, "magma": 563, "color_nod": 563, "to_hex": 563, "keep_alpha": 563, "1076x910": 563, "explor": 564, "primer": 564, "broader": 564, "restrict": 564, "simultan": 564, "walk": 564, "imposs": 564, "dependency_dag": 564, "job_a": 564, "job_b": 564, "job_c": 564, "job_d": 564, "job_": 564, "job_f": 564, "330x347": 564, "relationship": 564, "releationship": 564, "topo_sort": 564, "job_index": 564, "sdk": 564, "quantum": 564, "acceler": 564, "routin": 564, "coher": 564, "gate": 564, "reset": 564, "graphic": 564, "q_0": 564, "q_1": 564, "mea": 564, "beyond": 564, "fact": 564, "qubit": 564, "c_0": 564, "c_1": 564, "deped": 564, "in_nod": 564, "out_nod": 564, "h_gate": 564, "cx": 564, "cx_gate": 564, "meas_q0": 564, "meas_q1": 564, "q0": 564, "q1": 564, "401x523": 564, "flow": 564, "transform": 564, "hardwar": 564, "translat": 564, "devic": 564, "qpu": 564, "didn": 564, "translation_matrix": 564, "rz": 564, "pi": 564, "sx": 564, "insruct": 564, "hardware_instruct": 564, "subcircuit": 564, "gate_index": 564, "edge_v": 564, "equivalent_subcircuit": 564, "map_fn": 564, "401x755": 564, "analyz": 564, "shorter": 564, "bit_nod": 564, "unitari": 564, "simplif": 564, "newest": 564, "nod": 564, "_node_id": 564, "wouldn": 564, "serv": 566, "past": 566, "shorten": 566, "convent": 566, "compris": 566, "green": 566, "first_index_data": 566, "first_index_edgepoint": 566, "helper": 566, "remove_edg": 566, "remove_edge_from_index": 566, "absent": 566, "last_index": 566, "simplic": 566, "graphnod": 566, "graphedg": 566, "edgenod": 566, "popul": 566, "notion": 566, "show": 566, "lolipop_graph": 566, "combined_graph": 566, "new_nod": 566, "spam": 566, "375": 566, "subax1": 566, "subplot": 566, "121": 566, "subax2": 566, "122": 566, "attr_dict": 566, "fill_color": 566, "syndrom": 566, "elif": 566, "fontcolor": 566, "2132x2297": 566, "decid": 566, "few": 566, "consider": 566, "choic": 566}, "objects": {"rustworkx": [[25, 0, 1, "", "AllPairsPathLengthMapping"], [29, 0, 1, "", "AllPairsPathMapping"], [33, 0, 1, "", "BFSPredecessors"], [34, 0, 1, "", "BFSSuccessors"], [35, 0, 1, "", "BiconnectedComponents"], [39, 0, 1, "", "CentralityMapping"], [43, 0, 1, "", "Chains"], [44, 2, 1, "", "DAGHasCycle"], [45, 2, 1, "", "DAGWouldCycle"], [46, 0, 1, "", "EdgeCentralityMapping"], [50, 0, 1, "", "EdgeIndexMap"], [54, 0, 1, "", "EdgeIndices"], [55, 0, 1, "", "EdgeList"], [56, 2, 1, "", "GraphNotBipartite"], [57, 2, 1, "", "InvalidMapping"], [58, 2, 1, "", "InvalidNode"], [59, 2, 1, "", "JSONSerializationError"], [60, 2, 1, "", "NegativeCycle"], [61, 2, 1, "", "NoEdgeBetweenNodes"], [62, 2, 1, "", "NoPathFound"], [63, 2, 1, "", "NoSuitableNeighbors"], [64, 0, 1, "", "NodeIndices"], [65, 0, 1, "", "NodeMap"], [69, 2, 1, "", "NullGraph"], [70, 0, 1, "", "PathLengthMapping"], [74, 0, 1, "", "PathMapping"], [78, 0, 1, "", "Pos2DMapping"], [82, 0, 1, "", "ProductNodeMap"], [86, 0, 1, "", "PyDAG"], [166, 0, 1, "", "PyDiGraph"], [246, 0, 1, "", "PyGraph"], [303, 0, 1, "", "TopologicalSorter"], [307, 0, 1, "", "WeightedEdgeList"], [308, 4, 1, "", "adjacency_matrix"], [309, 4, 1, "", "all_pairs_all_simple_paths"], [310, 4, 1, "", "all_pairs_bellman_ford_path_lengths"], [311, 4, 1, "", "all_pairs_bellman_ford_shortest_paths"], [312, 4, 1, "", "all_pairs_dijkstra_path_lengths"], [313, 4, 1, "", "all_pairs_dijkstra_shortest_paths"], [314, 4, 1, "", "all_shortest_paths"], [315, 4, 1, "", "all_simple_paths"], [316, 4, 1, "", "ancestors"], [317, 4, 1, "", "articulation_points"], [318, 4, 1, "", "astar_shortest_path"], [319, 4, 1, "", "barabasi_albert_graph"], [320, 4, 1, "", "bellman_ford_shortest_path_lengths"], [321, 4, 1, "", "bellman_ford_shortest_paths"], [322, 4, 1, "", "betweenness_centrality"], [323, 4, 1, "", "bfs_predecessors"], [324, 4, 1, "", "bfs_search"], [325, 4, 1, "", "bfs_successors"], [326, 4, 1, "", "biconnected_components"], [327, 4, 1, "", "bipartite_layout"], [328, 4, 1, "", "bridges"], [329, 4, 1, "", "cartesian_product"], [330, 4, 1, "", "chain_decomposition"], [331, 4, 1, "", "circular_layout"], [332, 4, 1, "", "closeness_centrality"], [333, 4, 1, "", "collect_bicolor_runs"], [334, 4, 1, "", "collect_runs"], [335, 4, 1, "", "complement"], [336, 4, 1, "", "connected_components"], [337, 4, 1, "", "core_number"], [338, 4, 1, "", "cycle_basis"], [339, 4, 1, "", "dag_longest_path"], [340, 4, 1, "", "dag_longest_path_length"], [341, 4, 1, "", "dag_weighted_longest_path"], [342, 4, 1, "", "dag_weighted_longest_path_length"], [343, 4, 1, "", "descendants"], [344, 4, 1, "", "dfs_edges"], [345, 4, 1, "", "dfs_search"], [346, 4, 1, "", "digraph_adjacency_matrix"], [347, 4, 1, "", "digraph_all_pairs_all_simple_paths"], [348, 4, 1, "", "digraph_all_pairs_bellman_ford_path_lengths"], [349, 4, 1, "", "digraph_all_pairs_bellman_ford_shortest_paths"], [350, 4, 1, "", "digraph_all_pairs_dijkstra_path_lengths"], [351, 4, 1, "", "digraph_all_pairs_dijkstra_shortest_paths"], [352, 4, 1, "", "digraph_all_shortest_paths"], [353, 4, 1, "", "digraph_all_simple_paths"], [354, 4, 1, "", "digraph_astar_shortest_path"], [355, 4, 1, "", "digraph_bellman_ford_shortest_path_lengths"], [356, 4, 1, "", "digraph_betweenness_centrality"], [357, 4, 1, "", "digraph_bfs_search"], [358, 4, 1, "", "digraph_bipartite_layout"], [359, 4, 1, "", "digraph_cartesian_product"], [360, 4, 1, "", "digraph_circular_layout"], [361, 4, 1, "", "digraph_closeness_centrality"], [362, 4, 1, "", "digraph_complement"], [363, 4, 1, "", "digraph_core_number"], [364, 4, 1, "", "digraph_dfs_edges"], [365, 4, 1, "", "digraph_dfs_search"], [366, 4, 1, "", "digraph_dijkstra_search"], [367, 4, 1, "", "digraph_dijkstra_shortest_path_lengths"], [368, 4, 1, "", "digraph_dijkstra_shortest_paths"], [369, 4, 1, "", "digraph_distance_matrix"], [370, 4, 1, "", "digraph_edge_betweenness_centrality"], [371, 4, 1, "", "digraph_eigenvector_centrality"], [372, 4, 1, "", "digraph_find_cycle"], [373, 4, 1, "", "digraph_floyd_warshall"], [374, 4, 1, "", "digraph_floyd_warshall_numpy"], [375, 4, 1, "", "digraph_floyd_warshall_successor_and_distance"], [376, 4, 1, "", "digraph_is_isomorphic"], [377, 4, 1, "", "digraph_is_subgraph_isomorphic"], [378, 4, 1, "", "digraph_k_shortest_path_lengths"], [379, 4, 1, "", "digraph_katz_centrality"], [380, 4, 1, "", "digraph_longest_simple_path"], [381, 4, 1, "", "digraph_node_link_json"], [382, 4, 1, "", "digraph_num_shortest_paths_unweighted"], [383, 4, 1, "", "digraph_random_layout"], [384, 4, 1, "", "digraph_shell_layout"], [385, 4, 1, "", "digraph_spiral_layout"], [386, 4, 1, "", "digraph_spring_layout"], [387, 4, 1, "", "digraph_tensor_product"], [388, 4, 1, "", "digraph_transitivity"], [389, 4, 1, "", "digraph_union"], [390, 4, 1, "", "digraph_unweighted_average_shortest_path_length"], [391, 4, 1, "", "digraph_vf2_mapping"], [392, 4, 1, "", "dijkstra_search"], [393, 4, 1, "", "dijkstra_shortest_path_lengths"], [394, 4, 1, "", "dijkstra_shortest_paths"], [395, 4, 1, "", "directed_barabasi_albert_graph"], [396, 4, 1, "", "directed_gnm_random_graph"], [397, 4, 1, "", "directed_gnp_random_graph"], [398, 4, 1, "", "directed_random_bipartite_graph"], [399, 4, 1, "", "distance_matrix"], [400, 4, 1, "", "edge_betweenness_centrality"], [401, 4, 1, "", "eigenvector_centrality"], [402, 4, 1, "", "find_negative_cycle"], [403, 4, 1, "", "floyd_warshall"], [404, 4, 1, "", "floyd_warshall_numpy"], [405, 4, 1, "", "floyd_warshall_successor_and_distance"], [432, 4, 1, "", "graph_adjacency_matrix"], [433, 4, 1, "", "graph_all_pairs_all_simple_paths"], [434, 4, 1, "", "graph_all_pairs_bellman_ford_path_lengths"], [435, 4, 1, "", "graph_all_pairs_bellman_ford_shortest_paths"], [436, 4, 1, "", "graph_all_pairs_dijkstra_path_lengths"], [437, 4, 1, "", "graph_all_pairs_dijkstra_shortest_paths"], [438, 4, 1, "", "graph_all_shortest_paths"], [439, 4, 1, "", "graph_all_simple_paths"], [440, 4, 1, "", "graph_astar_shortest_path"], [441, 4, 1, "", "graph_bellman_ford_shortest_path_lengths"], [442, 4, 1, "", "graph_betweenness_centrality"], [443, 4, 1, "", "graph_bfs_search"], [444, 4, 1, "", "graph_bipartite_edge_color"], [445, 4, 1, "", "graph_bipartite_layout"], [446, 4, 1, "", "graph_cartesian_product"], [447, 4, 1, "", "graph_circular_layout"], [448, 4, 1, "", "graph_closeness_centrality"], [449, 4, 1, "", "graph_complement"], [450, 4, 1, "", "graph_core_number"], [451, 4, 1, "", "graph_dfs_edges"], [452, 4, 1, "", "graph_dfs_search"], [453, 4, 1, "", "graph_dijkstra_search"], [454, 4, 1, "", "graph_dijkstra_shortest_path_lengths"], [455, 4, 1, "", "graph_dijkstra_shortest_paths"], [456, 4, 1, "", "graph_distance_matrix"], [457, 4, 1, "", "graph_edge_betweenness_centrality"], [458, 4, 1, "", "graph_eigenvector_centrality"], [459, 4, 1, "", "graph_floyd_warshall"], [460, 4, 1, "", "graph_floyd_warshall_numpy"], [461, 4, 1, "", "graph_floyd_warshall_successor_and_distance"], [462, 4, 1, "", "graph_greedy_color"], [463, 4, 1, "", "graph_greedy_edge_color"], [464, 4, 1, "", "graph_is_isomorphic"], [465, 4, 1, "", "graph_is_subgraph_isomorphic"], [466, 4, 1, "", "graph_k_shortest_path_lengths"], [467, 4, 1, "", "graph_katz_centrality"], [468, 4, 1, "", "graph_line_graph"], [469, 4, 1, "", "graph_longest_simple_path"], [470, 4, 1, "", "graph_misra_gries_edge_color"], [471, 4, 1, "", "graph_node_link_json"], [472, 4, 1, "", "graph_num_shortest_paths_unweighted"], [473, 4, 1, "", "graph_random_layout"], [474, 4, 1, "", "graph_shell_layout"], [475, 4, 1, "", "graph_spiral_layout"], [476, 4, 1, "", "graph_spring_layout"], [477, 4, 1, "", "graph_tensor_product"], [478, 4, 1, "", "graph_token_swapper"], [479, 4, 1, "", "graph_transitivity"], [480, 4, 1, "", "graph_union"], [481, 4, 1, "", "graph_unweighted_average_shortest_path_length"], [482, 4, 1, "", "graph_vf2_mapping"], [483, 4, 1, "", "has_path"], [484, 4, 1, "", "hits"], [485, 4, 1, "", "is_bipartite"], [486, 4, 1, "", "is_connected"], [487, 4, 1, "", "is_directed_acyclic_graph"], [488, 4, 1, "", "is_isomorphic"], [489, 4, 1, "", "is_isomorphic_node_match"], [490, 4, 1, "", "is_matching"], [491, 4, 1, "", "is_maximal_matching"], [492, 4, 1, "", "is_planar"], [493, 4, 1, "", "is_subgraph_isomorphic"], [494, 4, 1, "", "is_weakly_connected"], [495, 4, 1, "", "isolates"], [496, 4, 1, "", "k_shortest_path_lengths"], [497, 4, 1, "", "katz_centrality"], [498, 4, 1, "", "layers"], [499, 4, 1, "", "lexicographical_topological_sort"], [500, 4, 1, "", "longest_simple_path"], [501, 4, 1, "", "max_weight_matching"], [502, 4, 1, "", "metric_closure"], [503, 4, 1, "", "minimum_spanning_edges"], [504, 4, 1, "", "minimum_spanning_tree"], [505, 4, 1, "", "negative_edge_cycle"], [506, 4, 1, "", "networkx_converter"], [507, 4, 1, "", "node_connected_component"], [508, 4, 1, "", "node_link_json"], [509, 4, 1, "", "num_shortest_paths_unweighted"], [510, 4, 1, "", "number_connected_components"], [511, 4, 1, "", "number_weakly_connected_components"], [512, 4, 1, "", "pagerank"], [513, 4, 1, "", "random_geometric_graph"], [514, 4, 1, "", "random_layout"], [515, 4, 1, "", "read_graphml"], [516, 4, 1, "", "shell_layout"], [517, 4, 1, "", "simple_cycles"], [518, 4, 1, "", "spiral_layout"], [519, 4, 1, "", "spring_layout"], [520, 4, 1, "", "steiner_tree"], [521, 4, 1, "", "stoer_wagner_min_cut"], [522, 4, 1, "", "strongly_connected_components"], [523, 4, 1, "", "topological_generations"], [524, 4, 1, "", "topological_sort"], [525, 4, 1, "", "transitive_reduction"], [526, 4, 1, "", "transitivity"], [527, 4, 1, "", "two_color"], [528, 4, 1, "", "undirected_gnm_random_graph"], [529, 4, 1, "", "undirected_gnp_random_graph"], [530, 4, 1, "", "undirected_random_bipartite_graph"], [531, 4, 1, "", "union"], [532, 4, 1, "", "unweighted_average_shortest_path_length"], [533, 4, 1, "", "vf2_mapping"], [557, 4, 1, "", "weakly_connected_components"]], "rustworkx.AllPairsPathLengthMapping": [[26, 1, 1, "", "items"], [27, 1, 1, "", "keys"], [28, 1, 1, "", "values"]], "rustworkx.AllPairsPathMapping": [[30, 1, 1, "", "items"], [31, 1, 1, "", "keys"], [32, 1, 1, "", "values"]], "rustworkx.BiconnectedComponents": [[36, 1, 1, "", "items"], [37, 1, 1, "", "keys"], [38, 1, 1, "", "values"]], "rustworkx.CentralityMapping": [[40, 1, 1, "", "items"], [41, 1, 1, "", "keys"], [42, 1, 1, "", "values"]], "rustworkx.EdgeCentralityMapping": [[47, 1, 1, "", "items"], [48, 1, 1, "", "keys"], [49, 1, 1, "", "values"]], "rustworkx.EdgeIndexMap": [[51, 1, 1, "", "items"], [52, 1, 1, "", "keys"], [53, 1, 1, "", "values"]], "rustworkx.NodeMap": [[66, 1, 1, "", "items"], [67, 1, 1, "", "keys"], [68, 1, 1, "", "values"]], "rustworkx.PathLengthMapping": [[71, 1, 1, "", "items"], [72, 1, 1, "", "keys"], [73, 1, 1, "", "values"]], "rustworkx.PathMapping": [[75, 1, 1, "", "items"], [76, 1, 1, "", "keys"], [77, 1, 1, "", "values"]], "rustworkx.Pos2DMapping": [[79, 1, 1, "", "items"], [80, 1, 1, "", "keys"], [81, 1, 1, "", "values"]], "rustworkx.ProductNodeMap": [[83, 1, 1, "", "items"], [84, 1, 1, "", "keys"], [85, 1, 1, "", "values"]], "rustworkx.PyDAG": [[87, 1, 1, "", "add_child"], [88, 1, 1, "", "add_edge"], [89, 1, 1, "", "add_edges_from"], [90, 1, 1, "", "add_edges_from_no_data"], [91, 1, 1, "", "add_node"], [92, 1, 1, "", "add_nodes_from"], [93, 1, 1, "", "add_parent"], [94, 1, 1, "", "adj"], [95, 1, 1, "", "adj_direction"], [86, 3, 1, "", "attrs"], [86, 3, 1, "", "check_cycle"], [96, 1, 1, "", "clear"], [97, 1, 1, "", "clear_edges"], [98, 1, 1, "", "compose"], [99, 1, 1, "", "contract_nodes"], [100, 1, 1, "", "copy"], [101, 1, 1, "", "edge_index_map"], [102, 1, 1, "", "edge_indices"], [103, 1, 1, "", "edge_indices_from_endpoints"], [104, 1, 1, "", "edge_list"], [105, 1, 1, "", "edge_subgraph"], [106, 1, 1, "", "edges"], [107, 1, 1, "", "extend_from_edge_list"], [108, 1, 1, "", "extend_from_weighted_edge_list"], [109, 1, 1, "", "filter_edges"], [110, 1, 1, "", "filter_nodes"], [111, 1, 1, "", "find_adjacent_node_by_edge"], [112, 1, 1, "", "find_node_by_weight"], [113, 1, 1, "", "find_predecessor_node_by_edge"], [114, 1, 1, "", "find_predecessors_by_edge"], [115, 1, 1, "", "find_successors_by_edge"], [116, 1, 1, "", "from_adjacency_matrix"], [117, 1, 1, "", "from_complex_adjacency_matrix"], [118, 1, 1, "", "get_all_edge_data"], [119, 1, 1, "", "get_edge_data"], [120, 1, 1, "", "get_edge_data_by_index"], [121, 1, 1, "", "get_edge_endpoints_by_index"], [122, 1, 1, "", "get_node_data"], [123, 1, 1, "", "has_edge"], [124, 1, 1, "", "has_parallel_edges"], [125, 1, 1, "", "in_degree"], [126, 1, 1, "", "in_edges"], [127, 1, 1, "", "incident_edge_index_map"], [128, 1, 1, "", "incident_edges"], [129, 1, 1, "", "insert_node_on_in_edges"], [130, 1, 1, "", "insert_node_on_in_edges_multiple"], [131, 1, 1, "", "insert_node_on_out_edges"], [132, 1, 1, "", "insert_node_on_out_edges_multiple"], [133, 1, 1, "", "is_symmetric"], [134, 1, 1, "", "make_symmetric"], [135, 1, 1, "", "merge_nodes"], [86, 3, 1, "", "multigraph"], [136, 1, 1, "", "neighbors"], [137, 1, 1, "", "node_indexes"], [138, 1, 1, "", "node_indices"], [139, 1, 1, "", "nodes"], [140, 1, 1, "", "num_edges"], [141, 1, 1, "", "num_nodes"], [142, 1, 1, "", "out_degree"], [143, 1, 1, "", "out_edges"], [144, 1, 1, "", "predecessor_indices"], [145, 1, 1, "", "predecessors"], [146, 1, 1, "", "read_edge_list"], [147, 1, 1, "", "remove_edge"], [148, 1, 1, "", "remove_edge_from_index"], [149, 1, 1, "", "remove_edges_from"], [150, 1, 1, "", "remove_node"], [151, 1, 1, "", "remove_node_retain_edges"], [152, 1, 1, "", "remove_node_retain_edges_by_id"], [153, 1, 1, "", "remove_node_retain_edges_by_key"], [154, 1, 1, "", "remove_nodes_from"], [155, 1, 1, "", "reverse"], [156, 1, 1, "", "subgraph"], [157, 1, 1, "", "substitute_node_with_subgraph"], [158, 1, 1, "", "successor_indices"], [159, 1, 1, "", "successors"], [160, 1, 1, "", "to_dot"], [161, 1, 1, "", "to_undirected"], [162, 1, 1, "", "update_edge"], [163, 1, 1, "", "update_edge_by_index"], [164, 1, 1, "", "weighted_edge_list"], [165, 1, 1, "", "write_edge_list"]], "rustworkx.PyDiGraph": [[167, 1, 1, "", "add_child"], [168, 1, 1, "", "add_edge"], [169, 1, 1, "", "add_edges_from"], [170, 1, 1, "", "add_edges_from_no_data"], [171, 1, 1, "", "add_node"], [172, 1, 1, "", "add_nodes_from"], [173, 1, 1, "", "add_parent"], [174, 1, 1, "", "adj"], [175, 1, 1, "", "adj_direction"], [166, 3, 1, "", "attrs"], [166, 3, 1, "", "check_cycle"], [176, 1, 1, "", "clear"], [177, 1, 1, "", "clear_edges"], [178, 1, 1, "", "compose"], [179, 1, 1, "", "contract_nodes"], [180, 1, 1, "", "copy"], [181, 1, 1, "", "edge_index_map"], [182, 1, 1, "", "edge_indices"], [183, 1, 1, "", "edge_indices_from_endpoints"], [184, 1, 1, "", "edge_list"], [185, 1, 1, "", "edge_subgraph"], [186, 1, 1, "", "edges"], [187, 1, 1, "", "extend_from_edge_list"], [188, 1, 1, "", "extend_from_weighted_edge_list"], [189, 1, 1, "", "filter_edges"], [190, 1, 1, "", "filter_nodes"], [191, 1, 1, "", "find_adjacent_node_by_edge"], [192, 1, 1, "", "find_node_by_weight"], [193, 1, 1, "", "find_predecessor_node_by_edge"], [194, 1, 1, "", "find_predecessors_by_edge"], [195, 1, 1, "", "find_successors_by_edge"], [196, 1, 1, "", "from_adjacency_matrix"], [197, 1, 1, "", "from_complex_adjacency_matrix"], [198, 1, 1, "", "get_all_edge_data"], [199, 1, 1, "", "get_edge_data"], [200, 1, 1, "", "get_edge_data_by_index"], [201, 1, 1, "", "get_edge_endpoints_by_index"], [202, 1, 1, "", "get_node_data"], [203, 1, 1, "", "has_edge"], [204, 1, 1, "", "has_parallel_edges"], [205, 1, 1, "", "in_degree"], [206, 1, 1, "", "in_edges"], [207, 1, 1, "", "incident_edge_index_map"], [208, 1, 1, "", "incident_edges"], [209, 1, 1, "", "insert_node_on_in_edges"], [210, 1, 1, "", "insert_node_on_in_edges_multiple"], [211, 1, 1, "", "insert_node_on_out_edges"], [212, 1, 1, "", "insert_node_on_out_edges_multiple"], [213, 1, 1, "", "is_symmetric"], [214, 1, 1, "", "make_symmetric"], [215, 1, 1, "", "merge_nodes"], [166, 3, 1, "", "multigraph"], [216, 1, 1, "", "neighbors"], [217, 1, 1, "", "node_indexes"], [218, 1, 1, "", "node_indices"], [219, 1, 1, "", "nodes"], [220, 1, 1, "", "num_edges"], [221, 1, 1, "", "num_nodes"], [222, 1, 1, "", "out_degree"], [223, 1, 1, "", "out_edges"], [224, 1, 1, "", "predecessor_indices"], [225, 1, 1, "", "predecessors"], [226, 1, 1, "", "read_edge_list"], [227, 1, 1, "", "remove_edge"], [228, 1, 1, "", "remove_edge_from_index"], [229, 1, 1, "", "remove_edges_from"], [230, 1, 1, "", "remove_node"], [231, 1, 1, "", "remove_node_retain_edges"], [232, 1, 1, "", "remove_node_retain_edges_by_id"], [233, 1, 1, "", "remove_node_retain_edges_by_key"], [234, 1, 1, "", "remove_nodes_from"], [235, 1, 1, "", "reverse"], [236, 1, 1, "", "subgraph"], [237, 1, 1, "", "substitute_node_with_subgraph"], [238, 1, 1, "", "successor_indices"], [239, 1, 1, "", "successors"], [240, 1, 1, "", "to_dot"], [241, 1, 1, "", "to_undirected"], [242, 1, 1, "", "update_edge"], [243, 1, 1, "", "update_edge_by_index"], [244, 1, 1, "", "weighted_edge_list"], [245, 1, 1, "", "write_edge_list"]], "rustworkx.PyGraph": [[247, 1, 1, "", "add_edge"], [248, 1, 1, "", "add_edges_from"], [249, 1, 1, "", "add_edges_from_no_data"], [250, 1, 1, "", "add_node"], [251, 1, 1, "", "add_nodes_from"], [252, 1, 1, "", "adj"], [246, 3, 1, "", "attrs"], [253, 1, 1, "", "clear"], [254, 1, 1, "", "clear_edges"], [255, 1, 1, "", "compose"], [256, 1, 1, "", "contract_nodes"], [257, 1, 1, "", "copy"], [258, 1, 1, "", "degree"], [259, 1, 1, "", "edge_index_map"], [260, 1, 1, "", "edge_indices"], [261, 1, 1, "", "edge_indices_from_endpoints"], [262, 1, 1, "", "edge_list"], [263, 1, 1, "", "edge_subgraph"], [264, 1, 1, "", "edges"], [265, 1, 1, "", "extend_from_edge_list"], [266, 1, 1, "", "extend_from_weighted_edge_list"], [267, 1, 1, "", "filter_edges"], [268, 1, 1, "", "filter_nodes"], [269, 1, 1, "", "find_node_by_weight"], [270, 1, 1, "", "from_adjacency_matrix"], [271, 1, 1, "", "from_complex_adjacency_matrix"], [272, 1, 1, "", "get_all_edge_data"], [273, 1, 1, "", "get_edge_data"], [274, 1, 1, "", "get_edge_data_by_index"], [275, 1, 1, "", "get_edge_endpoints_by_index"], [276, 1, 1, "", "get_node_data"], [277, 1, 1, "", "has_edge"], [278, 1, 1, "", "has_parallel_edges"], [279, 1, 1, "", "in_edges"], [280, 1, 1, "", "incident_edge_index_map"], [281, 1, 1, "", "incident_edges"], [246, 3, 1, "", "multigraph"], [282, 1, 1, "", "neighbors"], [283, 1, 1, "", "node_indexes"], [284, 1, 1, "", "node_indices"], [285, 1, 1, "", "nodes"], [286, 1, 1, "", "num_edges"], [287, 1, 1, "", "num_nodes"], [288, 1, 1, "", "out_edges"], [289, 1, 1, "", "read_edge_list"], [290, 1, 1, "", "remove_edge"], [291, 1, 1, "", "remove_edge_from_index"], [292, 1, 1, "", "remove_edges_from"], [293, 1, 1, "", "remove_node"], [294, 1, 1, "", "remove_nodes_from"], [295, 1, 1, "", "subgraph"], [296, 1, 1, "", "substitute_node_with_subgraph"], [297, 1, 1, "", "to_directed"], [298, 1, 1, "", "to_dot"], [299, 1, 1, "", "update_edge"], [300, 1, 1, "", "update_edge_by_index"], [301, 1, 1, "", "weighted_edge_list"], [302, 1, 1, "", "write_edge_list"]], "rustworkx.TopologicalSorter": [[304, 1, 1, "", "done"], [305, 1, 1, "", "get_ready"], [306, 1, 1, "", "is_active"]], "rustworkx.generators": [[406, 4, 1, "", "barbell_graph"], [407, 4, 1, "", "binomial_tree_graph"], [408, 4, 1, "", "complete_graph"], [409, 4, 1, "", "cycle_graph"], [410, 4, 1, "", "directed_binomial_tree_graph"], [411, 4, 1, "", "directed_complete_graph"], [412, 4, 1, "", "directed_cycle_graph"], [413, 4, 1, "", "directed_empty_graph"], [414, 4, 1, "", "directed_grid_graph"], [415, 4, 1, "", "directed_heavy_hex_graph"], [416, 4, 1, "", "directed_heavy_square_graph"], [417, 4, 1, "", "directed_hexagonal_lattice_graph"], [418, 4, 1, "", "directed_mesh_graph"], [419, 4, 1, "", "directed_path_graph"], [420, 4, 1, "", "directed_star_graph"], [421, 4, 1, "", "empty_graph"], [422, 4, 1, "", "full_rary_tree"], [423, 4, 1, "", "generalized_petersen_graph"], [424, 4, 1, "", "grid_graph"], [425, 4, 1, "", "heavy_hex_graph"], [426, 4, 1, "", "heavy_square_graph"], [427, 4, 1, "", "hexagonal_lattice_graph"], [428, 4, 1, "", "lollipop_graph"], [429, 4, 1, "", "mesh_graph"], [430, 4, 1, "", "path_graph"], [431, 4, 1, "", "star_graph"]], "rustworkx.visit": [[534, 0, 1, "", "BFSVisitor"], [541, 0, 1, "", "DFSVisitor"], [547, 0, 1, "", "DijkstraVisitor"], [553, 2, 1, "", "PruneSearch"], [554, 2, 1, "", "StopSearch"]], "rustworkx.visit.BFSVisitor": [[535, 1, 1, "", "black_target_edge"], [536, 1, 1, "", "discover_vertex"], [537, 1, 1, "", "finish_vertex"], [538, 1, 1, "", "gray_target_edge"], [539, 1, 1, "", "non_tree_edge"], [540, 1, 1, "", "tree_edge"]], "rustworkx.visit.DFSVisitor": [[542, 1, 1, "", "back_edge"], [543, 1, 1, "", "discover_vertex"], [544, 1, 1, "", "finish_vertex"], [545, 1, 1, "", "forward_or_cross_edge"], [546, 1, 1, "", "tree_edge"]], "rustworkx.visit.DijkstraVisitor": [[548, 1, 1, "", "discover_vertex"], [549, 1, 1, "", "edge_not_relaxed"], [550, 1, 1, "", "edge_relaxed"], [551, 1, 1, "", "examine_edge"], [552, 1, 1, "", "finish_vertex"]], "rustworkx.visualization": [[555, 4, 1, "", "graphviz_draw"], [556, 4, 1, "", "mpl_draw"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:exception", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "exception", "Python exception"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"contribut": 0, "rustworkx": [0, 19, 26, 27, 28, 30, 31, 32, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566], "make": 0, "chang": 0, "code": 0, "modul": 0, "export": 0, "lib": 0, "r": 0, "ad": 0, "function": [0, 6, 10, 20, 21, 22, 23, 561], "directori": 0, "when": 0, "singl": [0, 558], "file": 0, "i": 0, "enough": 0, "core": [0, 559], "test": 0, "run": 0, "specif": 0, "python": 0, "version": 0, "subset": 0, "visual": [0, 555, 556, 561, 563, 567], "style": 0, "rust": 0, "lint": 0, "build": 0, "document": [0, 559], "type": [0, 15], "annot": 0, "releas": [0, 562], "note": [0, 562], "new": [0, 562], "link": [0, 8], "issu": 0, "gener": [0, 17, 23, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 563, 566], "local": 0, "pull": 0, "request": 0, "review": 0, "ci": 0, "merg": 0, "queue": 0, "stabl": 0, "branch": 0, "polici": 0, "backport": 0, "procedur": 0, "manual": 0, "central": [1, 563], "color": 2, "connect": 3, "cycl": 3, "dag": [4, 564], "algorithm": [4, 6, 10], "graph": [5, 18, 23, 558, 561, 563, 564, 566], "oper": [5, 566], "isomorph": [7, 558], "analysi": 8, "match": 9, "other": [10, 558, 562], "shortest": [11, 558], "path": [11, 558], "travers": 12, "tree": 13, "convert": [14, 561], "custom": 15, "return": 15, "except": 16, "class": [18, 561], "api": [19, 21, 22, 561, 567], "refer": 19, "layout": 20, "pydigraph": [21, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], "pygraph": [22, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], "random": 23, "serial": 24, "allpairspathlengthmap": [25, 26, 27, 28], "item": [26, 30, 36, 40, 47, 51, 66, 71, 75, 79, 83], "kei": [27, 31, 37, 41, 48, 52, 67, 72, 76, 80, 84, 561], "valu": [28, 32, 38, 42, 49, 53, 68, 73, 77, 81, 85], "allpairspathmap": [29, 30, 31, 32], "bfspredecessor": 33, "bfssuccessor": 34, "biconnectedcompon": [35, 36, 37, 38], "centralitymap": [39, 40, 41, 42], "chain": 43, "daghascycl": 44, "dagwouldcycl": 45, "edgecentralitymap": [46, 47, 48, 49], "edgeindexmap": [50, 51, 52, 53], "edgeindic": 54, "edgelist": 55, "graphnotbipartit": 56, "invalidmap": 57, "invalidnod": 58, "jsonserializationerror": 59, "negativecycl": 60, "noedgebetweennod": 61, "nopathfound": 62, "nosuitableneighbor": 63, "nodeindic": 64, "nodemap": [65, 66, 67, 68], "nullgraph": 69, "pathlengthmap": [70, 71, 72, 73], "pathmap": [74, 75, 76, 77], "pos2dmap": [78, 79, 80, 81], "productnodemap": [82, 83, 84, 85], "pydag": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], "add_child": [87, 167], "add_edg": [88, 168, 247], "add_edges_from": [89, 169, 248], "add_edges_from_no_data": [90, 170, 249], "add_nod": [91, 171, 250], "add_nodes_from": [92, 172, 251], "add_par": [93, 173], "adj": [94, 174, 252], "adj_direct": [95, 175], "clear": [96, 176, 253], "clear_edg": [97, 177, 254], "compos": [98, 178, 255], "contract_nod": [99, 179, 256], "copi": [100, 180, 257], "edge_index_map": [101, 181, 259], "edge_indic": [102, 182, 260], "edge_indices_from_endpoint": [103, 183, 261], "edge_list": [104, 184, 262], "edge_subgraph": [105, 185, 263], "edg": [106, 186, 264, 561, 566], "extend_from_edge_list": [107, 187, 265], "extend_from_weighted_edge_list": [108, 188, 266], "filter_edg": [109, 189, 267], "filter_nod": [110, 190, 268], "find_adjacent_node_by_edg": [111, 191], "find_node_by_weight": [112, 192, 269], "find_predecessor_node_by_edg": [113, 193], "find_predecessors_by_edg": [114, 194], "find_successors_by_edg": [115, 195], "from_adjacency_matrix": [116, 196, 270], "from_complex_adjacency_matrix": [117, 197, 271], "get_all_edge_data": [118, 198, 272], "get_edge_data": [119, 199, 273], "get_edge_data_by_index": [120, 200, 274], "get_edge_endpoints_by_index": [121, 201, 275], "get_node_data": [122, 202, 276], "has_edg": [123, 203, 277], "has_parallel_edg": [124, 204, 278], "in_degre": [125, 205], "in_edg": [126, 206, 279], "incident_edge_index_map": [127, 207, 280], "incident_edg": [128, 208, 281], "insert_node_on_in_edg": [129, 209], "insert_node_on_in_edges_multipl": [130, 210], "insert_node_on_out_edg": [131, 211], "insert_node_on_out_edges_multipl": [132, 212], "is_symmetr": [133, 213], "make_symmetr": [134, 214], "merge_nod": [135, 215], "neighbor": [136, 216, 282, 566], "node_index": [137, 217, 283], "node_indic": [138, 218, 284], "node": [139, 219, 285, 561, 566], "num_edg": [140, 220, 286], "num_nod": [141, 221, 287], "out_degre": [142, 222], "out_edg": [143, 223, 288], "predecessor_indic": [144, 224], "predecessor": [145, 225], "read_edge_list": [146, 226, 289], "remove_edg": [147, 227, 290], "remove_edge_from_index": [148, 228, 291], "remove_edges_from": [149, 229, 292], "remove_nod": [150, 230, 293], "remove_node_retain_edg": [151, 231], "remove_node_retain_edges_by_id": [152, 232], "remove_node_retain_edges_by_kei": [153, 233], "remove_nodes_from": [154, 234, 294], "revers": [155, 235], "subgraph": [156, 236, 295, 558], "substitute_node_with_subgraph": [157, 237, 296], "successor_indic": [158, 238], "successor": [159, 239], "to_dot": [160, 240, 298], "to_undirect": [161, 241], "update_edg": [162, 242, 299], "update_edge_by_index": [163, 243, 300], "weighted_edge_list": [164, 244, 301], "write_edge_list": [165, 245, 302], "degre": 258, "to_direct": 297, "topologicalsort": [303, 304, 305, 306], "done": 304, "get_readi": 305, "is_act": 306, "weightededgelist": 307, "adjacency_matrix": 308, "all_pairs_all_simple_path": 309, "all_pairs_bellman_ford_path_length": 310, "all_pairs_bellman_ford_shortest_path": 311, "all_pairs_dijkstra_path_length": 312, "all_pairs_dijkstra_shortest_path": 313, "all_shortest_path": 314, "all_simple_path": 315, "ancestor": 316, "articulation_point": 317, "astar_shortest_path": 318, "barabasi_albert_graph": 319, "bellman_ford_shortest_path_length": 320, "bellman_ford_shortest_path": 321, "betweenness_centr": 322, "see": [322, 356, 370, 400, 442, 457], "also": [322, 356, 370, 400, 442, 457], "bfs_predecessor": 323, "bfs_search": 324, "bfs_successor": 325, "biconnected_compon": 326, "bipartite_layout": 327, "bridg": 328, "cartesian_product": 329, "chain_decomposit": 330, "circular_layout": 331, "closeness_centr": 332, "collect_bicolor_run": 333, "collect_run": 334, "complement": 335, "connected_compon": 336, "core_numb": 337, "cycle_basi": 338, "dag_longest_path": 339, "dag_longest_path_length": 340, "dag_weighted_longest_path": 341, "dag_weighted_longest_path_length": 342, "descend": 343, "dfs_edg": 344, "dfs_search": 345, "digraph_adjacency_matrix": 346, "digraph_all_pairs_all_simple_path": 347, "digraph_all_pairs_bellman_ford_path_length": 348, "digraph_all_pairs_bellman_ford_shortest_path": 349, "digraph_all_pairs_dijkstra_path_length": 350, "digraph_all_pairs_dijkstra_shortest_path": 351, "digraph_all_shortest_path": 352, "digraph_all_simple_path": 353, "digraph_astar_shortest_path": 354, "digraph_bellman_ford_shortest_path_length": 355, "digraph_betweenness_centr": 356, "digraph_bfs_search": 357, "digraph_bipartite_layout": 358, "digraph_cartesian_product": 359, "digraph_circular_layout": 360, "digraph_closeness_centr": 361, "digraph_compl": 362, "digraph_core_numb": 363, "digraph_dfs_edg": 364, "digraph_dfs_search": 365, "digraph_dijkstra_search": 366, "digraph_dijkstra_shortest_path_length": 367, "digraph_dijkstra_shortest_path": 368, "digraph_distance_matrix": 369, "digraph_edge_betweenness_centr": 370, "digraph_eigenvector_centr": 371, "digraph_find_cycl": 372, "digraph_floyd_warshal": 373, "digraph_floyd_warshall_numpi": 374, "digraph_floyd_warshall_successor_and_dist": 375, "digraph_is_isomorph": 376, "digraph_is_subgraph_isomorph": 377, "digraph_k_shortest_path_length": 378, "digraph_katz_centr": 379, "digraph_longest_simple_path": 380, "digraph_node_link_json": 381, "digraph_num_shortest_paths_unweight": 382, "digraph_random_layout": 383, "digraph_shell_layout": 384, "digraph_spiral_layout": 385, "digraph_spring_layout": 386, "digraph_tensor_product": 387, "digraph_transit": 388, "digraph_union": 389, "digraph_unweighted_average_shortest_path_length": 390, "digraph_vf2_map": 391, "dijkstra_search": 392, "dijkstra_shortest_path_length": 393, "dijkstra_shortest_path": 394, "directed_barabasi_albert_graph": 395, "directed_gnm_random_graph": 396, "directed_gnp_random_graph": 397, "directed_random_bipartite_graph": 398, "distance_matrix": 399, "edge_betweenness_centr": 400, "eigenvector_centr": 401, "find_negative_cycl": 402, "floyd_warshal": 403, "floyd_warshall_numpi": 404, "floyd_warshall_successor_and_dist": 405, "barbell_graph": 406, "binomial_tree_graph": 407, "complete_graph": 408, "cycle_graph": 409, "directed_binomial_tree_graph": 410, "directed_complete_graph": 411, "directed_cycle_graph": 412, "directed_empty_graph": 413, "directed_grid_graph": 414, "directed_heavy_hex_graph": 415, "directed_heavy_square_graph": 416, "directed_hexagonal_lattice_graph": 417, "directed_mesh_graph": 418, "directed_path_graph": 419, "directed_star_graph": 420, "empty_graph": 421, "full_rary_tre": 422, "generalized_petersen_graph": 423, "grid_graph": 424, "heavy_hex_graph": 425, "heavy_square_graph": 426, "hexagonal_lattice_graph": 427, "lollipop_graph": 428, "mesh_graph": 429, "path_graph": 430, "star_graph": 431, "graph_adjacency_matrix": 432, "graph_all_pairs_all_simple_path": 433, "graph_all_pairs_bellman_ford_path_length": 434, "graph_all_pairs_bellman_ford_shortest_path": 435, "graph_all_pairs_dijkstra_path_length": 436, "graph_all_pairs_dijkstra_shortest_path": 437, "graph_all_shortest_path": 438, "graph_all_simple_path": 439, "graph_astar_shortest_path": 440, "graph_bellman_ford_shortest_path_length": 441, "graph_betweenness_centr": 442, "graph_bfs_search": 443, "graph_bipartite_edge_color": 444, "graph_bipartite_layout": 445, "graph_cartesian_product": 446, "graph_circular_layout": 447, "graph_closeness_centr": 448, "graph_compl": 449, "graph_core_numb": 450, "graph_dfs_edg": 451, "graph_dfs_search": 452, "graph_dijkstra_search": 453, "graph_dijkstra_shortest_path_length": 454, "graph_dijkstra_shortest_path": 455, "graph_distance_matrix": 456, "graph_edge_betweenness_centr": 457, "graph_eigenvector_centr": 458, "graph_floyd_warshal": 459, "graph_floyd_warshall_numpi": 460, "graph_floyd_warshall_successor_and_dist": 461, "graph_greedy_color": 462, "graph_greedy_edge_color": 463, "graph_is_isomorph": 464, "graph_is_subgraph_isomorph": 465, "graph_k_shortest_path_length": 466, "graph_katz_centr": 467, "graph_line_graph": 468, "graph_longest_simple_path": 469, "graph_misra_gries_edge_color": 470, "graph_node_link_json": 471, "graph_num_shortest_paths_unweight": 472, "graph_random_layout": 473, "graph_shell_layout": 474, "graph_spiral_layout": 475, "graph_spring_layout": 476, "graph_tensor_product": 477, "graph_token_swapp": 478, "graph_transit": 479, "graph_union": 480, "graph_unweighted_average_shortest_path_length": 481, "graph_vf2_map": 482, "has_path": 483, "hit": 484, "is_bipartit": 485, "is_connect": 486, "is_directed_acyclic_graph": 487, "is_isomorph": 488, "is_isomorphic_node_match": 489, "is_match": 490, "is_maximal_match": 491, "is_planar": 492, "is_subgraph_isomorph": 493, "is_weakly_connect": 494, "isol": 495, "k_shortest_path_length": 496, "katz_centr": 497, "layer": 498, "lexicographical_topological_sort": 499, "longest_simple_path": 500, "max_weight_match": 501, "metric_closur": 502, "minimum_spanning_edg": 503, "minimum_spanning_tre": 504, "negative_edge_cycl": 505, "networkx_convert": 506, "node_connected_compon": 507, "node_link_json": 508, "num_shortest_paths_unweight": 509, "number_connected_compon": 510, "number_weakly_connected_compon": 511, "pagerank": 512, "random_geometric_graph": 513, "random_layout": 514, "read_graphml": 515, "shell_layout": 516, "simple_cycl": 517, "spiral_layout": 518, "spring_layout": 519, "steiner_tre": 520, "stoer_wagner_min_cut": 521, "strongly_connected_compon": 522, "topological_gener": 523, "topological_sort": 524, "transitive_reduct": 525, "transit": 526, "two_color": 527, "undirected_gnm_random_graph": 528, "undirected_gnp_random_graph": 529, "undirected_random_bipartite_graph": 530, "union": 531, "unweighted_average_shortest_path_length": 532, "vf2_map": 533, "bfsvisitor": [534, 535, 536, 537, 538, 539, 540], "visit": [535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554], "black_target_edg": 535, "discover_vertex": [536, 543, 548], "finish_vertex": [537, 544, 552], "gray_target_edg": 538, "non_tree_edg": 539, "tree_edg": [540, 546], "dfsvisitor": [541, 542, 543, 544, 545, 546], "back_edg": 542, "forward_or_cross_edg": 545, "dijkstravisitor": [547, 548, 549, 550, 551, 552], "edge_not_relax": 549, "edge_relax": 550, "examine_edg": 551, "prunesearch": 553, "stopsearch": 554, "graphviz_draw": 555, "mpl_draw": 556, "weakly_connected_compon": 557, "comparison": 558, "benchmark": 558, "With": 558, "librari": 558, "creation": 558, "sourc": 558, "all": 558, "pair": 558, "citat": 558, "project": 559, "histori": 559, "get": 560, "start": 560, "instal": [560, 566], "platform": 560, "without": 560, "precompil": 560, "binari": 560, "support": 560, "tier": 560, "1": [560, 562], "2": [560, 562], "3": 560, "4": [560, 562], "us": [560, 566], "networkx": 561, "user": 561, "some": 561, "differ": 561, "data": [561, 566], "attribut": [561, 566], "examin": [561, 566], "element": [561, 566], "equival": 561, "constructor": 561, "modifi": [561, 566], "matrix": 561, "matplotlib": 561, "drawer": 561, "from": [561, 566], "gap": 561, "0": 562, "14": 562, "52": 562, "featur": 562, "upgrad": 562, "bug": 562, "fix": 562, "prelud": 562, "deprec": 562, "13": 562, "12": 562, "11": 562, "10": 562, "9": 562, "8": 562, "7": 562, "6": 562, "5": 562, "work": 563, "between": 563, "calcul": 563, "betwe": 563, "direct": [564, 566], "acycl": 564, "applic": 564, "task": 564, "schedul": 564, "qiskit": 564, "": 564, "compil": 564, "tutori": 565, "guid": 565, "introduct": 566, "how": 566, "import": 566, "creat": 566, "remov": 566, "what": 566, "payload": 566, "access": 566, "multigraph": 566, "analyz": 566, "draw": 566}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Contributing": [[0, "contributing"]], "Contributing to rustworkx": [[0, "contributing-to-rustworkx"]], "Making changes to the code": [[0, "making-changes-to-the-code"]], "Module exports in lib.rs": [[0, "module-exports-in-lib-rs"]], "Adding and changing functions in modules": [[0, "adding-and-changing-functions-in-modules"]], "Module directories: when a single file is not enough": [[0, "module-directories-when-a-single-file-is-not-enough"]], "rustworkx-core": [[0, "rustworkx-core"], [559, "rustworkx-core"]], "Tests": [[0, "tests"]], "Running tests with a specific Python version": [[0, "running-tests-with-a-specific-python-version"]], "Running subsets of tests": [[0, "running-subsets-of-tests"]], "Visualization Tests": [[0, "visualization-tests"]], "rustworkx-core tests": [[0, "rustworkx-core-tests"]], "Style": [[0, "style"]], "Rust": [[0, "rust"]], "Lint": [[0, "lint"]], "Python": [[0, "python"]], "Building documentation": [[0, "building-documentation"]], "rustworkx-core documentation": [[0, "rustworkx-core-documentation"]], "Type Annotations": [[0, "type-annotations"]], "Release Notes": [[0, "release-notes"], [562, "release-notes"]], "Adding a new release note": [[0, "adding-a-new-release-note"]], "Linking to issues": [[0, "linking-to-issues"]], "Generating the release notes": [[0, "generating-the-release-notes"]], "Building release notes locally": [[0, "building-release-notes-locally"]], "Pull request review, CI, and merge queue": [[0, "pull-request-review-ci-and-merge-queue"]], "Stable Branch Policy and Backporting": [[0, "stable-branch-policy-and-backporting"]], "Backporting procedure": [[0, "backporting-procedure"]], "Manual backport procedure": [[0, "manual-backport-procedure"]], "Centrality": [[1, "centrality"]], "Coloring": [[2, "coloring"]], "Connectivity and Cycles": [[3, "connectivity-and-cycles"]], "DAG Algorithms": [[4, "dag-algorithms"]], "Graph Operations": [[5, "graph-operations"]], "Algorithm Functions": [[6, "algorithm-functions"]], "Isomorphism": [[7, "isomorphism"]], "Link Analysis": [[8, "link-analysis"]], "Matching": [[9, "matching"]], "Other Algorithm Functions": [[10, "other-algorithm-functions"]], "Shortest Paths": [[11, "shortest-paths"]], "Traversal": [[12, "traversal"]], "Tree": [[13, "tree"]], "Converters": [[14, "converters"]], "Custom Return Types": [[15, "custom-return-types"]], "Exceptions": [[16, "exceptions"]], "Generators": [[17, "generators"]], "Graph Classes": [[18, "graph-classes"]], "Rustworkx API Reference": [[19, "rustworkx-api-reference"]], "Layout Functions": [[20, "layout-functions"]], "API functions for PyDigraph": [[21, "api-functions-for-pydigraph"]], "API functions for PyGraph": [[22, "api-functions-for-pygraph"]], "Random Graph Generator Functions": [[23, "random-graph-generator-functions"]], "Serialization": [[24, "serialization"]], "AllPairsPathLengthMapping": [[25, "allpairspathlengthmapping"]], "rustworkx.AllPairsPathLengthMapping.items": [[26, "rustworkx-allpairspathlengthmapping-items"]], "rustworkx.AllPairsPathLengthMapping.keys": [[27, "rustworkx-allpairspathlengthmapping-keys"]], "rustworkx.AllPairsPathLengthMapping.values": [[28, "rustworkx-allpairspathlengthmapping-values"]], "AllPairsPathMapping": [[29, "allpairspathmapping"]], "rustworkx.AllPairsPathMapping.items": [[30, "rustworkx-allpairspathmapping-items"]], "rustworkx.AllPairsPathMapping.keys": [[31, "rustworkx-allpairspathmapping-keys"]], "rustworkx.AllPairsPathMapping.values": [[32, "rustworkx-allpairspathmapping-values"]], "BFSPredecessors": [[33, "bfspredecessors"]], "BFSSuccessors": [[34, "bfssuccessors"]], "BiconnectedComponents": [[35, "biconnectedcomponents"]], "rustworkx.BiconnectedComponents.items": [[36, "rustworkx-biconnectedcomponents-items"]], "rustworkx.BiconnectedComponents.keys": [[37, "rustworkx-biconnectedcomponents-keys"]], "rustworkx.BiconnectedComponents.values": [[38, "rustworkx-biconnectedcomponents-values"]], "CentralityMapping": [[39, "centralitymapping"]], "rustworkx.CentralityMapping.items": [[40, "rustworkx-centralitymapping-items"]], "rustworkx.CentralityMapping.keys": [[41, "rustworkx-centralitymapping-keys"]], "rustworkx.CentralityMapping.values": [[42, "rustworkx-centralitymapping-values"]], "Chains": [[43, "chains"]], "rustworkx.DAGHasCycle": [[44, "rustworkx-daghascycle"]], "rustworkx.DAGWouldCycle": [[45, "rustworkx-dagwouldcycle"]], "EdgeCentralityMapping": [[46, "edgecentralitymapping"]], "rustworkx.EdgeCentralityMapping.items": [[47, "rustworkx-edgecentralitymapping-items"]], "rustworkx.EdgeCentralityMapping.keys": [[48, "rustworkx-edgecentralitymapping-keys"]], "rustworkx.EdgeCentralityMapping.values": [[49, "rustworkx-edgecentralitymapping-values"]], "EdgeIndexMap": [[50, "edgeindexmap"]], "rustworkx.EdgeIndexMap.items": [[51, "rustworkx-edgeindexmap-items"]], "rustworkx.EdgeIndexMap.keys": [[52, "rustworkx-edgeindexmap-keys"]], "rustworkx.EdgeIndexMap.values": [[53, "rustworkx-edgeindexmap-values"]], "EdgeIndices": [[54, "edgeindices"]], "EdgeList": [[55, "edgelist"]], "rustworkx.GraphNotBipartite": [[56, "rustworkx-graphnotbipartite"]], "rustworkx.InvalidMapping": [[57, "rustworkx-invalidmapping"]], "rustworkx.InvalidNode": [[58, "rustworkx-invalidnode"]], "rustworkx.JSONSerializationError": [[59, "rustworkx-jsonserializationerror"]], "rustworkx.NegativeCycle": [[60, "rustworkx-negativecycle"]], "rustworkx.NoEdgeBetweenNodes": [[61, "rustworkx-noedgebetweennodes"]], "rustworkx.NoPathFound": [[62, "rustworkx-nopathfound"]], "rustworkx.NoSuitableNeighbors": [[63, "rustworkx-nosuitableneighbors"]], "NodeIndices": [[64, "nodeindices"]], "NodeMap": [[65, "nodemap"]], "rustworkx.NodeMap.items": [[66, "rustworkx-nodemap-items"]], "rustworkx.NodeMap.keys": [[67, "rustworkx-nodemap-keys"]], "rustworkx.NodeMap.values": [[68, "rustworkx-nodemap-values"]], "rustworkx.NullGraph": [[69, "rustworkx-nullgraph"]], "PathLengthMapping": [[70, "pathlengthmapping"]], "rustworkx.PathLengthMapping.items": [[71, "rustworkx-pathlengthmapping-items"]], "rustworkx.PathLengthMapping.keys": [[72, "rustworkx-pathlengthmapping-keys"]], "rustworkx.PathLengthMapping.values": [[73, "rustworkx-pathlengthmapping-values"]], "PathMapping": [[74, "pathmapping"]], "rustworkx.PathMapping.items": [[75, "rustworkx-pathmapping-items"]], "rustworkx.PathMapping.keys": [[76, "rustworkx-pathmapping-keys"]], "rustworkx.PathMapping.values": [[77, "rustworkx-pathmapping-values"]], "Pos2DMapping": [[78, "pos2dmapping"]], "rustworkx.Pos2DMapping.items": [[79, "rustworkx-pos2dmapping-items"]], "rustworkx.Pos2DMapping.keys": [[80, "rustworkx-pos2dmapping-keys"]], "rustworkx.Pos2DMapping.values": [[81, "rustworkx-pos2dmapping-values"]], "ProductNodeMap": [[82, "productnodemap"]], "rustworkx.ProductNodeMap.items": [[83, "rustworkx-productnodemap-items"]], "rustworkx.ProductNodeMap.keys": [[84, "rustworkx-productnodemap-keys"]], "rustworkx.ProductNodeMap.values": [[85, "rustworkx-productnodemap-values"]], "PyDAG": [[86, "pydag"]], "rustworkx.PyDAG.add_child": [[87, "rustworkx-pydag-add-child"]], "rustworkx.PyDAG.add_edge": [[88, "rustworkx-pydag-add-edge"]], "rustworkx.PyDAG.add_edges_from": [[89, "rustworkx-pydag-add-edges-from"]], "rustworkx.PyDAG.add_edges_from_no_data": [[90, "rustworkx-pydag-add-edges-from-no-data"]], "rustworkx.PyDAG.add_node": [[91, "rustworkx-pydag-add-node"]], "rustworkx.PyDAG.add_nodes_from": [[92, "rustworkx-pydag-add-nodes-from"]], "rustworkx.PyDAG.add_parent": [[93, "rustworkx-pydag-add-parent"]], "rustworkx.PyDAG.adj": [[94, "rustworkx-pydag-adj"]], "rustworkx.PyDAG.adj_direction": [[95, "rustworkx-pydag-adj-direction"]], "rustworkx.PyDAG.clear": [[96, "rustworkx-pydag-clear"]], "rustworkx.PyDAG.clear_edges": [[97, "rustworkx-pydag-clear-edges"]], "rustworkx.PyDAG.compose": [[98, "rustworkx-pydag-compose"]], "rustworkx.PyDAG.contract_nodes": [[99, "rustworkx-pydag-contract-nodes"]], "rustworkx.PyDAG.copy": [[100, "rustworkx-pydag-copy"]], "rustworkx.PyDAG.edge_index_map": [[101, "rustworkx-pydag-edge-index-map"]], "rustworkx.PyDAG.edge_indices": [[102, "rustworkx-pydag-edge-indices"]], "rustworkx.PyDAG.edge_indices_from_endpoints": [[103, "rustworkx-pydag-edge-indices-from-endpoints"]], "rustworkx.PyDAG.edge_list": [[104, "rustworkx-pydag-edge-list"]], "rustworkx.PyDAG.edge_subgraph": [[105, "rustworkx-pydag-edge-subgraph"]], "rustworkx.PyDAG.edges": [[106, "rustworkx-pydag-edges"]], "rustworkx.PyDAG.extend_from_edge_list": [[107, "rustworkx-pydag-extend-from-edge-list"]], "rustworkx.PyDAG.extend_from_weighted_edge_list": [[108, "rustworkx-pydag-extend-from-weighted-edge-list"]], "rustworkx.PyDAG.filter_edges": [[109, "rustworkx-pydag-filter-edges"]], "rustworkx.PyDAG.filter_nodes": [[110, "rustworkx-pydag-filter-nodes"]], "rustworkx.PyDAG.find_adjacent_node_by_edge": [[111, "rustworkx-pydag-find-adjacent-node-by-edge"]], "rustworkx.PyDAG.find_node_by_weight": [[112, "rustworkx-pydag-find-node-by-weight"]], "rustworkx.PyDAG.find_predecessor_node_by_edge": [[113, "rustworkx-pydag-find-predecessor-node-by-edge"]], "rustworkx.PyDAG.find_predecessors_by_edge": [[114, "rustworkx-pydag-find-predecessors-by-edge"]], "rustworkx.PyDAG.find_successors_by_edge": [[115, "rustworkx-pydag-find-successors-by-edge"]], "rustworkx.PyDAG.from_adjacency_matrix": [[116, "rustworkx-pydag-from-adjacency-matrix"]], "rustworkx.PyDAG.from_complex_adjacency_matrix": [[117, "rustworkx-pydag-from-complex-adjacency-matrix"]], "rustworkx.PyDAG.get_all_edge_data": [[118, "rustworkx-pydag-get-all-edge-data"]], "rustworkx.PyDAG.get_edge_data": [[119, "rustworkx-pydag-get-edge-data"]], "rustworkx.PyDAG.get_edge_data_by_index": [[120, "rustworkx-pydag-get-edge-data-by-index"]], "rustworkx.PyDAG.get_edge_endpoints_by_index": [[121, "rustworkx-pydag-get-edge-endpoints-by-index"]], "rustworkx.PyDAG.get_node_data": [[122, "rustworkx-pydag-get-node-data"]], "rustworkx.PyDAG.has_edge": [[123, "rustworkx-pydag-has-edge"]], "rustworkx.PyDAG.has_parallel_edges": [[124, "rustworkx-pydag-has-parallel-edges"]], "rustworkx.PyDAG.in_degree": [[125, "rustworkx-pydag-in-degree"]], "rustworkx.PyDAG.in_edges": [[126, "rustworkx-pydag-in-edges"]], "rustworkx.PyDAG.incident_edge_index_map": [[127, "rustworkx-pydag-incident-edge-index-map"]], "rustworkx.PyDAG.incident_edges": [[128, "rustworkx-pydag-incident-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges": [[129, "rustworkx-pydag-insert-node-on-in-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges_multiple": [[130, "rustworkx-pydag-insert-node-on-in-edges-multiple"]], "rustworkx.PyDAG.insert_node_on_out_edges": [[131, "rustworkx-pydag-insert-node-on-out-edges"]], "rustworkx.PyDAG.insert_node_on_out_edges_multiple": [[132, "rustworkx-pydag-insert-node-on-out-edges-multiple"]], "rustworkx.PyDAG.is_symmetric": [[133, "rustworkx-pydag-is-symmetric"]], "rustworkx.PyDAG.make_symmetric": [[134, "rustworkx-pydag-make-symmetric"]], "rustworkx.PyDAG.merge_nodes": [[135, "rustworkx-pydag-merge-nodes"]], "rustworkx.PyDAG.neighbors": [[136, "rustworkx-pydag-neighbors"]], "rustworkx.PyDAG.node_indexes": [[137, "rustworkx-pydag-node-indexes"]], "rustworkx.PyDAG.node_indices": [[138, "rustworkx-pydag-node-indices"]], "rustworkx.PyDAG.nodes": [[139, "rustworkx-pydag-nodes"]], "rustworkx.PyDAG.num_edges": [[140, "rustworkx-pydag-num-edges"]], "rustworkx.PyDAG.num_nodes": [[141, "rustworkx-pydag-num-nodes"]], "rustworkx.PyDAG.out_degree": [[142, "rustworkx-pydag-out-degree"]], "rustworkx.PyDAG.out_edges": [[143, "rustworkx-pydag-out-edges"]], "rustworkx.PyDAG.predecessor_indices": [[144, "rustworkx-pydag-predecessor-indices"]], "rustworkx.PyDAG.predecessors": [[145, "rustworkx-pydag-predecessors"]], "rustworkx.PyDAG.read_edge_list": [[146, "rustworkx-pydag-read-edge-list"]], "rustworkx.PyDAG.remove_edge": [[147, "rustworkx-pydag-remove-edge"]], "rustworkx.PyDAG.remove_edge_from_index": [[148, "rustworkx-pydag-remove-edge-from-index"]], "rustworkx.PyDAG.remove_edges_from": [[149, "rustworkx-pydag-remove-edges-from"]], "rustworkx.PyDAG.remove_node": [[150, "rustworkx-pydag-remove-node"]], "rustworkx.PyDAG.remove_node_retain_edges": [[151, "rustworkx-pydag-remove-node-retain-edges"]], "rustworkx.PyDAG.remove_node_retain_edges_by_id": [[152, "rustworkx-pydag-remove-node-retain-edges-by-id"]], "rustworkx.PyDAG.remove_node_retain_edges_by_key": [[153, "rustworkx-pydag-remove-node-retain-edges-by-key"]], "rustworkx.PyDAG.remove_nodes_from": [[154, "rustworkx-pydag-remove-nodes-from"]], "rustworkx.PyDAG.reverse": [[155, "rustworkx-pydag-reverse"]], "rustworkx.PyDAG.subgraph": [[156, "rustworkx-pydag-subgraph"]], "rustworkx.PyDAG.substitute_node_with_subgraph": [[157, "rustworkx-pydag-substitute-node-with-subgraph"]], "rustworkx.PyDAG.successor_indices": [[158, "rustworkx-pydag-successor-indices"]], "rustworkx.PyDAG.successors": [[159, "rustworkx-pydag-successors"]], "rustworkx.PyDAG.to_dot": [[160, "rustworkx-pydag-to-dot"]], "rustworkx.PyDAG.to_undirected": [[161, "rustworkx-pydag-to-undirected"]], "rustworkx.PyDAG.update_edge": [[162, "rustworkx-pydag-update-edge"]], "rustworkx.PyDAG.update_edge_by_index": [[163, "rustworkx-pydag-update-edge-by-index"]], "rustworkx.PyDAG.weighted_edge_list": [[164, "rustworkx-pydag-weighted-edge-list"]], "rustworkx.PyDAG.write_edge_list": [[165, "rustworkx-pydag-write-edge-list"]], "PyDiGraph": [[166, "pydigraph"]], "rustworkx.PyDiGraph.add_child": [[167, "rustworkx-pydigraph-add-child"]], "rustworkx.PyDiGraph.add_edge": [[168, "rustworkx-pydigraph-add-edge"]], "rustworkx.PyDiGraph.add_edges_from": [[169, "rustworkx-pydigraph-add-edges-from"]], "rustworkx.PyDiGraph.add_edges_from_no_data": [[170, "rustworkx-pydigraph-add-edges-from-no-data"]], "rustworkx.PyDiGraph.add_node": [[171, "rustworkx-pydigraph-add-node"]], "rustworkx.PyDiGraph.add_nodes_from": [[172, "rustworkx-pydigraph-add-nodes-from"]], "rustworkx.PyDiGraph.add_parent": [[173, "rustworkx-pydigraph-add-parent"]], "rustworkx.PyDiGraph.adj": [[174, "rustworkx-pydigraph-adj"]], "rustworkx.PyDiGraph.adj_direction": [[175, "rustworkx-pydigraph-adj-direction"]], "rustworkx.PyDiGraph.clear": [[176, "rustworkx-pydigraph-clear"]], "rustworkx.PyDiGraph.clear_edges": [[177, "rustworkx-pydigraph-clear-edges"]], "rustworkx.PyDiGraph.compose": [[178, "rustworkx-pydigraph-compose"]], "rustworkx.PyDiGraph.contract_nodes": [[179, "rustworkx-pydigraph-contract-nodes"]], "rustworkx.PyDiGraph.copy": [[180, "rustworkx-pydigraph-copy"]], "rustworkx.PyDiGraph.edge_index_map": [[181, "rustworkx-pydigraph-edge-index-map"]], "rustworkx.PyDiGraph.edge_indices": [[182, "rustworkx-pydigraph-edge-indices"]], "rustworkx.PyDiGraph.edge_indices_from_endpoints": [[183, "rustworkx-pydigraph-edge-indices-from-endpoints"]], "rustworkx.PyDiGraph.edge_list": [[184, "rustworkx-pydigraph-edge-list"]], "rustworkx.PyDiGraph.edge_subgraph": [[185, "rustworkx-pydigraph-edge-subgraph"]], "rustworkx.PyDiGraph.edges": [[186, "rustworkx-pydigraph-edges"]], "rustworkx.PyDiGraph.extend_from_edge_list": [[187, "rustworkx-pydigraph-extend-from-edge-list"]], "rustworkx.PyDiGraph.extend_from_weighted_edge_list": [[188, "rustworkx-pydigraph-extend-from-weighted-edge-list"]], "rustworkx.PyDiGraph.filter_edges": [[189, "rustworkx-pydigraph-filter-edges"]], "rustworkx.PyDiGraph.filter_nodes": [[190, "rustworkx-pydigraph-filter-nodes"]], "rustworkx.PyDiGraph.find_adjacent_node_by_edge": [[191, "rustworkx-pydigraph-find-adjacent-node-by-edge"]], "rustworkx.PyDiGraph.find_node_by_weight": [[192, "rustworkx-pydigraph-find-node-by-weight"]], "rustworkx.PyDiGraph.find_predecessor_node_by_edge": [[193, "rustworkx-pydigraph-find-predecessor-node-by-edge"]], "rustworkx.PyDiGraph.find_predecessors_by_edge": [[194, "rustworkx-pydigraph-find-predecessors-by-edge"]], "rustworkx.PyDiGraph.find_successors_by_edge": [[195, "rustworkx-pydigraph-find-successors-by-edge"]], "rustworkx.PyDiGraph.from_adjacency_matrix": [[196, "rustworkx-pydigraph-from-adjacency-matrix"]], "rustworkx.PyDiGraph.from_complex_adjacency_matrix": [[197, "rustworkx-pydigraph-from-complex-adjacency-matrix"]], "rustworkx.PyDiGraph.get_all_edge_data": [[198, "rustworkx-pydigraph-get-all-edge-data"]], "rustworkx.PyDiGraph.get_edge_data": [[199, "rustworkx-pydigraph-get-edge-data"]], "rustworkx.PyDiGraph.get_edge_data_by_index": [[200, "rustworkx-pydigraph-get-edge-data-by-index"]], "rustworkx.PyDiGraph.get_edge_endpoints_by_index": [[201, "rustworkx-pydigraph-get-edge-endpoints-by-index"]], "rustworkx.PyDiGraph.get_node_data": [[202, "rustworkx-pydigraph-get-node-data"]], "rustworkx.PyDiGraph.has_edge": [[203, "rustworkx-pydigraph-has-edge"]], "rustworkx.PyDiGraph.has_parallel_edges": [[204, "rustworkx-pydigraph-has-parallel-edges"]], "rustworkx.PyDiGraph.in_degree": [[205, "rustworkx-pydigraph-in-degree"]], "rustworkx.PyDiGraph.in_edges": [[206, "rustworkx-pydigraph-in-edges"]], "rustworkx.PyDiGraph.incident_edge_index_map": [[207, "rustworkx-pydigraph-incident-edge-index-map"]], "rustworkx.PyDiGraph.incident_edges": [[208, "rustworkx-pydigraph-incident-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges": [[209, "rustworkx-pydigraph-insert-node-on-in-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple": [[210, "rustworkx-pydigraph-insert-node-on-in-edges-multiple"]], "rustworkx.PyDiGraph.insert_node_on_out_edges": [[211, "rustworkx-pydigraph-insert-node-on-out-edges"]], "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple": [[212, "rustworkx-pydigraph-insert-node-on-out-edges-multiple"]], "rustworkx.PyDiGraph.is_symmetric": [[213, "rustworkx-pydigraph-is-symmetric"]], "rustworkx.PyDiGraph.make_symmetric": [[214, "rustworkx-pydigraph-make-symmetric"]], "rustworkx.PyDiGraph.merge_nodes": [[215, "rustworkx-pydigraph-merge-nodes"]], "rustworkx.PyDiGraph.neighbors": [[216, "rustworkx-pydigraph-neighbors"]], "rustworkx.PyDiGraph.node_indexes": [[217, "rustworkx-pydigraph-node-indexes"]], "rustworkx.PyDiGraph.node_indices": [[218, "rustworkx-pydigraph-node-indices"]], "rustworkx.PyDiGraph.nodes": [[219, "rustworkx-pydigraph-nodes"]], "rustworkx.PyDiGraph.num_edges": [[220, "rustworkx-pydigraph-num-edges"]], "rustworkx.PyDiGraph.num_nodes": [[221, "rustworkx-pydigraph-num-nodes"]], "rustworkx.PyDiGraph.out_degree": [[222, "rustworkx-pydigraph-out-degree"]], "rustworkx.PyDiGraph.out_edges": [[223, "rustworkx-pydigraph-out-edges"]], "rustworkx.PyDiGraph.predecessor_indices": [[224, "rustworkx-pydigraph-predecessor-indices"]], "rustworkx.PyDiGraph.predecessors": [[225, "rustworkx-pydigraph-predecessors"]], "rustworkx.PyDiGraph.read_edge_list": [[226, "rustworkx-pydigraph-read-edge-list"]], "rustworkx.PyDiGraph.remove_edge": [[227, "rustworkx-pydigraph-remove-edge"]], "rustworkx.PyDiGraph.remove_edge_from_index": [[228, "rustworkx-pydigraph-remove-edge-from-index"]], "rustworkx.PyDiGraph.remove_edges_from": [[229, "rustworkx-pydigraph-remove-edges-from"]], "rustworkx.PyDiGraph.remove_node": [[230, "rustworkx-pydigraph-remove-node"]], "rustworkx.PyDiGraph.remove_node_retain_edges": [[231, "rustworkx-pydigraph-remove-node-retain-edges"]], "rustworkx.PyDiGraph.remove_node_retain_edges_by_id": [[232, "rustworkx-pydigraph-remove-node-retain-edges-by-id"]], "rustworkx.PyDiGraph.remove_node_retain_edges_by_key": [[233, "rustworkx-pydigraph-remove-node-retain-edges-by-key"]], "rustworkx.PyDiGraph.remove_nodes_from": [[234, "rustworkx-pydigraph-remove-nodes-from"]], "rustworkx.PyDiGraph.reverse": [[235, "rustworkx-pydigraph-reverse"]], "rustworkx.PyDiGraph.subgraph": [[236, "rustworkx-pydigraph-subgraph"]], "rustworkx.PyDiGraph.substitute_node_with_subgraph": [[237, "rustworkx-pydigraph-substitute-node-with-subgraph"]], "rustworkx.PyDiGraph.successor_indices": [[238, "rustworkx-pydigraph-successor-indices"]], "rustworkx.PyDiGraph.successors": [[239, "rustworkx-pydigraph-successors"]], "rustworkx.PyDiGraph.to_dot": [[240, "rustworkx-pydigraph-to-dot"]], "rustworkx.PyDiGraph.to_undirected": [[241, "rustworkx-pydigraph-to-undirected"]], "rustworkx.PyDiGraph.update_edge": [[242, "rustworkx-pydigraph-update-edge"]], "rustworkx.PyDiGraph.update_edge_by_index": [[243, "rustworkx-pydigraph-update-edge-by-index"]], "rustworkx.PyDiGraph.weighted_edge_list": [[244, "rustworkx-pydigraph-weighted-edge-list"]], "rustworkx.PyDiGraph.write_edge_list": [[245, "rustworkx-pydigraph-write-edge-list"]], "PyGraph": [[246, "pygraph"]], "rustworkx.PyGraph.add_edge": [[247, "rustworkx-pygraph-add-edge"]], "rustworkx.PyGraph.add_edges_from": [[248, "rustworkx-pygraph-add-edges-from"]], "rustworkx.PyGraph.add_edges_from_no_data": [[249, "rustworkx-pygraph-add-edges-from-no-data"]], "rustworkx.PyGraph.add_node": [[250, "rustworkx-pygraph-add-node"]], "rustworkx.PyGraph.add_nodes_from": [[251, "rustworkx-pygraph-add-nodes-from"]], "rustworkx.PyGraph.adj": [[252, "rustworkx-pygraph-adj"]], "rustworkx.PyGraph.clear": [[253, "rustworkx-pygraph-clear"]], "rustworkx.PyGraph.clear_edges": [[254, "rustworkx-pygraph-clear-edges"]], "rustworkx.PyGraph.compose": [[255, "rustworkx-pygraph-compose"]], "rustworkx.PyGraph.contract_nodes": [[256, "rustworkx-pygraph-contract-nodes"]], "rustworkx.PyGraph.copy": [[257, "rustworkx-pygraph-copy"]], "rustworkx.PyGraph.degree": [[258, "rustworkx-pygraph-degree"]], "rustworkx.PyGraph.edge_index_map": [[259, "rustworkx-pygraph-edge-index-map"]], "rustworkx.PyGraph.edge_indices": [[260, "rustworkx-pygraph-edge-indices"]], "rustworkx.PyGraph.edge_indices_from_endpoints": [[261, "rustworkx-pygraph-edge-indices-from-endpoints"]], "rustworkx.PyGraph.edge_list": [[262, "rustworkx-pygraph-edge-list"]], "rustworkx.PyGraph.edge_subgraph": [[263, "rustworkx-pygraph-edge-subgraph"]], "rustworkx.PyGraph.edges": [[264, "rustworkx-pygraph-edges"]], "rustworkx.PyGraph.extend_from_edge_list": [[265, "rustworkx-pygraph-extend-from-edge-list"]], "rustworkx.PyGraph.extend_from_weighted_edge_list": [[266, "rustworkx-pygraph-extend-from-weighted-edge-list"]], "rustworkx.PyGraph.filter_edges": [[267, "rustworkx-pygraph-filter-edges"]], "rustworkx.PyGraph.filter_nodes": [[268, "rustworkx-pygraph-filter-nodes"]], "rustworkx.PyGraph.find_node_by_weight": [[269, "rustworkx-pygraph-find-node-by-weight"]], "rustworkx.PyGraph.from_adjacency_matrix": [[270, "rustworkx-pygraph-from-adjacency-matrix"]], "rustworkx.PyGraph.from_complex_adjacency_matrix": [[271, "rustworkx-pygraph-from-complex-adjacency-matrix"]], "rustworkx.PyGraph.get_all_edge_data": [[272, "rustworkx-pygraph-get-all-edge-data"]], "rustworkx.PyGraph.get_edge_data": [[273, "rustworkx-pygraph-get-edge-data"]], "rustworkx.PyGraph.get_edge_data_by_index": [[274, "rustworkx-pygraph-get-edge-data-by-index"]], "rustworkx.PyGraph.get_edge_endpoints_by_index": [[275, "rustworkx-pygraph-get-edge-endpoints-by-index"]], "rustworkx.PyGraph.get_node_data": [[276, "rustworkx-pygraph-get-node-data"]], "rustworkx.PyGraph.has_edge": [[277, "rustworkx-pygraph-has-edge"]], "rustworkx.PyGraph.has_parallel_edges": [[278, "rustworkx-pygraph-has-parallel-edges"]], "rustworkx.PyGraph.in_edges": [[279, "rustworkx-pygraph-in-edges"]], "rustworkx.PyGraph.incident_edge_index_map": [[280, "rustworkx-pygraph-incident-edge-index-map"]], "rustworkx.PyGraph.incident_edges": [[281, "rustworkx-pygraph-incident-edges"]], "rustworkx.PyGraph.neighbors": [[282, "rustworkx-pygraph-neighbors"]], "rustworkx.PyGraph.node_indexes": [[283, "rustworkx-pygraph-node-indexes"]], "rustworkx.PyGraph.node_indices": [[284, "rustworkx-pygraph-node-indices"]], "rustworkx.PyGraph.nodes": [[285, "rustworkx-pygraph-nodes"]], "rustworkx.PyGraph.num_edges": [[286, "rustworkx-pygraph-num-edges"]], "rustworkx.PyGraph.num_nodes": [[287, "rustworkx-pygraph-num-nodes"]], "rustworkx.PyGraph.out_edges": [[288, "rustworkx-pygraph-out-edges"]], "rustworkx.PyGraph.read_edge_list": [[289, "rustworkx-pygraph-read-edge-list"]], "rustworkx.PyGraph.remove_edge": [[290, "rustworkx-pygraph-remove-edge"]], "rustworkx.PyGraph.remove_edge_from_index": [[291, "rustworkx-pygraph-remove-edge-from-index"]], "rustworkx.PyGraph.remove_edges_from": [[292, "rustworkx-pygraph-remove-edges-from"]], "rustworkx.PyGraph.remove_node": [[293, "rustworkx-pygraph-remove-node"]], "rustworkx.PyGraph.remove_nodes_from": [[294, "rustworkx-pygraph-remove-nodes-from"]], "rustworkx.PyGraph.subgraph": [[295, "rustworkx-pygraph-subgraph"]], "rustworkx.PyGraph.substitute_node_with_subgraph": [[296, "rustworkx-pygraph-substitute-node-with-subgraph"]], "rustworkx.PyGraph.to_directed": [[297, "rustworkx-pygraph-to-directed"]], "rustworkx.PyGraph.to_dot": [[298, "rustworkx-pygraph-to-dot"]], "rustworkx.PyGraph.update_edge": [[299, "rustworkx-pygraph-update-edge"]], "rustworkx.PyGraph.update_edge_by_index": [[300, "rustworkx-pygraph-update-edge-by-index"]], "rustworkx.PyGraph.weighted_edge_list": [[301, "rustworkx-pygraph-weighted-edge-list"]], "rustworkx.PyGraph.write_edge_list": [[302, "rustworkx-pygraph-write-edge-list"]], "TopologicalSorter": [[303, "topologicalsorter"]], "rustworkx.TopologicalSorter.done": [[304, "rustworkx-topologicalsorter-done"]], "rustworkx.TopologicalSorter.get_ready": [[305, "rustworkx-topologicalsorter-get-ready"]], "rustworkx.TopologicalSorter.is_active": [[306, "rustworkx-topologicalsorter-is-active"]], "WeightedEdgeList": [[307, "weightededgelist"]], "rustworkx.adjacency_matrix": [[308, "rustworkx-adjacency-matrix"]], "rustworkx.all_pairs_all_simple_paths": [[309, "rustworkx-all-pairs-all-simple-paths"]], "rustworkx.all_pairs_bellman_ford_path_lengths": [[310, "rustworkx-all-pairs-bellman-ford-path-lengths"]], "rustworkx.all_pairs_bellman_ford_shortest_paths": [[311, "rustworkx-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.all_pairs_dijkstra_path_lengths": [[312, "rustworkx-all-pairs-dijkstra-path-lengths"]], "rustworkx.all_pairs_dijkstra_shortest_paths": [[313, "rustworkx-all-pairs-dijkstra-shortest-paths"]], "rustworkx.all_shortest_paths": [[314, "rustworkx-all-shortest-paths"]], "rustworkx.all_simple_paths": [[315, "rustworkx-all-simple-paths"]], "rustworkx.ancestors": [[316, "rustworkx-ancestors"]], "rustworkx.articulation_points": [[317, "rustworkx-articulation-points"]], "rustworkx.astar_shortest_path": [[318, "rustworkx-astar-shortest-path"]], "rustworkx.barabasi_albert_graph": [[319, "rustworkx-barabasi-albert-graph"]], "rustworkx.bellman_ford_shortest_path_lengths": [[320, "rustworkx-bellman-ford-shortest-path-lengths"]], "rustworkx.bellman_ford_shortest_paths": [[321, "rustworkx-bellman-ford-shortest-paths"]], "rustworkx.betweenness_centrality": [[322, "rustworkx-betweenness-centrality"]], "See Also": [[322, "see-also"], [356, "see-also"], [370, "see-also"], [400, "see-also"], [442, "see-also"], [457, "see-also"]], "rustworkx.bfs_predecessors": [[323, "rustworkx-bfs-predecessors"]], "rustworkx.bfs_search": [[324, "rustworkx-bfs-search"]], "rustworkx.bfs_successors": [[325, "rustworkx-bfs-successors"]], "rustworkx.biconnected_components": [[326, "rustworkx-biconnected-components"]], "rustworkx.bipartite_layout": [[327, "rustworkx-bipartite-layout"]], "rustworkx.bridges": [[328, "rustworkx-bridges"]], "rustworkx.cartesian_product": [[329, "rustworkx-cartesian-product"]], "rustworkx.chain_decomposition": [[330, "rustworkx-chain-decomposition"]], "rustworkx.circular_layout": [[331, "rustworkx-circular-layout"]], "rustworkx.closeness_centrality": [[332, "rustworkx-closeness-centrality"]], "rustworkx.collect_bicolor_runs": [[333, "rustworkx-collect-bicolor-runs"]], "rustworkx.collect_runs": [[334, "rustworkx-collect-runs"]], "rustworkx.complement": [[335, "rustworkx-complement"]], "rustworkx.connected_components": [[336, "rustworkx-connected-components"]], "rustworkx.core_number": [[337, "rustworkx-core-number"]], "rustworkx.cycle_basis": [[338, "rustworkx-cycle-basis"]], "rustworkx.dag_longest_path": [[339, "rustworkx-dag-longest-path"]], "rustworkx.dag_longest_path_length": [[340, "rustworkx-dag-longest-path-length"]], "rustworkx.dag_weighted_longest_path": [[341, "rustworkx-dag-weighted-longest-path"]], "rustworkx.dag_weighted_longest_path_length": [[342, "rustworkx-dag-weighted-longest-path-length"]], "rustworkx.descendants": [[343, "rustworkx-descendants"]], "rustworkx.dfs_edges": [[344, "rustworkx-dfs-edges"]], "rustworkx.dfs_search": [[345, "rustworkx-dfs-search"]], "rustworkx.digraph_adjacency_matrix": [[346, "rustworkx-digraph-adjacency-matrix"]], "rustworkx.digraph_all_pairs_all_simple_paths": [[347, "rustworkx-digraph-all-pairs-all-simple-paths"]], "rustworkx.digraph_all_pairs_bellman_ford_path_lengths": [[348, "rustworkx-digraph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths": [[349, "rustworkx-digraph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.digraph_all_pairs_dijkstra_path_lengths": [[350, "rustworkx-digraph-all-pairs-dijkstra-path-lengths"]], "rustworkx.digraph_all_pairs_dijkstra_shortest_paths": [[351, "rustworkx-digraph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.digraph_all_shortest_paths": [[352, "rustworkx-digraph-all-shortest-paths"]], "rustworkx.digraph_all_simple_paths": [[353, "rustworkx-digraph-all-simple-paths"]], "rustworkx.digraph_astar_shortest_path": [[354, "rustworkx-digraph-astar-shortest-path"]], "rustworkx.digraph_bellman_ford_shortest_path_lengths": [[355, "rustworkx-digraph-bellman-ford-shortest-path-lengths"]], "rustworkx.digraph_betweenness_centrality": [[356, "rustworkx-digraph-betweenness-centrality"]], "rustworkx.digraph_bfs_search": [[357, "rustworkx-digraph-bfs-search"]], "rustworkx.digraph_bipartite_layout": [[358, "rustworkx-digraph-bipartite-layout"]], "rustworkx.digraph_cartesian_product": [[359, "rustworkx-digraph-cartesian-product"]], "rustworkx.digraph_circular_layout": [[360, "rustworkx-digraph-circular-layout"]], "rustworkx.digraph_closeness_centrality": [[361, "rustworkx-digraph-closeness-centrality"]], "rustworkx.digraph_complement": [[362, "rustworkx-digraph-complement"]], "rustworkx.digraph_core_number": [[363, "rustworkx-digraph-core-number"]], "rustworkx.digraph_dfs_edges": [[364, "rustworkx-digraph-dfs-edges"]], "rustworkx.digraph_dfs_search": [[365, "rustworkx-digraph-dfs-search"]], "rustworkx.digraph_dijkstra_search": [[366, "rustworkx-digraph-dijkstra-search"]], "rustworkx.digraph_dijkstra_shortest_path_lengths": [[367, "rustworkx-digraph-dijkstra-shortest-path-lengths"]], "rustworkx.digraph_dijkstra_shortest_paths": [[368, "rustworkx-digraph-dijkstra-shortest-paths"]], "rustworkx.digraph_distance_matrix": [[369, "rustworkx-digraph-distance-matrix"]], "rustworkx.digraph_edge_betweenness_centrality": [[370, "rustworkx-digraph-edge-betweenness-centrality"]], "rustworkx.digraph_eigenvector_centrality": [[371, "rustworkx-digraph-eigenvector-centrality"]], "rustworkx.digraph_find_cycle": [[372, "rustworkx-digraph-find-cycle"]], "rustworkx.digraph_floyd_warshall": [[373, "rustworkx-digraph-floyd-warshall"]], "rustworkx.digraph_floyd_warshall_numpy": [[374, "rustworkx-digraph-floyd-warshall-numpy"]], "rustworkx.digraph_floyd_warshall_successor_and_distance": [[375, "rustworkx-digraph-floyd-warshall-successor-and-distance"]], "rustworkx.digraph_is_isomorphic": [[376, "rustworkx-digraph-is-isomorphic"]], "rustworkx.digraph_is_subgraph_isomorphic": [[377, "rustworkx-digraph-is-subgraph-isomorphic"]], "rustworkx.digraph_k_shortest_path_lengths": [[378, "rustworkx-digraph-k-shortest-path-lengths"]], "rustworkx.digraph_katz_centrality": [[379, "rustworkx-digraph-katz-centrality"]], "rustworkx.digraph_longest_simple_path": [[380, "rustworkx-digraph-longest-simple-path"]], "rustworkx.digraph_node_link_json": [[381, "rustworkx-digraph-node-link-json"]], "rustworkx.digraph_num_shortest_paths_unweighted": [[382, "rustworkx-digraph-num-shortest-paths-unweighted"]], "rustworkx.digraph_random_layout": [[383, "rustworkx-digraph-random-layout"]], "rustworkx.digraph_shell_layout": [[384, "rustworkx-digraph-shell-layout"]], "rustworkx.digraph_spiral_layout": [[385, "rustworkx-digraph-spiral-layout"]], "rustworkx.digraph_spring_layout": [[386, "rustworkx-digraph-spring-layout"]], "rustworkx.digraph_tensor_product": [[387, "rustworkx-digraph-tensor-product"]], "rustworkx.digraph_transitivity": [[388, "rustworkx-digraph-transitivity"]], "rustworkx.digraph_union": [[389, "rustworkx-digraph-union"]], "rustworkx.digraph_unweighted_average_shortest_path_length": [[390, "rustworkx-digraph-unweighted-average-shortest-path-length"]], "rustworkx.digraph_vf2_mapping": [[391, "rustworkx-digraph-vf2-mapping"]], "rustworkx.dijkstra_search": [[392, "rustworkx-dijkstra-search"]], "rustworkx.dijkstra_shortest_path_lengths": [[393, "rustworkx-dijkstra-shortest-path-lengths"]], "rustworkx.dijkstra_shortest_paths": [[394, "rustworkx-dijkstra-shortest-paths"]], "rustworkx.directed_barabasi_albert_graph": [[395, "rustworkx-directed-barabasi-albert-graph"]], "rustworkx.directed_gnm_random_graph": [[396, "rustworkx-directed-gnm-random-graph"]], "rustworkx.directed_gnp_random_graph": [[397, "rustworkx-directed-gnp-random-graph"]], "rustworkx.directed_random_bipartite_graph": [[398, "rustworkx-directed-random-bipartite-graph"]], "rustworkx.distance_matrix": [[399, "rustworkx-distance-matrix"]], "rustworkx.edge_betweenness_centrality": [[400, "rustworkx-edge-betweenness-centrality"]], "rustworkx.eigenvector_centrality": [[401, "rustworkx-eigenvector-centrality"]], "rustworkx.find_negative_cycle": [[402, "rustworkx-find-negative-cycle"]], "rustworkx.floyd_warshall": [[403, "rustworkx-floyd-warshall"]], "rustworkx.floyd_warshall_numpy": [[404, "rustworkx-floyd-warshall-numpy"]], "rustworkx.floyd_warshall_successor_and_distance": [[405, "rustworkx-floyd-warshall-successor-and-distance"]], "rustworkx.generators.barbell_graph": [[406, "rustworkx-generators-barbell-graph"]], "rustworkx.generators.binomial_tree_graph": [[407, "rustworkx-generators-binomial-tree-graph"]], "rustworkx.generators.complete_graph": [[408, "rustworkx-generators-complete-graph"]], "rustworkx.generators.cycle_graph": [[409, "rustworkx-generators-cycle-graph"]], "rustworkx.generators.directed_binomial_tree_graph": [[410, "rustworkx-generators-directed-binomial-tree-graph"]], "rustworkx.generators.directed_complete_graph": [[411, "rustworkx-generators-directed-complete-graph"]], "rustworkx.generators.directed_cycle_graph": [[412, "rustworkx-generators-directed-cycle-graph"]], "rustworkx.generators.directed_empty_graph": [[413, "rustworkx-generators-directed-empty-graph"]], "rustworkx.generators.directed_grid_graph": [[414, "rustworkx-generators-directed-grid-graph"]], "rustworkx.generators.directed_heavy_hex_graph": [[415, "rustworkx-generators-directed-heavy-hex-graph"]], "rustworkx.generators.directed_heavy_square_graph": [[416, "rustworkx-generators-directed-heavy-square-graph"]], "rustworkx.generators.directed_hexagonal_lattice_graph": [[417, "rustworkx-generators-directed-hexagonal-lattice-graph"]], "rustworkx.generators.directed_mesh_graph": [[418, "rustworkx-generators-directed-mesh-graph"]], "rustworkx.generators.directed_path_graph": [[419, "rustworkx-generators-directed-path-graph"]], "rustworkx.generators.directed_star_graph": [[420, "rustworkx-generators-directed-star-graph"]], "rustworkx.generators.empty_graph": [[421, "rustworkx-generators-empty-graph"]], "rustworkx.generators.full_rary_tree": [[422, "rustworkx-generators-full-rary-tree"]], "rustworkx.generators.generalized_petersen_graph": [[423, "rustworkx-generators-generalized-petersen-graph"]], "rustworkx.generators.grid_graph": [[424, "rustworkx-generators-grid-graph"]], "rustworkx.generators.heavy_hex_graph": [[425, "rustworkx-generators-heavy-hex-graph"]], "rustworkx.generators.heavy_square_graph": [[426, "rustworkx-generators-heavy-square-graph"]], "rustworkx.generators.hexagonal_lattice_graph": [[427, "rustworkx-generators-hexagonal-lattice-graph"]], "rustworkx.generators.lollipop_graph": [[428, "rustworkx-generators-lollipop-graph"]], "rustworkx.generators.mesh_graph": [[429, "rustworkx-generators-mesh-graph"]], "rustworkx.generators.path_graph": [[430, "rustworkx-generators-path-graph"]], "rustworkx.generators.star_graph": [[431, "rustworkx-generators-star-graph"]], "rustworkx.graph_adjacency_matrix": [[432, "rustworkx-graph-adjacency-matrix"]], "rustworkx.graph_all_pairs_all_simple_paths": [[433, "rustworkx-graph-all-pairs-all-simple-paths"]], "rustworkx.graph_all_pairs_bellman_ford_path_lengths": [[434, "rustworkx-graph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.graph_all_pairs_bellman_ford_shortest_paths": [[435, "rustworkx-graph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.graph_all_pairs_dijkstra_path_lengths": [[436, "rustworkx-graph-all-pairs-dijkstra-path-lengths"]], "rustworkx.graph_all_pairs_dijkstra_shortest_paths": [[437, "rustworkx-graph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.graph_all_shortest_paths": [[438, "rustworkx-graph-all-shortest-paths"]], "rustworkx.graph_all_simple_paths": [[439, "rustworkx-graph-all-simple-paths"]], "rustworkx.graph_astar_shortest_path": [[440, "rustworkx-graph-astar-shortest-path"]], "rustworkx.graph_bellman_ford_shortest_path_lengths": [[441, "rustworkx-graph-bellman-ford-shortest-path-lengths"]], "rustworkx.graph_betweenness_centrality": [[442, "rustworkx-graph-betweenness-centrality"]], "rustworkx.graph_bfs_search": [[443, "rustworkx-graph-bfs-search"]], "rustworkx.graph_bipartite_edge_color": [[444, "rustworkx-graph-bipartite-edge-color"]], "rustworkx.graph_bipartite_layout": [[445, "rustworkx-graph-bipartite-layout"]], "rustworkx.graph_cartesian_product": [[446, "rustworkx-graph-cartesian-product"]], "rustworkx.graph_circular_layout": [[447, "rustworkx-graph-circular-layout"]], "rustworkx.graph_closeness_centrality": [[448, "rustworkx-graph-closeness-centrality"]], "rustworkx.graph_complement": [[449, "rustworkx-graph-complement"]], "rustworkx.graph_core_number": [[450, "rustworkx-graph-core-number"]], "rustworkx.graph_dfs_edges": [[451, "rustworkx-graph-dfs-edges"]], "rustworkx.graph_dfs_search": [[452, "rustworkx-graph-dfs-search"]], "rustworkx.graph_dijkstra_search": [[453, "rustworkx-graph-dijkstra-search"]], "rustworkx.graph_dijkstra_shortest_path_lengths": [[454, "rustworkx-graph-dijkstra-shortest-path-lengths"]], "rustworkx.graph_dijkstra_shortest_paths": [[455, "rustworkx-graph-dijkstra-shortest-paths"]], "rustworkx.graph_distance_matrix": [[456, "rustworkx-graph-distance-matrix"]], "rustworkx.graph_edge_betweenness_centrality": [[457, "rustworkx-graph-edge-betweenness-centrality"]], "rustworkx.graph_eigenvector_centrality": [[458, "rustworkx-graph-eigenvector-centrality"]], "rustworkx.graph_floyd_warshall": [[459, "rustworkx-graph-floyd-warshall"]], "rustworkx.graph_floyd_warshall_numpy": [[460, "rustworkx-graph-floyd-warshall-numpy"]], "rustworkx.graph_floyd_warshall_successor_and_distance": [[461, "rustworkx-graph-floyd-warshall-successor-and-distance"]], "rustworkx.graph_greedy_color": [[462, "rustworkx-graph-greedy-color"]], "rustworkx.graph_greedy_edge_color": [[463, "rustworkx-graph-greedy-edge-color"]], "rustworkx.graph_is_isomorphic": [[464, "rustworkx-graph-is-isomorphic"]], "rustworkx.graph_is_subgraph_isomorphic": [[465, "rustworkx-graph-is-subgraph-isomorphic"]], "rustworkx.graph_k_shortest_path_lengths": [[466, "rustworkx-graph-k-shortest-path-lengths"]], "rustworkx.graph_katz_centrality": [[467, "rustworkx-graph-katz-centrality"]], "rustworkx.graph_line_graph": [[468, "rustworkx-graph-line-graph"]], "rustworkx.graph_longest_simple_path": [[469, "rustworkx-graph-longest-simple-path"]], "rustworkx.graph_misra_gries_edge_color": [[470, "rustworkx-graph-misra-gries-edge-color"]], "rustworkx.graph_node_link_json": [[471, "rustworkx-graph-node-link-json"]], "rustworkx.graph_num_shortest_paths_unweighted": [[472, "rustworkx-graph-num-shortest-paths-unweighted"]], "rustworkx.graph_random_layout": [[473, "rustworkx-graph-random-layout"]], "rustworkx.graph_shell_layout": [[474, "rustworkx-graph-shell-layout"]], "rustworkx.graph_spiral_layout": [[475, "rustworkx-graph-spiral-layout"]], "rustworkx.graph_spring_layout": [[476, "rustworkx-graph-spring-layout"]], "rustworkx.graph_tensor_product": [[477, "rustworkx-graph-tensor-product"]], "rustworkx.graph_token_swapper": [[478, "rustworkx-graph-token-swapper"]], "rustworkx.graph_transitivity": [[479, "rustworkx-graph-transitivity"]], "rustworkx.graph_union": [[480, "rustworkx-graph-union"]], "rustworkx.graph_unweighted_average_shortest_path_length": [[481, "rustworkx-graph-unweighted-average-shortest-path-length"]], "rustworkx.graph_vf2_mapping": [[482, "rustworkx-graph-vf2-mapping"]], "rustworkx.has_path": [[483, "rustworkx-has-path"]], "rustworkx.hits": [[484, "rustworkx-hits"]], "rustworkx.is_bipartite": [[485, "rustworkx-is-bipartite"]], "rustworkx.is_connected": [[486, "rustworkx-is-connected"]], "rustworkx.is_directed_acyclic_graph": [[487, "rustworkx-is-directed-acyclic-graph"]], "rustworkx.is_isomorphic": [[488, "rustworkx-is-isomorphic"]], "rustworkx.is_isomorphic_node_match": [[489, "rustworkx-is-isomorphic-node-match"]], "rustworkx.is_matching": [[490, "rustworkx-is-matching"]], "rustworkx.is_maximal_matching": [[491, "rustworkx-is-maximal-matching"]], "rustworkx.is_planar": [[492, "rustworkx-is-planar"]], "rustworkx.is_subgraph_isomorphic": [[493, "rustworkx-is-subgraph-isomorphic"]], "rustworkx.is_weakly_connected": [[494, "rustworkx-is-weakly-connected"]], "rustworkx.isolates": [[495, "rustworkx-isolates"]], "rustworkx.k_shortest_path_lengths": [[496, "rustworkx-k-shortest-path-lengths"]], "rustworkx.katz_centrality": [[497, "rustworkx-katz-centrality"]], "rustworkx.layers": [[498, "rustworkx-layers"]], "rustworkx.lexicographical_topological_sort": [[499, "rustworkx-lexicographical-topological-sort"]], "rustworkx.longest_simple_path": [[500, "rustworkx-longest-simple-path"]], "rustworkx.max_weight_matching": [[501, "rustworkx-max-weight-matching"]], "rustworkx.metric_closure": [[502, "rustworkx-metric-closure"]], "rustworkx.minimum_spanning_edges": [[503, "rustworkx-minimum-spanning-edges"]], "rustworkx.minimum_spanning_tree": [[504, "rustworkx-minimum-spanning-tree"]], "rustworkx.negative_edge_cycle": [[505, "rustworkx-negative-edge-cycle"]], "rustworkx.networkx_converter": [[506, "rustworkx-networkx-converter"]], "rustworkx.node_connected_component": [[507, "rustworkx-node-connected-component"]], "rustworkx.node_link_json": [[508, "rustworkx-node-link-json"]], "rustworkx.num_shortest_paths_unweighted": [[509, "rustworkx-num-shortest-paths-unweighted"]], "rustworkx.number_connected_components": [[510, "rustworkx-number-connected-components"]], "rustworkx.number_weakly_connected_components": [[511, "rustworkx-number-weakly-connected-components"]], "rustworkx.pagerank": [[512, "rustworkx-pagerank"]], "rustworkx.random_geometric_graph": [[513, "rustworkx-random-geometric-graph"]], "rustworkx.random_layout": [[514, "rustworkx-random-layout"]], "rustworkx.read_graphml": [[515, "rustworkx-read-graphml"]], "rustworkx.shell_layout": [[516, "rustworkx-shell-layout"]], "rustworkx.simple_cycles": [[517, "rustworkx-simple-cycles"]], "rustworkx.spiral_layout": [[518, "rustworkx-spiral-layout"]], "rustworkx.spring_layout": [[519, "rustworkx-spring-layout"]], "rustworkx.steiner_tree": [[520, "rustworkx-steiner-tree"]], "rustworkx.stoer_wagner_min_cut": [[521, "rustworkx-stoer-wagner-min-cut"]], "rustworkx.strongly_connected_components": [[522, "rustworkx-strongly-connected-components"]], "rustworkx.topological_generations": [[523, "rustworkx-topological-generations"]], "rustworkx.topological_sort": [[524, "rustworkx-topological-sort"]], "rustworkx.transitive_reduction": [[525, "rustworkx-transitive-reduction"]], "rustworkx.transitivity": [[526, "rustworkx-transitivity"]], "rustworkx.two_color": [[527, "rustworkx-two-color"]], "rustworkx.undirected_gnm_random_graph": [[528, "rustworkx-undirected-gnm-random-graph"]], "rustworkx.undirected_gnp_random_graph": [[529, "rustworkx-undirected-gnp-random-graph"]], "rustworkx.undirected_random_bipartite_graph": [[530, "rustworkx-undirected-random-bipartite-graph"]], "rustworkx.union": [[531, "rustworkx-union"]], "rustworkx.unweighted_average_shortest_path_length": [[532, "rustworkx-unweighted-average-shortest-path-length"]], "rustworkx.vf2_mapping": [[533, "rustworkx-vf2-mapping"]], "BFSVisitor": [[534, "bfsvisitor"]], "rustworkx.visit.BFSVisitor.black_target_edge": [[535, "rustworkx-visit-bfsvisitor-black-target-edge"]], "rustworkx.visit.BFSVisitor.discover_vertex": [[536, "rustworkx-visit-bfsvisitor-discover-vertex"]], "rustworkx.visit.BFSVisitor.finish_vertex": [[537, "rustworkx-visit-bfsvisitor-finish-vertex"]], "rustworkx.visit.BFSVisitor.gray_target_edge": [[538, "rustworkx-visit-bfsvisitor-gray-target-edge"]], "rustworkx.visit.BFSVisitor.non_tree_edge": [[539, "rustworkx-visit-bfsvisitor-non-tree-edge"]], "rustworkx.visit.BFSVisitor.tree_edge": [[540, "rustworkx-visit-bfsvisitor-tree-edge"]], "DFSVisitor": [[541, "dfsvisitor"]], "rustworkx.visit.DFSVisitor.back_edge": [[542, "rustworkx-visit-dfsvisitor-back-edge"]], "rustworkx.visit.DFSVisitor.discover_vertex": [[543, "rustworkx-visit-dfsvisitor-discover-vertex"]], "rustworkx.visit.DFSVisitor.finish_vertex": [[544, "rustworkx-visit-dfsvisitor-finish-vertex"]], "rustworkx.visit.DFSVisitor.forward_or_cross_edge": [[545, "rustworkx-visit-dfsvisitor-forward-or-cross-edge"]], "rustworkx.visit.DFSVisitor.tree_edge": [[546, "rustworkx-visit-dfsvisitor-tree-edge"]], "DijkstraVisitor": [[547, "dijkstravisitor"]], "rustworkx.visit.DijkstraVisitor.discover_vertex": [[548, "rustworkx-visit-dijkstravisitor-discover-vertex"]], "rustworkx.visit.DijkstraVisitor.edge_not_relaxed": [[549, "rustworkx-visit-dijkstravisitor-edge-not-relaxed"]], "rustworkx.visit.DijkstraVisitor.edge_relaxed": [[550, "rustworkx-visit-dijkstravisitor-edge-relaxed"]], "rustworkx.visit.DijkstraVisitor.examine_edge": [[551, "rustworkx-visit-dijkstravisitor-examine-edge"]], "rustworkx.visit.DijkstraVisitor.finish_vertex": [[552, "rustworkx-visit-dijkstravisitor-finish-vertex"]], "rustworkx.visit.PruneSearch": [[553, "rustworkx-visit-prunesearch"]], "rustworkx.visit.StopSearch": [[554, "rustworkx-visit-stopsearch"]], "rustworkx.visualization.graphviz_draw": [[555, "rustworkx-visualization-graphviz-draw"]], "rustworkx.visualization.mpl_draw": [[556, "rustworkx-visualization-mpl-draw"]], "rustworkx.weakly_connected_components": [[557, "rustworkx-weakly-connected-components"]], "Rustworkx Comparison Benchmarks With Other Libraries": [[558, "rustworkx-comparison-benchmarks-with-other-libraries"]], "Graph Creation": [[558, "graph-creation"]], "Single Source Shortest Path": [[558, "single-source-shortest-path"]], "All-Pairs Shortest Path": [[558, "all-pairs-shortest-path"]], "Subgraph Isomorphism": [[558, "subgraph-isomorphism"]], "Citation": [[558, "citation"]], "rustworkx Documentation": [[559, "rustworkx-documentation"]], "Project history": [[559, "project-history"]], "Getting Started": [[560, "getting-started"]], "Installing Rustworkx": [[560, "installing-rustworkx"]], "Installing on a platform without precompiled binaries": [[560, "installing-on-a-platform-without-precompiled-binaries"]], "Platform Support": [[560, "platform-support"], [560, "id6"]], "Tier 1": [[560, "tier-1"]], "Tier 2": [[560, "tier-2"]], "Tier 3": [[560, "tier-3"]], "Tier 4": [[560, "tier-4"]], "Using rustworkx": [[560, "using-rustworkx"]], "rustworkx for NetworkX users": [[561, "rustworkx-for-networkx-users"]], "Some Key Differences": [[561, "some-key-differences"]], "Graph Data and Attributes": [[561, "graph-data-and-attributes"]], "Nodes": [[561, "nodes"], [566, "nodes"]], "Edges": [[561, "edges"], [566, "edges"]], "Attributes": [[561, "attributes"]], "Examining elements of a graph": [[561, "examining-elements-of-a-graph"], [566, "examining-elements-of-a-graph"]], "API Equivalents": [[561, "api-equivalents"]], "Class Constructors": [[561, "class-constructors"]], "Graph Modifiers": [[561, "graph-modifiers"]], "Matrix Converter Functions": [[561, "matrix-converter-functions"]], "Visualization Functions": [[561, "visualization-functions"]], "Matplotlib Drawers": [[561, "matplotlib-drawers"]], "Converting from a networkx graph": [[561, "converting-from-a-networkx-graph"]], "Functionality Gaps": [[561, "functionality-gaps"]], "0.14.0-52": [[562, "relnotes-0-14-0-52"]], "New Features": [[562, "new-features"], [562, "relnotes-0-14-0-new-features"], [562, "relnotes-0-13-0-new-features"], [562, "relnotes-0-12-0-new-features"], [562, "relnotes-0-11-0-new-features"], [562, "relnotes-0-10-2-new-features"], [562, "relnotes-0-10-0-new-features"], [562, "relnotes-0-9-0-new-features"], [562, "relnotes-0-8-0-new-features"], [562, "id47"], [562, "id50"], [562, "id54"], [562, "id57"]], "Upgrade Notes": [[562, "upgrade-notes"], [562, "relnotes-0-14-0-upgrade-notes"], [562, "relnotes-0-13-0-upgrade-notes"], [562, "relnotes-0-12-0-upgrade-notes"], [562, "relnotes-0-11-0-upgrade-notes"], [562, "relnotes-0-10-0-upgrade-notes"], [562, "relnotes-0-9-0-upgrade-notes"], [562, "relnotes-0-8-0-upgrade-notes"], [562, "id48"], [562, "id51"], [562, "id58"]], "Bug Fixes": [[562, "bug-fixes"], [562, "relnotes-0-14-0-bug-fixes"], [562, "relnotes-0-13-0-bug-fixes"], [562, "relnotes-0-12-0-bug-fixes"], [562, "relnotes-0-11-0-bug-fixes"], [562, "relnotes-0-10-2-bug-fixes"], [562, "relnotes-0-10-0-bug-fixes"], [562, "relnotes-0-9-0-bug-fixes"], [562, "relnotes-0-8-0-bug-fixes"]], "Other Notes": [[562, "other-notes"], [562, "relnotes-0-14-0-other-notes"]], "0.14.0": [[562, "relnotes-0-14-0"]], "Prelude": [[562, "prelude"], [562, "relnotes-0-13-0-prelude"], [562, "relnotes-0-12-0-prelude"], [562, "relnotes-0-11-0-prelude"], [562, "relnotes-0-10-2-prelude"], [562, "relnotes-0-10-1-prelude"], [562, "relnotes-0-10-0-prelude"], [562, "relnotes-0-9-0-prelude"], [562, "relnotes-0-8-0-prelude"]], "Deprecation Notes": [[562, "deprecation-notes"]], "0.13.0": [[562, "relnotes-0-13-0"]], "0.12.0": [[562, "relnotes-0-12-0"]], "0.11.0": [[562, "relnotes-0-11-0"]], "0.10.2": [[562, "relnotes-0-10-2"]], "0.10.1": [[562, "relnotes-0-10-1"]], "0.10.0": [[562, "relnotes-0-10-0"]], "0.9.0": [[562, "relnotes-0-9-0"]], "0.8.0": [[562, "relnotes-0-8-0"]], "0.7.1": [[562, "id45"]], "0.7.0": [[562, "id46"]], "Fixes": [[562, "fixes"], [562, "id52"], [562, "id55"], [562, "id59"]], "0.6.0": [[562, "id49"]], "0.5.0": [[562, "id53"]], "0.4.0": [[562, "id56"]], "Working with Betweenness Centrality": [[563, "working-with-betweenness-centrality"]], "Generate a Graph": [[563, "generate-a-graph"]], "Calculate the Betweeness Centrality": [[563, "calculate-the-betweeness-centrality"]], "Visualize the Betweenness Centrality": [[563, "visualize-the-betweenness-centrality"]], "Directed Acyclic Graphs": [[564, "directed-acyclic-graphs"], [564, "id1"]], "Directed Graph": [[564, "directed-graph"]], "Applications of DAGs": [[564, "applications-of-dags"]], "Task Scheduling": [[564, "task-scheduling"]], "Qiskit\u2019s Compiler": [[564, "qiskit-s-compiler"]], "rustworkx Tutorials and Guides": [[565, "rustworkx-tutorials-and-guides"]], "Introduction to rustworkx": [[566, "introduction-to-rustworkx"]], "Installing rustworkx": [[566, "installing-rustworkx"]], "How to import rustworkx": [[566, "how-to-import-rustworkx"]], "Creating a Graph": [[566, "creating-a-graph"]], "Removing elements from a graph": [[566, "removing-elements-from-a-graph"]], "Modifying elements of a graph": [[566, "modifying-elements-of-a-graph"]], "What to use for node and edge data payload": [[566, "what-to-use-for-node-and-edge-data-payload"]], "Accessing edges and neighbors": [[566, "accessing-edges-and-neighbors"]], "Graph Attributes": [[566, "graph-attributes"]], "Directed Graphs": [[566, "directed-graphs"]], "Multigraphs": [[566, "multigraphs"]], "Graph Generators and operations": [[566, "graph-generators-and-operations"]], "Analyzing graphs": [[566, "analyzing-graphs"]], "Drawing graphs": [[566, "drawing-graphs"]], "Visualization": [[567, "visualization"]], "Visualization API": [[567, "visualization-api"]]}, "indexentries": {"allpairspathlengthmapping (class in rustworkx)": [[25, "rustworkx.AllPairsPathLengthMapping"]], "items() (allpairspathlengthmapping method)": [[26, "rustworkx.AllPairsPathLengthMapping.items"]], "keys() (allpairspathlengthmapping method)": [[27, "rustworkx.AllPairsPathLengthMapping.keys"]], "values() (allpairspathlengthmapping method)": [[28, "rustworkx.AllPairsPathLengthMapping.values"]], "allpairspathmapping (class in rustworkx)": [[29, "rustworkx.AllPairsPathMapping"]], "items() (allpairspathmapping method)": [[30, "rustworkx.AllPairsPathMapping.items"]], "keys() (allpairspathmapping method)": [[31, "rustworkx.AllPairsPathMapping.keys"]], "values() (allpairspathmapping method)": [[32, "rustworkx.AllPairsPathMapping.values"]], "bfspredecessors (class in rustworkx)": [[33, "rustworkx.BFSPredecessors"]], "bfssuccessors (class in rustworkx)": [[34, "rustworkx.BFSSuccessors"]], "biconnectedcomponents (class in rustworkx)": [[35, "rustworkx.BiconnectedComponents"]], "items() (biconnectedcomponents method)": [[36, "rustworkx.BiconnectedComponents.items"]], "keys() (biconnectedcomponents method)": [[37, "rustworkx.BiconnectedComponents.keys"]], "values() (biconnectedcomponents method)": [[38, "rustworkx.BiconnectedComponents.values"]], "centralitymapping (class in rustworkx)": [[39, "rustworkx.CentralityMapping"]], "items() (centralitymapping method)": [[40, "rustworkx.CentralityMapping.items"]], "keys() (centralitymapping method)": [[41, "rustworkx.CentralityMapping.keys"]], "values() (centralitymapping method)": [[42, "rustworkx.CentralityMapping.values"]], "chains (class in rustworkx)": [[43, "rustworkx.Chains"]], "daghascycle": [[44, "rustworkx.DAGHasCycle"]], "dagwouldcycle": [[45, "rustworkx.DAGWouldCycle"]], "edgecentralitymapping (class in rustworkx)": [[46, "rustworkx.EdgeCentralityMapping"]], "items() (edgecentralitymapping method)": [[47, "rustworkx.EdgeCentralityMapping.items"]], "keys() (edgecentralitymapping method)": [[48, "rustworkx.EdgeCentralityMapping.keys"]], "values() (edgecentralitymapping method)": [[49, "rustworkx.EdgeCentralityMapping.values"]], "edgeindexmap (class in rustworkx)": [[50, "rustworkx.EdgeIndexMap"]], "items() (edgeindexmap method)": [[51, "rustworkx.EdgeIndexMap.items"]], "keys() (edgeindexmap method)": [[52, "rustworkx.EdgeIndexMap.keys"]], "values() (edgeindexmap method)": [[53, "rustworkx.EdgeIndexMap.values"]], "edgeindices (class in rustworkx)": [[54, "rustworkx.EdgeIndices"]], "edgelist (class in rustworkx)": [[55, "rustworkx.EdgeList"]], "graphnotbipartite": [[56, "rustworkx.GraphNotBipartite"]], "invalidmapping": [[57, "rustworkx.InvalidMapping"]], "invalidnode": [[58, "rustworkx.InvalidNode"]], "jsonserializationerror": [[59, "rustworkx.JSONSerializationError"]], "negativecycle": [[60, "rustworkx.NegativeCycle"]], "noedgebetweennodes": [[61, "rustworkx.NoEdgeBetweenNodes"]], "nopathfound": [[62, "rustworkx.NoPathFound"]], "nosuitableneighbors": [[63, "rustworkx.NoSuitableNeighbors"]], "nodeindices (class in rustworkx)": [[64, "rustworkx.NodeIndices"]], "nodemap (class in rustworkx)": [[65, "rustworkx.NodeMap"]], "items() (nodemap method)": [[66, "rustworkx.NodeMap.items"]], "keys() (nodemap method)": [[67, "rustworkx.NodeMap.keys"]], "values() (nodemap method)": [[68, "rustworkx.NodeMap.values"]], "nullgraph": [[69, "rustworkx.NullGraph"]], "pathlengthmapping (class in rustworkx)": [[70, "rustworkx.PathLengthMapping"]], "items() (pathlengthmapping method)": [[71, "rustworkx.PathLengthMapping.items"]], "keys() (pathlengthmapping method)": [[72, "rustworkx.PathLengthMapping.keys"]], "values() (pathlengthmapping method)": [[73, "rustworkx.PathLengthMapping.values"]], "pathmapping (class in rustworkx)": [[74, "rustworkx.PathMapping"]], "items() (pathmapping method)": [[75, "rustworkx.PathMapping.items"]], "keys() (pathmapping method)": [[76, "rustworkx.PathMapping.keys"]], "values() (pathmapping method)": [[77, "rustworkx.PathMapping.values"]], "pos2dmapping (class in rustworkx)": [[78, "rustworkx.Pos2DMapping"]], "items() (pos2dmapping method)": [[79, "rustworkx.Pos2DMapping.items"]], "keys() (pos2dmapping method)": [[80, "rustworkx.Pos2DMapping.keys"]], "values() (pos2dmapping method)": [[81, "rustworkx.Pos2DMapping.values"]], "productnodemap (class in rustworkx)": [[82, "rustworkx.ProductNodeMap"]], "items() (productnodemap method)": [[83, "rustworkx.ProductNodeMap.items"]], "keys() (productnodemap method)": [[84, "rustworkx.ProductNodeMap.keys"]], "values() (productnodemap method)": [[85, "rustworkx.ProductNodeMap.values"]], "pydag (class in rustworkx)": [[86, "rustworkx.PyDAG"]], "attrs (pydag attribute)": [[86, "rustworkx.PyDAG.attrs"]], "check_cycle (pydag attribute)": [[86, "rustworkx.PyDAG.check_cycle"]], "multigraph (pydag attribute)": [[86, "rustworkx.PyDAG.multigraph"]], "add_child() (pydag method)": [[87, "rustworkx.PyDAG.add_child"]], "add_edge() (pydag method)": [[88, "rustworkx.PyDAG.add_edge"]], "add_edges_from() (pydag method)": [[89, "rustworkx.PyDAG.add_edges_from"]], "add_edges_from_no_data() (pydag method)": [[90, "rustworkx.PyDAG.add_edges_from_no_data"]], "add_node() (pydag method)": [[91, "rustworkx.PyDAG.add_node"]], "add_nodes_from() (pydag method)": [[92, "rustworkx.PyDAG.add_nodes_from"]], "add_parent() (pydag method)": [[93, "rustworkx.PyDAG.add_parent"]], "adj() (pydag method)": [[94, "rustworkx.PyDAG.adj"]], "adj_direction() (pydag method)": [[95, "rustworkx.PyDAG.adj_direction"]], "clear() (pydag method)": [[96, "rustworkx.PyDAG.clear"]], "clear_edges() (pydag method)": [[97, "rustworkx.PyDAG.clear_edges"]], "compose() (pydag method)": [[98, "rustworkx.PyDAG.compose"]], "contract_nodes() (pydag method)": [[99, "rustworkx.PyDAG.contract_nodes"]], "copy() (pydag method)": [[100, "rustworkx.PyDAG.copy"]], "edge_index_map() (pydag method)": [[101, "rustworkx.PyDAG.edge_index_map"]], "edge_indices() (pydag method)": [[102, "rustworkx.PyDAG.edge_indices"]], "edge_indices_from_endpoints() (pydag method)": [[103, "rustworkx.PyDAG.edge_indices_from_endpoints"]], "edge_list() (pydag method)": [[104, "rustworkx.PyDAG.edge_list"]], "edge_subgraph() (pydag method)": [[105, "rustworkx.PyDAG.edge_subgraph"]], "edges() (pydag method)": [[106, "rustworkx.PyDAG.edges"]], "extend_from_edge_list() (pydag method)": [[107, "rustworkx.PyDAG.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydag method)": [[108, "rustworkx.PyDAG.extend_from_weighted_edge_list"]], "filter_edges() (pydag method)": [[109, "rustworkx.PyDAG.filter_edges"]], "filter_nodes() (pydag method)": [[110, "rustworkx.PyDAG.filter_nodes"]], "find_adjacent_node_by_edge() (pydag method)": [[111, "rustworkx.PyDAG.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydag method)": [[112, "rustworkx.PyDAG.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydag method)": [[113, "rustworkx.PyDAG.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydag method)": [[114, "rustworkx.PyDAG.find_predecessors_by_edge"]], "find_successors_by_edge() (pydag method)": [[115, "rustworkx.PyDAG.find_successors_by_edge"]], "from_adjacency_matrix() (pydag static method)": [[116, "rustworkx.PyDAG.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydag static method)": [[117, "rustworkx.PyDAG.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydag method)": [[118, "rustworkx.PyDAG.get_all_edge_data"]], "get_edge_data() (pydag method)": [[119, "rustworkx.PyDAG.get_edge_data"]], "get_edge_data_by_index() (pydag method)": [[120, "rustworkx.PyDAG.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydag method)": [[121, "rustworkx.PyDAG.get_edge_endpoints_by_index"]], "get_node_data() (pydag method)": [[122, "rustworkx.PyDAG.get_node_data"]], "has_edge() (pydag method)": [[123, "rustworkx.PyDAG.has_edge"]], "has_parallel_edges() (pydag method)": [[124, "rustworkx.PyDAG.has_parallel_edges"]], "in_degree() (pydag method)": [[125, "rustworkx.PyDAG.in_degree"]], "in_edges() (pydag method)": [[126, "rustworkx.PyDAG.in_edges"]], "incident_edge_index_map() (pydag method)": [[127, "rustworkx.PyDAG.incident_edge_index_map"]], "incident_edges() (pydag method)": [[128, "rustworkx.PyDAG.incident_edges"]], "insert_node_on_in_edges() (pydag method)": [[129, "rustworkx.PyDAG.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydag method)": [[130, "rustworkx.PyDAG.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydag method)": [[131, "rustworkx.PyDAG.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydag method)": [[132, "rustworkx.PyDAG.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydag method)": [[133, "rustworkx.PyDAG.is_symmetric"]], "make_symmetric() (pydag method)": [[134, "rustworkx.PyDAG.make_symmetric"]], "merge_nodes() (pydag method)": [[135, "rustworkx.PyDAG.merge_nodes"]], "neighbors() (pydag method)": [[136, "rustworkx.PyDAG.neighbors"]], "node_indexes() (pydag method)": [[137, "rustworkx.PyDAG.node_indexes"]], "node_indices() (pydag method)": [[138, "rustworkx.PyDAG.node_indices"]], "nodes() (pydag method)": [[139, "rustworkx.PyDAG.nodes"]], "num_edges() (pydag method)": [[140, "rustworkx.PyDAG.num_edges"]], "num_nodes() (pydag method)": [[141, "rustworkx.PyDAG.num_nodes"]], "out_degree() (pydag method)": [[142, "rustworkx.PyDAG.out_degree"]], "out_edges() (pydag method)": [[143, "rustworkx.PyDAG.out_edges"]], "predecessor_indices() (pydag method)": [[144, "rustworkx.PyDAG.predecessor_indices"]], "predecessors() (pydag method)": [[145, "rustworkx.PyDAG.predecessors"]], "read_edge_list() (pydag static method)": [[146, "rustworkx.PyDAG.read_edge_list"]], "remove_edge() (pydag method)": [[147, "rustworkx.PyDAG.remove_edge"]], "remove_edge_from_index() (pydag method)": [[148, "rustworkx.PyDAG.remove_edge_from_index"]], "remove_edges_from() (pydag method)": [[149, "rustworkx.PyDAG.remove_edges_from"]], "remove_node() (pydag method)": [[150, "rustworkx.PyDAG.remove_node"]], "remove_node_retain_edges() (pydag method)": [[151, "rustworkx.PyDAG.remove_node_retain_edges"]], "remove_node_retain_edges_by_id() (pydag method)": [[152, "rustworkx.PyDAG.remove_node_retain_edges_by_id"]], "remove_node_retain_edges_by_key() (pydag method)": [[153, "rustworkx.PyDAG.remove_node_retain_edges_by_key"]], "remove_nodes_from() (pydag method)": [[154, "rustworkx.PyDAG.remove_nodes_from"]], "reverse() (pydag method)": [[155, "rustworkx.PyDAG.reverse"]], "subgraph() (pydag method)": [[156, "rustworkx.PyDAG.subgraph"]], "substitute_node_with_subgraph() (pydag method)": [[157, "rustworkx.PyDAG.substitute_node_with_subgraph"]], "successor_indices() (pydag method)": [[158, "rustworkx.PyDAG.successor_indices"]], "successors() (pydag method)": [[159, "rustworkx.PyDAG.successors"]], "to_dot() (pydag method)": [[160, "rustworkx.PyDAG.to_dot"]], "to_undirected() (pydag method)": [[161, "rustworkx.PyDAG.to_undirected"]], "update_edge() (pydag method)": [[162, "rustworkx.PyDAG.update_edge"]], "update_edge_by_index() (pydag method)": [[163, "rustworkx.PyDAG.update_edge_by_index"]], "weighted_edge_list() (pydag method)": [[164, "rustworkx.PyDAG.weighted_edge_list"]], "write_edge_list() (pydag method)": [[165, "rustworkx.PyDAG.write_edge_list"]], "pydigraph (class in rustworkx)": [[166, "rustworkx.PyDiGraph"]], "attrs (pydigraph attribute)": [[166, "rustworkx.PyDiGraph.attrs"]], "check_cycle (pydigraph attribute)": [[166, "rustworkx.PyDiGraph.check_cycle"]], "multigraph (pydigraph attribute)": [[166, "rustworkx.PyDiGraph.multigraph"]], "add_child() (pydigraph method)": [[167, "rustworkx.PyDiGraph.add_child"]], "add_edge() (pydigraph method)": [[168, "rustworkx.PyDiGraph.add_edge"]], "add_edges_from() (pydigraph method)": [[169, "rustworkx.PyDiGraph.add_edges_from"]], "add_edges_from_no_data() (pydigraph method)": [[170, "rustworkx.PyDiGraph.add_edges_from_no_data"]], "add_node() (pydigraph method)": [[171, "rustworkx.PyDiGraph.add_node"]], "add_nodes_from() (pydigraph method)": [[172, "rustworkx.PyDiGraph.add_nodes_from"]], "add_parent() (pydigraph method)": [[173, "rustworkx.PyDiGraph.add_parent"]], "adj() (pydigraph method)": [[174, "rustworkx.PyDiGraph.adj"]], "adj_direction() (pydigraph method)": [[175, "rustworkx.PyDiGraph.adj_direction"]], "clear() (pydigraph method)": [[176, "rustworkx.PyDiGraph.clear"]], "clear_edges() (pydigraph method)": [[177, "rustworkx.PyDiGraph.clear_edges"]], "compose() (pydigraph method)": [[178, "rustworkx.PyDiGraph.compose"]], "contract_nodes() (pydigraph method)": [[179, "rustworkx.PyDiGraph.contract_nodes"]], "copy() (pydigraph method)": [[180, "rustworkx.PyDiGraph.copy"]], "edge_index_map() (pydigraph method)": [[181, "rustworkx.PyDiGraph.edge_index_map"]], "edge_indices() (pydigraph method)": [[182, "rustworkx.PyDiGraph.edge_indices"]], "edge_indices_from_endpoints() (pydigraph method)": [[183, "rustworkx.PyDiGraph.edge_indices_from_endpoints"]], "edge_list() (pydigraph method)": [[184, "rustworkx.PyDiGraph.edge_list"]], "edge_subgraph() (pydigraph method)": [[185, "rustworkx.PyDiGraph.edge_subgraph"]], "edges() (pydigraph method)": [[186, "rustworkx.PyDiGraph.edges"]], "extend_from_edge_list() (pydigraph method)": [[187, "rustworkx.PyDiGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydigraph method)": [[188, "rustworkx.PyDiGraph.extend_from_weighted_edge_list"]], "filter_edges() (pydigraph method)": [[189, "rustworkx.PyDiGraph.filter_edges"]], "filter_nodes() (pydigraph method)": [[190, "rustworkx.PyDiGraph.filter_nodes"]], "find_adjacent_node_by_edge() (pydigraph method)": [[191, "rustworkx.PyDiGraph.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydigraph method)": [[192, "rustworkx.PyDiGraph.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydigraph method)": [[193, "rustworkx.PyDiGraph.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydigraph method)": [[194, "rustworkx.PyDiGraph.find_predecessors_by_edge"]], "find_successors_by_edge() (pydigraph method)": [[195, "rustworkx.PyDiGraph.find_successors_by_edge"]], "from_adjacency_matrix() (pydigraph static method)": [[196, "rustworkx.PyDiGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydigraph static method)": [[197, "rustworkx.PyDiGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydigraph method)": [[198, "rustworkx.PyDiGraph.get_all_edge_data"]], "get_edge_data() (pydigraph method)": [[199, "rustworkx.PyDiGraph.get_edge_data"]], "get_edge_data_by_index() (pydigraph method)": [[200, "rustworkx.PyDiGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydigraph method)": [[201, "rustworkx.PyDiGraph.get_edge_endpoints_by_index"]], "get_node_data() (pydigraph method)": [[202, "rustworkx.PyDiGraph.get_node_data"]], "has_edge() (pydigraph method)": [[203, "rustworkx.PyDiGraph.has_edge"]], "has_parallel_edges() (pydigraph method)": [[204, "rustworkx.PyDiGraph.has_parallel_edges"]], "in_degree() (pydigraph method)": [[205, "rustworkx.PyDiGraph.in_degree"]], "in_edges() (pydigraph method)": [[206, "rustworkx.PyDiGraph.in_edges"]], "incident_edge_index_map() (pydigraph method)": [[207, "rustworkx.PyDiGraph.incident_edge_index_map"]], "incident_edges() (pydigraph method)": [[208, "rustworkx.PyDiGraph.incident_edges"]], "insert_node_on_in_edges() (pydigraph method)": [[209, "rustworkx.PyDiGraph.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydigraph method)": [[210, "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydigraph method)": [[211, "rustworkx.PyDiGraph.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydigraph method)": [[212, "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydigraph method)": [[213, "rustworkx.PyDiGraph.is_symmetric"]], "make_symmetric() (pydigraph method)": [[214, "rustworkx.PyDiGraph.make_symmetric"]], "merge_nodes() (pydigraph method)": [[215, "rustworkx.PyDiGraph.merge_nodes"]], "neighbors() (pydigraph method)": [[216, "rustworkx.PyDiGraph.neighbors"]], "node_indexes() (pydigraph method)": [[217, "rustworkx.PyDiGraph.node_indexes"]], "node_indices() (pydigraph method)": [[218, "rustworkx.PyDiGraph.node_indices"]], "nodes() (pydigraph method)": [[219, "rustworkx.PyDiGraph.nodes"]], "num_edges() (pydigraph method)": [[220, "rustworkx.PyDiGraph.num_edges"]], "num_nodes() (pydigraph method)": [[221, "rustworkx.PyDiGraph.num_nodes"]], "out_degree() (pydigraph method)": [[222, "rustworkx.PyDiGraph.out_degree"]], "out_edges() (pydigraph method)": [[223, "rustworkx.PyDiGraph.out_edges"]], "predecessor_indices() (pydigraph method)": [[224, "rustworkx.PyDiGraph.predecessor_indices"]], "predecessors() (pydigraph method)": [[225, "rustworkx.PyDiGraph.predecessors"]], "read_edge_list() (pydigraph static method)": [[226, "rustworkx.PyDiGraph.read_edge_list"]], "remove_edge() (pydigraph method)": [[227, "rustworkx.PyDiGraph.remove_edge"]], "remove_edge_from_index() (pydigraph method)": [[228, "rustworkx.PyDiGraph.remove_edge_from_index"]], "remove_edges_from() (pydigraph method)": [[229, "rustworkx.PyDiGraph.remove_edges_from"]], "remove_node() (pydigraph method)": [[230, "rustworkx.PyDiGraph.remove_node"]], "remove_node_retain_edges() (pydigraph method)": [[231, "rustworkx.PyDiGraph.remove_node_retain_edges"]], "remove_node_retain_edges_by_id() (pydigraph method)": [[232, "rustworkx.PyDiGraph.remove_node_retain_edges_by_id"]], "remove_node_retain_edges_by_key() (pydigraph method)": [[233, "rustworkx.PyDiGraph.remove_node_retain_edges_by_key"]], "remove_nodes_from() (pydigraph method)": [[234, "rustworkx.PyDiGraph.remove_nodes_from"]], "reverse() (pydigraph method)": [[235, "rustworkx.PyDiGraph.reverse"]], "subgraph() (pydigraph method)": [[236, "rustworkx.PyDiGraph.subgraph"]], "substitute_node_with_subgraph() (pydigraph method)": [[237, "rustworkx.PyDiGraph.substitute_node_with_subgraph"]], "successor_indices() (pydigraph method)": [[238, "rustworkx.PyDiGraph.successor_indices"]], "successors() (pydigraph method)": [[239, "rustworkx.PyDiGraph.successors"]], "to_dot() (pydigraph method)": [[240, "rustworkx.PyDiGraph.to_dot"]], "to_undirected() (pydigraph method)": [[241, "rustworkx.PyDiGraph.to_undirected"]], "update_edge() (pydigraph method)": [[242, "rustworkx.PyDiGraph.update_edge"]], "update_edge_by_index() (pydigraph method)": [[243, "rustworkx.PyDiGraph.update_edge_by_index"]], "weighted_edge_list() (pydigraph method)": [[244, "rustworkx.PyDiGraph.weighted_edge_list"]], "write_edge_list() (pydigraph method)": [[245, "rustworkx.PyDiGraph.write_edge_list"]], "pygraph (class in rustworkx)": [[246, "rustworkx.PyGraph"]], "attrs (pygraph attribute)": [[246, "rustworkx.PyGraph.attrs"]], "multigraph (pygraph attribute)": [[246, "rustworkx.PyGraph.multigraph"]], "add_edge() (pygraph method)": [[247, "rustworkx.PyGraph.add_edge"]], "add_edges_from() (pygraph method)": [[248, "rustworkx.PyGraph.add_edges_from"]], "add_edges_from_no_data() (pygraph method)": [[249, "rustworkx.PyGraph.add_edges_from_no_data"]], "add_node() (pygraph method)": [[250, "rustworkx.PyGraph.add_node"]], "add_nodes_from() (pygraph method)": [[251, "rustworkx.PyGraph.add_nodes_from"]], "adj() (pygraph method)": [[252, "rustworkx.PyGraph.adj"]], "clear() (pygraph method)": [[253, "rustworkx.PyGraph.clear"]], "clear_edges() (pygraph method)": [[254, "rustworkx.PyGraph.clear_edges"]], "compose() (pygraph method)": [[255, "rustworkx.PyGraph.compose"]], "contract_nodes() (pygraph method)": [[256, "rustworkx.PyGraph.contract_nodes"]], "copy() (pygraph method)": [[257, "rustworkx.PyGraph.copy"]], "degree() (pygraph method)": [[258, "rustworkx.PyGraph.degree"]], "edge_index_map() (pygraph method)": [[259, "rustworkx.PyGraph.edge_index_map"]], "edge_indices() (pygraph method)": [[260, "rustworkx.PyGraph.edge_indices"]], "edge_indices_from_endpoints() (pygraph method)": [[261, "rustworkx.PyGraph.edge_indices_from_endpoints"]], "edge_list() (pygraph method)": [[262, "rustworkx.PyGraph.edge_list"]], "edge_subgraph() (pygraph method)": [[263, "rustworkx.PyGraph.edge_subgraph"]], "edges() (pygraph method)": [[264, "rustworkx.PyGraph.edges"]], "extend_from_edge_list() (pygraph method)": [[265, "rustworkx.PyGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pygraph method)": [[266, "rustworkx.PyGraph.extend_from_weighted_edge_list"]], "filter_edges() (pygraph method)": [[267, "rustworkx.PyGraph.filter_edges"]], "filter_nodes() (pygraph method)": [[268, "rustworkx.PyGraph.filter_nodes"]], "find_node_by_weight() (pygraph method)": [[269, "rustworkx.PyGraph.find_node_by_weight"]], "from_adjacency_matrix() (pygraph static method)": [[270, "rustworkx.PyGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pygraph static method)": [[271, "rustworkx.PyGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pygraph method)": [[272, "rustworkx.PyGraph.get_all_edge_data"]], "get_edge_data() (pygraph method)": [[273, "rustworkx.PyGraph.get_edge_data"]], "get_edge_data_by_index() (pygraph method)": [[274, "rustworkx.PyGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pygraph method)": [[275, "rustworkx.PyGraph.get_edge_endpoints_by_index"]], "get_node_data() (pygraph method)": [[276, "rustworkx.PyGraph.get_node_data"]], "has_edge() (pygraph method)": [[277, "rustworkx.PyGraph.has_edge"]], "has_parallel_edges() (pygraph method)": [[278, "rustworkx.PyGraph.has_parallel_edges"]], "in_edges() (pygraph method)": [[279, "rustworkx.PyGraph.in_edges"]], "incident_edge_index_map() (pygraph method)": [[280, "rustworkx.PyGraph.incident_edge_index_map"]], "incident_edges() (pygraph method)": [[281, "rustworkx.PyGraph.incident_edges"]], "neighbors() (pygraph method)": [[282, "rustworkx.PyGraph.neighbors"]], "node_indexes() (pygraph method)": [[283, "rustworkx.PyGraph.node_indexes"]], "node_indices() (pygraph method)": [[284, "rustworkx.PyGraph.node_indices"]], "nodes() (pygraph method)": [[285, "rustworkx.PyGraph.nodes"]], "num_edges() (pygraph method)": [[286, "rustworkx.PyGraph.num_edges"]], "num_nodes() (pygraph method)": [[287, "rustworkx.PyGraph.num_nodes"]], "out_edges() (pygraph method)": [[288, "rustworkx.PyGraph.out_edges"]], "read_edge_list() (pygraph static method)": [[289, "rustworkx.PyGraph.read_edge_list"]], "remove_edge() (pygraph method)": [[290, "rustworkx.PyGraph.remove_edge"]], "remove_edge_from_index() (pygraph method)": [[291, "rustworkx.PyGraph.remove_edge_from_index"]], "remove_edges_from() (pygraph method)": [[292, "rustworkx.PyGraph.remove_edges_from"]], "remove_node() (pygraph method)": [[293, "rustworkx.PyGraph.remove_node"]], "remove_nodes_from() (pygraph method)": [[294, "rustworkx.PyGraph.remove_nodes_from"]], "subgraph() (pygraph method)": [[295, "rustworkx.PyGraph.subgraph"]], "substitute_node_with_subgraph() (pygraph method)": [[296, "rustworkx.PyGraph.substitute_node_with_subgraph"]], "to_directed() (pygraph method)": [[297, "rustworkx.PyGraph.to_directed"]], "to_dot() (pygraph method)": [[298, "rustworkx.PyGraph.to_dot"]], "update_edge() (pygraph method)": [[299, "rustworkx.PyGraph.update_edge"]], "update_edge_by_index() (pygraph method)": [[300, "rustworkx.PyGraph.update_edge_by_index"]], "weighted_edge_list() (pygraph method)": [[301, "rustworkx.PyGraph.weighted_edge_list"]], "write_edge_list() (pygraph method)": [[302, "rustworkx.PyGraph.write_edge_list"]], "topologicalsorter (class in rustworkx)": [[303, "rustworkx.TopologicalSorter"]], "done() (topologicalsorter method)": [[304, "rustworkx.TopologicalSorter.done"]], "get_ready() (topologicalsorter method)": [[305, "rustworkx.TopologicalSorter.get_ready"]], "is_active() (topologicalsorter method)": [[306, "rustworkx.TopologicalSorter.is_active"]], "weightededgelist (class in rustworkx)": [[307, "rustworkx.WeightedEdgeList"]], "adjacency_matrix() (in module rustworkx)": [[308, "rustworkx.adjacency_matrix"]], "all_pairs_all_simple_paths() (in module rustworkx)": [[309, "rustworkx.all_pairs_all_simple_paths"]], "all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[310, "rustworkx.all_pairs_bellman_ford_path_lengths"]], "all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[311, "rustworkx.all_pairs_bellman_ford_shortest_paths"]], "all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[312, "rustworkx.all_pairs_dijkstra_path_lengths"]], "all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[313, "rustworkx.all_pairs_dijkstra_shortest_paths"]], "all_shortest_paths() (in module rustworkx)": [[314, "rustworkx.all_shortest_paths"]], "all_simple_paths() (in module rustworkx)": [[315, "rustworkx.all_simple_paths"]], "ancestors() (in module rustworkx)": [[316, "rustworkx.ancestors"]], "articulation_points() (in module rustworkx)": [[317, "rustworkx.articulation_points"]], "astar_shortest_path() (in module rustworkx)": [[318, "rustworkx.astar_shortest_path"]], "barabasi_albert_graph() (in module rustworkx)": [[319, "rustworkx.barabasi_albert_graph"]], "bellman_ford_shortest_path_lengths() (in module rustworkx)": [[320, "rustworkx.bellman_ford_shortest_path_lengths"]], "bellman_ford_shortest_paths() (in module rustworkx)": [[321, "rustworkx.bellman_ford_shortest_paths"]], "betweenness_centrality() (in module rustworkx)": [[322, "rustworkx.betweenness_centrality"]], "bfs_predecessors() (in module rustworkx)": [[323, "rustworkx.bfs_predecessors"]], "bfs_search() (in module rustworkx)": [[324, "rustworkx.bfs_search"]], "bfs_successors() (in module rustworkx)": [[325, "rustworkx.bfs_successors"]], "biconnected_components() (in module rustworkx)": [[326, "rustworkx.biconnected_components"]], "bipartite_layout() (in module rustworkx)": [[327, "rustworkx.bipartite_layout"]], "bridges() (in module rustworkx)": [[328, "rustworkx.bridges"]], "cartesian_product() (in module rustworkx)": [[329, "rustworkx.cartesian_product"]], "chain_decomposition() (in module rustworkx)": [[330, "rustworkx.chain_decomposition"]], "circular_layout() (in module rustworkx)": [[331, "rustworkx.circular_layout"]], "closeness_centrality() (in module rustworkx)": [[332, "rustworkx.closeness_centrality"]], "collect_bicolor_runs() (in module rustworkx)": [[333, "rustworkx.collect_bicolor_runs"]], "collect_runs() (in module rustworkx)": [[334, "rustworkx.collect_runs"]], "complement() (in module rustworkx)": [[335, "rustworkx.complement"]], "connected_components() (in module rustworkx)": [[336, "rustworkx.connected_components"]], "core_number() (in module rustworkx)": [[337, "rustworkx.core_number"]], "cycle_basis() (in module rustworkx)": [[338, "rustworkx.cycle_basis"]], "dag_longest_path() (in module rustworkx)": [[339, "rustworkx.dag_longest_path"]], "dag_longest_path_length() (in module rustworkx)": [[340, "rustworkx.dag_longest_path_length"]], "dag_weighted_longest_path() (in module rustworkx)": [[341, "rustworkx.dag_weighted_longest_path"]], "dag_weighted_longest_path_length() (in module rustworkx)": [[342, "rustworkx.dag_weighted_longest_path_length"]], "descendants() (in module rustworkx)": [[343, "rustworkx.descendants"]], "dfs_edges() (in module rustworkx)": [[344, "rustworkx.dfs_edges"]], "dfs_search() (in module rustworkx)": [[345, "rustworkx.dfs_search"]], "digraph_adjacency_matrix() (in module rustworkx)": [[346, "rustworkx.digraph_adjacency_matrix"]], "digraph_all_pairs_all_simple_paths() (in module rustworkx)": [[347, "rustworkx.digraph_all_pairs_all_simple_paths"]], "digraph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[348, "rustworkx.digraph_all_pairs_bellman_ford_path_lengths"]], "digraph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[349, "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths"]], "digraph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[350, "rustworkx.digraph_all_pairs_dijkstra_path_lengths"]], "digraph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[351, "rustworkx.digraph_all_pairs_dijkstra_shortest_paths"]], "digraph_all_shortest_paths() (in module rustworkx)": [[352, "rustworkx.digraph_all_shortest_paths"]], "digraph_all_simple_paths() (in module rustworkx)": [[353, "rustworkx.digraph_all_simple_paths"]], "digraph_astar_shortest_path() (in module rustworkx)": [[354, "rustworkx.digraph_astar_shortest_path"]], "digraph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[355, "rustworkx.digraph_bellman_ford_shortest_path_lengths"]], "digraph_betweenness_centrality() (in module rustworkx)": [[356, "rustworkx.digraph_betweenness_centrality"]], "digraph_bfs_search() (in module rustworkx)": [[357, "rustworkx.digraph_bfs_search"]], "digraph_bipartite_layout() (in module rustworkx)": [[358, "rustworkx.digraph_bipartite_layout"]], "digraph_cartesian_product() (in module rustworkx)": [[359, "rustworkx.digraph_cartesian_product"]], "digraph_circular_layout() (in module rustworkx)": [[360, "rustworkx.digraph_circular_layout"]], "digraph_closeness_centrality() (in module rustworkx)": [[361, "rustworkx.digraph_closeness_centrality"]], "digraph_complement() (in module rustworkx)": [[362, "rustworkx.digraph_complement"]], "digraph_core_number() (in module rustworkx)": [[363, "rustworkx.digraph_core_number"]], "digraph_dfs_edges() (in module rustworkx)": [[364, "rustworkx.digraph_dfs_edges"]], "digraph_dfs_search() (in module rustworkx)": [[365, "rustworkx.digraph_dfs_search"]], "digraph_dijkstra_search() (in module rustworkx)": [[366, "rustworkx.digraph_dijkstra_search"]], "digraph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[367, "rustworkx.digraph_dijkstra_shortest_path_lengths"]], "digraph_dijkstra_shortest_paths() (in module rustworkx)": [[368, "rustworkx.digraph_dijkstra_shortest_paths"]], "digraph_distance_matrix() (in module rustworkx)": [[369, "rustworkx.digraph_distance_matrix"]], "digraph_edge_betweenness_centrality() (in module rustworkx)": [[370, "rustworkx.digraph_edge_betweenness_centrality"]], "digraph_eigenvector_centrality() (in module rustworkx)": [[371, "rustworkx.digraph_eigenvector_centrality"]], "digraph_find_cycle() (in module rustworkx)": [[372, "rustworkx.digraph_find_cycle"]], "digraph_floyd_warshall() (in module rustworkx)": [[373, "rustworkx.digraph_floyd_warshall"]], "digraph_floyd_warshall_numpy() (in module rustworkx)": [[374, "rustworkx.digraph_floyd_warshall_numpy"]], "digraph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[375, "rustworkx.digraph_floyd_warshall_successor_and_distance"]], "digraph_is_isomorphic() (in module rustworkx)": [[376, "rustworkx.digraph_is_isomorphic"]], "digraph_is_subgraph_isomorphic() (in module rustworkx)": [[377, "rustworkx.digraph_is_subgraph_isomorphic"]], "digraph_k_shortest_path_lengths() (in module rustworkx)": [[378, "rustworkx.digraph_k_shortest_path_lengths"]], "digraph_katz_centrality() (in module rustworkx)": [[379, "rustworkx.digraph_katz_centrality"]], "digraph_longest_simple_path() (in module rustworkx)": [[380, "rustworkx.digraph_longest_simple_path"]], "digraph_node_link_json() (in module rustworkx)": [[381, "rustworkx.digraph_node_link_json"]], "digraph_num_shortest_paths_unweighted() (in module rustworkx)": [[382, "rustworkx.digraph_num_shortest_paths_unweighted"]], "digraph_random_layout() (in module rustworkx)": [[383, "rustworkx.digraph_random_layout"]], "digraph_shell_layout() (in module rustworkx)": [[384, "rustworkx.digraph_shell_layout"]], "digraph_spiral_layout() (in module rustworkx)": [[385, "rustworkx.digraph_spiral_layout"]], "digraph_spring_layout() (in module rustworkx)": [[386, "rustworkx.digraph_spring_layout"]], "digraph_tensor_product() (in module rustworkx)": [[387, "rustworkx.digraph_tensor_product"]], "digraph_transitivity() (in module rustworkx)": [[388, "rustworkx.digraph_transitivity"]], "digraph_union() (in module rustworkx)": [[389, "rustworkx.digraph_union"]], "digraph_unweighted_average_shortest_path_length() (in module rustworkx)": [[390, "rustworkx.digraph_unweighted_average_shortest_path_length"]], "digraph_vf2_mapping() (in module rustworkx)": [[391, "rustworkx.digraph_vf2_mapping"]], "dijkstra_search() (in module rustworkx)": [[392, "rustworkx.dijkstra_search"]], "dijkstra_shortest_path_lengths() (in module rustworkx)": [[393, "rustworkx.dijkstra_shortest_path_lengths"]], "dijkstra_shortest_paths() (in module rustworkx)": [[394, "rustworkx.dijkstra_shortest_paths"]], "directed_barabasi_albert_graph() (in module rustworkx)": [[395, "rustworkx.directed_barabasi_albert_graph"]], "directed_gnm_random_graph() (in module rustworkx)": [[396, "rustworkx.directed_gnm_random_graph"]], "directed_gnp_random_graph() (in module rustworkx)": [[397, "rustworkx.directed_gnp_random_graph"]], "directed_random_bipartite_graph() (in module rustworkx)": [[398, "rustworkx.directed_random_bipartite_graph"]], "distance_matrix() (in module rustworkx)": [[399, "rustworkx.distance_matrix"]], "edge_betweenness_centrality() (in module rustworkx)": [[400, "rustworkx.edge_betweenness_centrality"]], "eigenvector_centrality() (in module rustworkx)": [[401, "rustworkx.eigenvector_centrality"]], "find_negative_cycle() (in module rustworkx)": [[402, "rustworkx.find_negative_cycle"]], "floyd_warshall() (in module rustworkx)": [[403, "rustworkx.floyd_warshall"]], "floyd_warshall_numpy() (in module rustworkx)": [[404, "rustworkx.floyd_warshall_numpy"]], "floyd_warshall_successor_and_distance() (in module rustworkx)": [[405, "rustworkx.floyd_warshall_successor_and_distance"]], "barbell_graph() (in module rustworkx.generators)": [[406, "rustworkx.generators.barbell_graph"]], "binomial_tree_graph() (in module rustworkx.generators)": [[407, "rustworkx.generators.binomial_tree_graph"]], "complete_graph() (in module rustworkx.generators)": [[408, "rustworkx.generators.complete_graph"]], "cycle_graph() (in module rustworkx.generators)": [[409, "rustworkx.generators.cycle_graph"]], "directed_binomial_tree_graph() (in module rustworkx.generators)": [[410, "rustworkx.generators.directed_binomial_tree_graph"]], "directed_complete_graph() (in module rustworkx.generators)": [[411, "rustworkx.generators.directed_complete_graph"]], "directed_cycle_graph() (in module rustworkx.generators)": [[412, "rustworkx.generators.directed_cycle_graph"]], "directed_empty_graph() (in module rustworkx.generators)": [[413, "rustworkx.generators.directed_empty_graph"]], "directed_grid_graph() (in module rustworkx.generators)": [[414, "rustworkx.generators.directed_grid_graph"]], "directed_heavy_hex_graph() (in module rustworkx.generators)": [[415, "rustworkx.generators.directed_heavy_hex_graph"]], "directed_heavy_square_graph() (in module rustworkx.generators)": [[416, "rustworkx.generators.directed_heavy_square_graph"]], "directed_hexagonal_lattice_graph() (in module rustworkx.generators)": [[417, "rustworkx.generators.directed_hexagonal_lattice_graph"]], "directed_mesh_graph() (in module rustworkx.generators)": [[418, "rustworkx.generators.directed_mesh_graph"]], "directed_path_graph() (in module rustworkx.generators)": [[419, "rustworkx.generators.directed_path_graph"]], "directed_star_graph() (in module rustworkx.generators)": [[420, "rustworkx.generators.directed_star_graph"]], "empty_graph() (in module rustworkx.generators)": [[421, "rustworkx.generators.empty_graph"]], "full_rary_tree() (in module rustworkx.generators)": [[422, "rustworkx.generators.full_rary_tree"]], "generalized_petersen_graph() (in module rustworkx.generators)": [[423, "rustworkx.generators.generalized_petersen_graph"]], "grid_graph() (in module rustworkx.generators)": [[424, "rustworkx.generators.grid_graph"]], "heavy_hex_graph() (in module rustworkx.generators)": [[425, "rustworkx.generators.heavy_hex_graph"]], "heavy_square_graph() (in module rustworkx.generators)": [[426, "rustworkx.generators.heavy_square_graph"]], "hexagonal_lattice_graph() (in module rustworkx.generators)": [[427, "rustworkx.generators.hexagonal_lattice_graph"]], "lollipop_graph() (in module rustworkx.generators)": [[428, "rustworkx.generators.lollipop_graph"]], "mesh_graph() (in module rustworkx.generators)": [[429, "rustworkx.generators.mesh_graph"]], "path_graph() (in module rustworkx.generators)": [[430, "rustworkx.generators.path_graph"]], "star_graph() (in module rustworkx.generators)": [[431, "rustworkx.generators.star_graph"]], "graph_adjacency_matrix() (in module rustworkx)": [[432, "rustworkx.graph_adjacency_matrix"]], "graph_all_pairs_all_simple_paths() (in module rustworkx)": [[433, "rustworkx.graph_all_pairs_all_simple_paths"]], "graph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[434, "rustworkx.graph_all_pairs_bellman_ford_path_lengths"]], "graph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[435, "rustworkx.graph_all_pairs_bellman_ford_shortest_paths"]], "graph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[436, "rustworkx.graph_all_pairs_dijkstra_path_lengths"]], "graph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[437, "rustworkx.graph_all_pairs_dijkstra_shortest_paths"]], "graph_all_shortest_paths() (in module rustworkx)": [[438, "rustworkx.graph_all_shortest_paths"]], "graph_all_simple_paths() (in module rustworkx)": [[439, "rustworkx.graph_all_simple_paths"]], "graph_astar_shortest_path() (in module rustworkx)": [[440, "rustworkx.graph_astar_shortest_path"]], "graph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[441, "rustworkx.graph_bellman_ford_shortest_path_lengths"]], "graph_betweenness_centrality() (in module rustworkx)": [[442, "rustworkx.graph_betweenness_centrality"]], "graph_bfs_search() (in module rustworkx)": [[443, "rustworkx.graph_bfs_search"]], "graph_bipartite_edge_color() (in module rustworkx)": [[444, "rustworkx.graph_bipartite_edge_color"]], "graph_bipartite_layout() (in module rustworkx)": [[445, "rustworkx.graph_bipartite_layout"]], "graph_cartesian_product() (in module rustworkx)": [[446, "rustworkx.graph_cartesian_product"]], "graph_circular_layout() (in module rustworkx)": [[447, "rustworkx.graph_circular_layout"]], "graph_closeness_centrality() (in module rustworkx)": [[448, "rustworkx.graph_closeness_centrality"]], "graph_complement() (in module rustworkx)": [[449, "rustworkx.graph_complement"]], "graph_core_number() (in module rustworkx)": [[450, "rustworkx.graph_core_number"]], "graph_dfs_edges() (in module rustworkx)": [[451, "rustworkx.graph_dfs_edges"]], "graph_dfs_search() (in module rustworkx)": [[452, "rustworkx.graph_dfs_search"]], "graph_dijkstra_search() (in module rustworkx)": [[453, "rustworkx.graph_dijkstra_search"]], "graph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[454, "rustworkx.graph_dijkstra_shortest_path_lengths"]], "graph_dijkstra_shortest_paths() (in module rustworkx)": [[455, "rustworkx.graph_dijkstra_shortest_paths"]], "graph_distance_matrix() (in module rustworkx)": [[456, "rustworkx.graph_distance_matrix"]], "graph_edge_betweenness_centrality() (in module rustworkx)": [[457, "rustworkx.graph_edge_betweenness_centrality"]], "graph_eigenvector_centrality() (in module rustworkx)": [[458, "rustworkx.graph_eigenvector_centrality"]], "graph_floyd_warshall() (in module rustworkx)": [[459, "rustworkx.graph_floyd_warshall"]], "graph_floyd_warshall_numpy() (in module rustworkx)": [[460, "rustworkx.graph_floyd_warshall_numpy"]], "graph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[461, "rustworkx.graph_floyd_warshall_successor_and_distance"]], "graph_greedy_color() (in module rustworkx)": [[462, "rustworkx.graph_greedy_color"]], "graph_greedy_edge_color() (in module rustworkx)": [[463, "rustworkx.graph_greedy_edge_color"]], "graph_is_isomorphic() (in module rustworkx)": [[464, "rustworkx.graph_is_isomorphic"]], "graph_is_subgraph_isomorphic() (in module rustworkx)": [[465, "rustworkx.graph_is_subgraph_isomorphic"]], "graph_k_shortest_path_lengths() (in module rustworkx)": [[466, "rustworkx.graph_k_shortest_path_lengths"]], "graph_katz_centrality() (in module rustworkx)": [[467, "rustworkx.graph_katz_centrality"]], "graph_line_graph() (in module rustworkx)": [[468, "rustworkx.graph_line_graph"]], "graph_longest_simple_path() (in module rustworkx)": [[469, "rustworkx.graph_longest_simple_path"]], "graph_misra_gries_edge_color() (in module rustworkx)": [[470, "rustworkx.graph_misra_gries_edge_color"]], "graph_node_link_json() (in module rustworkx)": [[471, "rustworkx.graph_node_link_json"]], "graph_num_shortest_paths_unweighted() (in module rustworkx)": [[472, "rustworkx.graph_num_shortest_paths_unweighted"]], "graph_random_layout() (in module rustworkx)": [[473, "rustworkx.graph_random_layout"]], "graph_shell_layout() (in module rustworkx)": [[474, "rustworkx.graph_shell_layout"]], "graph_spiral_layout() (in module rustworkx)": [[475, "rustworkx.graph_spiral_layout"]], "graph_spring_layout() (in module rustworkx)": [[476, "rustworkx.graph_spring_layout"]], "graph_tensor_product() (in module rustworkx)": [[477, "rustworkx.graph_tensor_product"]], "graph_token_swapper() (in module rustworkx)": [[478, "rustworkx.graph_token_swapper"]], "graph_transitivity() (in module rustworkx)": [[479, "rustworkx.graph_transitivity"]], "graph_union() (in module rustworkx)": [[480, "rustworkx.graph_union"]], "graph_unweighted_average_shortest_path_length() (in module rustworkx)": [[481, "rustworkx.graph_unweighted_average_shortest_path_length"]], "graph_vf2_mapping() (in module rustworkx)": [[482, "rustworkx.graph_vf2_mapping"]], "has_path() (in module rustworkx)": [[483, "rustworkx.has_path"]], "hits() (in module rustworkx)": [[484, "rustworkx.hits"]], "is_bipartite() (in module rustworkx)": [[485, "rustworkx.is_bipartite"]], "is_connected() (in module rustworkx)": [[486, "rustworkx.is_connected"]], "is_directed_acyclic_graph() (in module rustworkx)": [[487, "rustworkx.is_directed_acyclic_graph"]], "is_isomorphic() (in module rustworkx)": [[488, "rustworkx.is_isomorphic"]], "is_isomorphic_node_match() (in module rustworkx)": [[489, "rustworkx.is_isomorphic_node_match"]], "is_matching() (in module rustworkx)": [[490, "rustworkx.is_matching"]], "is_maximal_matching() (in module rustworkx)": [[491, "rustworkx.is_maximal_matching"]], "is_planar() (in module rustworkx)": [[492, "rustworkx.is_planar"]], "is_subgraph_isomorphic() (in module rustworkx)": [[493, "rustworkx.is_subgraph_isomorphic"]], "is_weakly_connected() (in module rustworkx)": [[494, "rustworkx.is_weakly_connected"]], "isolates() (in module rustworkx)": [[495, "rustworkx.isolates"]], "k_shortest_path_lengths() (in module rustworkx)": [[496, "rustworkx.k_shortest_path_lengths"]], "katz_centrality() (in module rustworkx)": [[497, "rustworkx.katz_centrality"]], "layers() (in module rustworkx)": [[498, "rustworkx.layers"]], "lexicographical_topological_sort() (in module rustworkx)": [[499, "rustworkx.lexicographical_topological_sort"]], "longest_simple_path() (in module rustworkx)": [[500, "rustworkx.longest_simple_path"]], "max_weight_matching() (in module rustworkx)": [[501, "rustworkx.max_weight_matching"]], "metric_closure() (in module rustworkx)": [[502, "rustworkx.metric_closure"]], "minimum_spanning_edges() (in module rustworkx)": [[503, "rustworkx.minimum_spanning_edges"]], "minimum_spanning_tree() (in module rustworkx)": [[504, "rustworkx.minimum_spanning_tree"]], "negative_edge_cycle() (in module rustworkx)": [[505, "rustworkx.negative_edge_cycle"]], "networkx_converter() (in module rustworkx)": [[506, "rustworkx.networkx_converter"]], "node_connected_component() (in module rustworkx)": [[507, "rustworkx.node_connected_component"]], "node_link_json() (in module rustworkx)": [[508, "rustworkx.node_link_json"]], "num_shortest_paths_unweighted() (in module rustworkx)": [[509, "rustworkx.num_shortest_paths_unweighted"]], "number_connected_components() (in module rustworkx)": [[510, "rustworkx.number_connected_components"]], "number_weakly_connected_components() (in module rustworkx)": [[511, "rustworkx.number_weakly_connected_components"]], "pagerank() (in module rustworkx)": [[512, "rustworkx.pagerank"]], "random_geometric_graph() (in module rustworkx)": [[513, "rustworkx.random_geometric_graph"]], "random_layout() (in module rustworkx)": [[514, "rustworkx.random_layout"]], "read_graphml() (in module rustworkx)": [[515, "rustworkx.read_graphml"]], "shell_layout() (in module rustworkx)": [[516, "rustworkx.shell_layout"]], "simple_cycles() (in module rustworkx)": [[517, "rustworkx.simple_cycles"]], "spiral_layout() (in module rustworkx)": [[518, "rustworkx.spiral_layout"]], "spring_layout() (in module rustworkx)": [[519, "rustworkx.spring_layout"]], "steiner_tree() (in module rustworkx)": [[520, "rustworkx.steiner_tree"]], "stoer_wagner_min_cut() (in module rustworkx)": [[521, "rustworkx.stoer_wagner_min_cut"]], "strongly_connected_components() (in module rustworkx)": [[522, "rustworkx.strongly_connected_components"]], "topological_generations() (in module rustworkx)": [[523, "rustworkx.topological_generations"]], "topological_sort() (in module rustworkx)": [[524, "rustworkx.topological_sort"]], "transitive_reduction() (in module rustworkx)": [[525, "rustworkx.transitive_reduction"]], "transitivity() (in module rustworkx)": [[526, "rustworkx.transitivity"]], "two_color() (in module rustworkx)": [[527, "rustworkx.two_color"]], "undirected_gnm_random_graph() (in module rustworkx)": [[528, "rustworkx.undirected_gnm_random_graph"]], "undirected_gnp_random_graph() (in module rustworkx)": [[529, "rustworkx.undirected_gnp_random_graph"]], "undirected_random_bipartite_graph() (in module rustworkx)": [[530, "rustworkx.undirected_random_bipartite_graph"]], "union() (in module rustworkx)": [[531, "rustworkx.union"]], "unweighted_average_shortest_path_length() (in module rustworkx)": [[532, "rustworkx.unweighted_average_shortest_path_length"]], "vf2_mapping() (in module rustworkx)": [[533, "rustworkx.vf2_mapping"]], "bfsvisitor (class in rustworkx.visit)": [[534, "rustworkx.visit.BFSVisitor"]], "black_target_edge() (bfsvisitor method)": [[535, "rustworkx.visit.BFSVisitor.black_target_edge"]], "discover_vertex() (bfsvisitor method)": [[536, "rustworkx.visit.BFSVisitor.discover_vertex"]], "finish_vertex() (bfsvisitor method)": [[537, "rustworkx.visit.BFSVisitor.finish_vertex"]], "gray_target_edge() (bfsvisitor method)": [[538, "rustworkx.visit.BFSVisitor.gray_target_edge"]], "non_tree_edge() (bfsvisitor method)": [[539, "rustworkx.visit.BFSVisitor.non_tree_edge"]], "tree_edge() (bfsvisitor method)": [[540, "rustworkx.visit.BFSVisitor.tree_edge"]], "dfsvisitor (class in rustworkx.visit)": [[541, "rustworkx.visit.DFSVisitor"]], "back_edge() (dfsvisitor method)": [[542, "rustworkx.visit.DFSVisitor.back_edge"]], "discover_vertex() (dfsvisitor method)": [[543, "rustworkx.visit.DFSVisitor.discover_vertex"]], "finish_vertex() (dfsvisitor method)": [[544, "rustworkx.visit.DFSVisitor.finish_vertex"]], "forward_or_cross_edge() (dfsvisitor method)": [[545, "rustworkx.visit.DFSVisitor.forward_or_cross_edge"]], "tree_edge() (dfsvisitor method)": [[546, "rustworkx.visit.DFSVisitor.tree_edge"]], "dijkstravisitor (class in rustworkx.visit)": [[547, "rustworkx.visit.DijkstraVisitor"]], "discover_vertex() (dijkstravisitor method)": [[548, "rustworkx.visit.DijkstraVisitor.discover_vertex"]], "edge_not_relaxed() (dijkstravisitor method)": [[549, "rustworkx.visit.DijkstraVisitor.edge_not_relaxed"]], "edge_relaxed() (dijkstravisitor method)": [[550, "rustworkx.visit.DijkstraVisitor.edge_relaxed"]], "examine_edge() (dijkstravisitor method)": [[551, "rustworkx.visit.DijkstraVisitor.examine_edge"]], "finish_vertex() (dijkstravisitor method)": [[552, "rustworkx.visit.DijkstraVisitor.finish_vertex"]], "prunesearch": [[553, "rustworkx.visit.PruneSearch"]], "stopsearch": [[554, "rustworkx.visit.StopSearch"]], "graphviz_draw() (in module rustworkx.visualization)": [[555, "rustworkx.visualization.graphviz_draw"]], "mpl_draw() (in module rustworkx.visualization)": [[556, "rustworkx.visualization.mpl_draw"]], "weakly_connected_components() (in module rustworkx)": [[557, "rustworkx.weakly_connected_components"]]}})